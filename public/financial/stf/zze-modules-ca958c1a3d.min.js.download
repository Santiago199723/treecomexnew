/**
 * @description This documentation has aimed to show all components and generic features used for the Front-end with
 *              _<a href="https://angularjs.org/" target="_blank">AngularJS</a>_.
 */

angular.module('zze', [
	// Working in zze-front and legacy.
	'zze-messages',
	'asset-path',

	// External modules.
	'pascalprecht.translate',
	'ngAnimate',
	'ngDialog',
	'ui.router',
	'ajoslin.promise-tracker',
	'selectize',
	'angularFileUpload',
	'platanus.inflector',

	// Main modules.
	'zze.commons',
	'zze.utils',
	'zze.fileUpload',

	// Application modules.
	'zze.permissions',
	'zze.settings',
	'zze.activities',
	'zze.billings',
	'zze.budgets',
	'zze.cancellations',
	'zze.categories',
	'zze.entities',
	'zze.collections',
	'zze.credit-cards',
	'zze.dashboard',
	'zze.finhub',
	'zze.highcharts',
	'zze.plans',
	'zze.popupEmailValidation',
	'zze.reminders',
	'zze.shared',
	'zze.tags',
	'zze.entityUsers',
	'zze.transactions'
]);

/**
 * @ngdoc overview
 * @name zze.commons
 *
 * @description The commons module contains all the tools and general purpose features, such as directives, filters,
 *              services, factories and components of general use.
 */
angular.module('zze.commons', ['ajoslin.promise-tracker']);

/**
 * @ngdoc overview
 * @name zze.utils
 *
 * @description It provides the application a number of resources to processes, such as validators, formatters,
 *              proccessadores that meet the input stream> process> output.
 */
angular.module('zze.utils', []);

/**
 * Created by selinger on 08/09/17.
 */
angular.module('asset-path', []);


// O modulo independent-loader foi criado pra features como messages e popup-first-use que precisam utilizar o loader tanto no zze-front como no legacy-front, ele será removido assim que a migração do legacy-front para o zze-front estiver 100%.

angular.module('independent-loader', [
    'ajoslin.promise-tracker'
]);

/**
 * Start module Shared in zze.
 */
angular
  .module('zze.shared', []);

/**
 * Start module Settings in zze.
 */
angular
  .module('zze.settings', []);
angular.module('zze.highcharts', []);
angular.module('zze.budgets', []);
/**
 * Start module Credit Cards in zze.
 */
angular
  .module('zze.credit-cards', []);
/**
 * Start module Dashboard in zze.
 */
angular.module('zze.dashboard', []);

angular.module('zze.finhub', []);

/**
 * Start module Messages in zze.
 */

(function () {

    'use strict';

    var messagesApp = angular.module('zze-messages', [
        'angular.filter',
        'asset-path',
        'ngAnimate',
        'ngDialog',
        'independent-loader'
    ]);

    messagesApp.config(function ($sceDelegateProvider, $httpProvider) {

        $httpProvider.defaults.useXDomain = true;
        $httpProvider.defaults.headers.common['current-entity-id'] = window.APP_JS_ADAPTER_DATA.currentEntityId;
        $httpProvider.defaults.headers.common['X-AUTH-TOKEN'] = window.APP_JS_ADAPTER_DATA.xAuthToken;

        $sceDelegateProvider.resourceUrlWhitelist([
                'self',
                window.APP_JS_ADAPTER_DATA.zzeFrontUrl+'/**'
            ]);
        }
      );

    if (window.Routes) {
      messagesApp.requires.push('ui-route');
    }

})();


/**
 * Created by selinger on 14/11/17.
 */
angular.module('zze.permissions', []);

/**
 * Start module Plans in zze.
 */
angular
  .module('zze.plans', []);

/**
 * Start module popup-email-validation in zze.
 */
angular
  .module('zze.popupEmailValidation', []);

/**
 * Start module Transaction in zze.
 */
angular
    .module('zze.transactions', [
        'zze.creditCard'
    ]);

/**
 * Start module teh Factory Collections in zze.
 */
angular
  .module('zze.collections', []);

/**
 * Start module Activities in zze.
 */
angular
  .module('zze.activities', ['angular.filter']);

/**
 * Start module Billings in zze.
 */
angular
    .module('zze.billings', []);

angular
    .module('zze.cancellations', []);

/**
 * Start module Premium in zze.
 */
angular
    .module('zze.entities', []);

/**
 * Start module Categories in zze.
 */
angular
  .module('zze.categories', []);
/**
 * Start module entity-users in zze.
 */
angular
  .module('zze.entityUsers', []);

/**
 * Start module Reminders in zze.
 */
angular
  .module('zze.reminders', []);

/**
 * Start module Tags in zze.
 */
angular
  .module('zze.tags', []);

/**
 * Start module creditCard in zze.
 */
angular
    .module('zze.creditCard', []);

/**
 * Start module creditCard in zze.
 */
angular
    .module('zze.fileUpload', []);

(function () {

    'use strict';

    angular.module('zze')

        /**
         * @ngdoc object
         * @constant
         *
         * @name zze.ENUMS_TYPE_ACCOUNTS
         * @description This _object_ enum contains the list of types of bank accounts.
         */
        .constant('ENUMS_TYPE_ACCOUNTS', {
            0: {
                value: 0,
                stringValue: 'checking_account',
                description: 'Conta corrente'
            },
            1: {
                value: 1,
                stringValue: 'savings_account',
                description: 'Conta poupanca/Investimento'
            },
            2: {
                value: 2,
                stringValue: 'other_account',
                description: 'Outros'
            },
            3: {
                value: 3,
                stringValue: 'credit_card',
                description: 'Cartão de crédito'
            },
            4: {
                value: 4,
                stringValue: 'unknown_account',
                description: 'Conta desconhecida'
            }
        });
})();

(function () {

    'use strict';

    angular.module('independent-loader')

        .constant('independent-loader.LOADING_TEMPLATES', {
            pageSmall: 'templates/loading/loading.page.small.html',
            pageMedium: 'templates/loading/loading.page.medium.html',
            pageBig: 'templates/loading/loading.page.big.html',

            pageSmallWhite: 'templates/loading/loading.page.small.white.html',
            pageMediumWhite: 'templates/loading/loading.page.medium.white.html',
            pageBigWhite: 'templates/loading/loading.page.big.white.html',

            headerSmall: 'templates/loading/loading.header.small.html',
            headerBig: 'templates/loading/loading.header.big.html'
        });
})();

(function () {

    'use strict';

    angular.module('zze.commons')

        .constant('zze.commons.LOADING_TEMPLATES', {
            pageSmall: 'templates/loading/loading.page.small.html',
            pageMedium: 'templates/loading/loading.page.medium.html',
            pageBig: 'templates/loading/loading.page.big.html',

            pageSmallWhite: 'templates/loading/loading.page.small.white.html',
            pageMediumWhite: 'templates/loading/loading.page.medium.white.html',
            pageBigWhite: 'templates/loading/loading.page.big.white.html',

            pageSmallGreen: 'template/loading/loading.page.small.green.html',
            pageMediumGreen: 'template/loading/loading.page.medium.green.html',
            pageBigGreen: 'template/loading/loading.page.big.green.html',

            headerSmall: 'template/loading/loading.header.small.html',
            headerBig: 'template/loading/loading.header.big.html'
        });
})();

(function () {

    'use strict';

    angular.module('zze')

        .constant('ENUMS_ERRORS_INTEGRATIONS', {
            auth: {
                redirect: 'auth-form',
                message: 'CPF ou senha inválidos'
            },
            outage: {
                redirect: 'error-integration',
                message: 'Erro desconhecido, por favor, tente mais tarde.'
            }
        });
})();

(function () {

    'use strict';

    angular.module('zze.transactions')

        /* jshint camelcase:false */
        .constant('ENUMS_PRESENTS', {
            default: {
                value: 'default',
                i18nKey: 'transactions.ENUMS_PRESENTS.default'
            },
            earnings: {
                value: 'earnings',
                i18nKey: 'transactions.ENUMS_PRESENTS.earnings'
            },
            earnings_paid: {
                value: 'earnings_paid',
                i18nKey: 'transactions.ENUMS_PRESENTS.earnings_paid'
            },
            earnings_pending: {
                value: 'earnings_pending',
                i18nKey: 'transactions.ENUMS_PRESENTS.earnings_pending'
            },
            expenses: {
                value: 'expenses',
                i18nKey: 'transactions.ENUMS_PRESENTS.expenses'
            },
            expenses_paid: {
                value: 'expenses_paid',
                i18nKey: 'transactions.ENUMS_PRESENTS.expenses_paid'
            },
            expenses_pending: {
                value: 'expenses_pending',
                i18nKey: 'transactions.ENUMS_PRESENTS.expenses_pending'
            },
            transferences: {
                value: 'transferences',
                i18nKey: 'transactions.ENUMS_PRESENTS.transferences'
            },
            transferences_paid: {
                value: 'transferences_paid',
                i18nKey: 'transactions.ENUMS_PRESENTS.transferences_paid'
            },
            transferences_pending: {
                value: 'transferences_pending',
                i18nKey: 'transactions.ENUMS_PRESENTS.transferences_pending'
            },
            infinite: {
                value: 'infinite',
                i18nKey: 'transactions.ENUMS_PRESENTS.infinite'
            },
            finite: {
                value: 'finite',
                i18nKey: 'transactions.ENUMS_PRESENTS.finite'
            }
        });
})();

(function () {
	'use strict';

	angular
		.module('zze')
		/**
         * Default settings for ngDialog.
         */
		.config([
			'ngDialogProvider',
			function (ngDialogProvider) {
				ngDialogProvider.setDefaults({
					className: 'theme-organizze'
				});
			}
		])
		/**
         * Show message erro to Interceptor Request.
         */
		.config(function ($httpProvider) {
			// values (development, production, staging)
			if (window.Context.appEnv === 'production') {
				var ravenOptions = {
					ignoreErrors: ['evalAsync', 'is not a function', 'read property']
				};

				Raven.config('https://919c084b41a447db8d5544af8b7965e9@sentry.io/104495', ravenOptions).install();

				Raven.setUserContext({
					email: window.Context.currentUser.email,
					id: window.Context.currentEntity.id
				});
			}

			$httpProvider.defaults.useXDomain = true;
			$httpProvider.defaults.headers.common['current-entity-id'] = window.APP_JS_ADAPTER_DATA.currentEntityId;
			$httpProvider.defaults.headers.common['X-AUTH-TOKEN'] = window.APP_JS_ADAPTER_DATA.xAuthToken;

			$httpProvider.interceptors.push(function ($q, $injector) {
				var MessageFactory = $injector.get('zze.commons.messagesFactory');

				return {
					responseError: function (response) {
						if (response.status === 400) {
							// Necessário por causa da estrutura de erros do Rails.
							for (var key in response.data) {
								MessageFactory.setFlash(response.data[key][0] + '.', 'error');
								break;
							}
						}

						if (response.status === 401) {
							// TODO: ver como fazer isso de uma forma melhor.
							window.location.reload();
						}

						if (response.status === 502 && window.Context.appEnv === 'production') {
							Raven.captureException(JSON.stringify({ data: response.data, status: response.status }));
							MessageFactory.setFlash(
								'Desculpe, serviço indisponível no momento, por favor, tente novamente mais tarde.',
								'warn'
							);
						}

						return $q.reject(response);
					}
				};
			});
		})
		.config(function ($sceDelegateProvider) {
			$sceDelegateProvider.resourceUrlWhitelist(['self', window.APP_JS_ADAPTER_DATA.zzeFrontUrl + '/**']);
		})
		.config([
			'$translateProvider',
			function ($translateProvider) {
				var locale = window.Context.locale;
				$translateProvider.translations(locale, window.zzeTranslations || {});
				$translateProvider.use(locale);
				$translateProvider.useSanitizeValueStrategy('sceParameters');
				window.moment.locale({pt: 'pt_BR', en: 'en'}[locale]);
			}
		]);
})();

moment
    .updateLocale('pt_BR', {
        months: [
            'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho',
            'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ],
        monthsShort: [
            'Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun',
            'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'
        ],
        weekdays: [
            'Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'
        ],
        weekdaysShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb']
    });

(function () {
    'use strict';

    angular.module('zze')
        .config(zzeConfigRoute);

    zzeConfigRoute.$inject = ['$injector'];

    function zzeConfigRoute($injector) {

        var $stateProvider = $injector.get('$stateProvider'),
            $urlRouterProvider = $injector.get('$urlRouterProvider'),
            $locationProvider = $injector.get('$locationProvider');

        $urlRouterProvider.rule(function ($injector, $location) {

            var path = $location.path();
            var hasTrailingSlash = path[path.length - 1] === '/';

            if (hasTrailingSlash) {

                //if last charcter is a slash, return the same url without the slash
                var newPath = path.substr(0, path.length - 1);
                return newPath;
            }

        });

        $urlRouterProvider.otherwise(function ($injector, $location) {
            // angular app routes pattern
            var regex = /^\/\d+\/a\//;

            if ($location.$$search['data-no-turbolink'] === 'true') {
                window.location.href = $location.$$path;
                return;
            }

            if (regex.test($location.$$path)) {
                window.location.href = '/404.html';
            } else {

                if ($location.$$path === '/legacy_transactions_flag') {
                    window.location.href = $location.$$url;
                    return;
                }

                if ($location.$$path === '/legacy_transactions_alert_hide') {
                    $.post($location.$$path);
                    return;
                }

                if (!!$location.$$path && $location.$$path.match(/logout/)) {
                    window.location.href = $location.$$url;
                    return;
                }

                $(document).trigger('angular:leaveApp', [$location.$$absUrl, $location.$$path, $location.$$hash]);
            }
        });

        $stateProvider
            .state('settings', {
                url: urlFor('configuracoes'),
                abstract: true,
                views: {
                    'zze-front': {
                        abstract: true,
                        templateUrl: templatePath('modules/settings/settings.html')
                    }
                }
            })
            .state('settings.tags', {
                url: '/tags',
                views: {
                    'zze-settings': {
                        controller: 'zze.tags.TagsIndexCtrl',
                        controllerAs: 'tagsIndex',
                        templateUrl: templatePath('modules/settings/tags/templates/tags.html'),
                        resolve: {
                            isAllowedAccess: function ($injector) {
                                var PermissionsFactory = $injector.get('zze.permissions.permissionsFactory');

                                return PermissionsFactory.isAllowedAccess('tag');
                            },

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('settings.reminders', {
                url: '/alertas',
                views: {
                    'zze-settings': {
                        controller: 'zze.reminders.RemindersIndexCtrl',
                        controllerAs: 'remindersIndex',
                        templateUrl: templatePath('modules/settings/reminders/templates/reminders.html'),
                        resolve: {
                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('settings.billings', {
                url: '/plano-e-faturamento',
                views: {
                    'zze-settings': {
                        controller: 'zze.billings.BillingsCtrl',
                        controllerAs: 'billings',
                        templateUrl: templatePath('modules/settings/billings/templates/billings.html'),
                        resolve: {
                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('settings.cancel-subscription', {
                url: '/cancelar-assinatura',
                views: {
                    'zze-settings': {
                        controller: 'zze.billings.CancelSubscriptionCtrl',
                        controllerAs: 'cancelSubscription',
                        templateUrl: templatePath('modules/settings/billings/templates/cancel-subscription.html'),
                        resolve: {
                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }

            })
            .state('settings.cancel-subscription-success', {
                url: '/cancelar-assinatura-sucesso',
                views: {
                    'zze-settings': {
                        controller: 'zze.billings.CancelSubscriptionCtrl',
                        controllerAs: 'cancelSubscription',
                        templateUrl: templatePath('modules/settings/billings/templates/cancel-subscription-success.html')
                    }
                }

            })
            .state('settings.cancel-subscription-appstore', {
                url: '/cancelar-assinatura-appstore',
                views: {
                    'zze-settings': {
                        controller: 'zze.billings.CancelSubscriptionCtrl',
                        controllerAs: 'cancelSubscription',
                        templateUrl: templatePath('modules/settings/billings/templates/cancel-subscription-appstore.html')
                    }
                }

            })
            .state('settings.categories', {
                url: '/categorias',
                views: {
                    'zze-settings': {
                        controller: 'zze.categories.CategoriesCtrl',
                        controllerAs: 'categories',
                        templateUrl: templatePath('modules/settings/categories/templates/categories.html'),
                        resolve: {

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('settings.activities', {
                url: '/atividades',
                views: {
                    'zze-settings': {
                        controller: 'zze.activities.ActivitiesCtrl',
                        controllerAs: 'activities',
                        templateUrl: templatePath('modules/settings/activities/templates/activities.html'),
                        resolve: {

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })

            .state('credit_cards/index', {
                url: urlFor('cartoes-de-credito'),
                views: {
                    'zze-front': {
                        controller: 'zze.credit-cards.CreditCardsCtrl',
                        controllerAs: 'creditCards',
                        templateUrl: templatePath('modules/credit-cards/templates/credit-cards.html'),
                        resolve: {

                            isAllowedAccess: function ($injector) {
                                var PermissionsFactory = $injector.get('zze.permissions.permissionsFactory');

                                return PermissionsFactory.isAllowedAccess('credit_card');
                            },

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('categories_migration/index', {
                url: urlFor('categorias/migracao'),
                views: {
                    'zze-front': {
                        controller: 'zze.categories.MigrationCtrl',
                        controllerAs: 'migration',
                        templateUrl: templatePath('modules/categories-migration/templates/categories-migration.html'),
                        resolve: {
                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('messages/full-history', {
                url: urlFor('mensagens/historico'),
                views: {
                    'zze-front': {
                        controller: 'zze-messages.FullHistoryCtrl',
                        controllerAs: 'history',
                        templateUrl: templatePath('modules/messages/templates/messages-full-history.template.html'),
                        resolve: {
                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('transactions', {
                url: urlFor('lancamentos'),
                views: {
                    'zze-front': {
                        controller: 'zze.transactions.TransactionCtrl',
                        controllerAs: 'transactions',
                        templateUrl: templatePath('modules/transactions/templates/transactions.html'),
                        resolve: {

                            isAllowedAccess: function ($injector) {
                                var PermissionsFactory = $injector.get('zze.permissions.permissionsFactory');

                                return PermissionsFactory.isAllowedAccess('transaction');
                            },

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('dashboard', {
                url: urlFor('inicio'),
                views: {
                    'zze-front': {
                        controller: 'zze.dashboard.DashboardCtrl',
                        controllerAs: 'dash',
                        templateUrl: templatePath('modules/dashboard/templates/dashboard.html'),
                        resolve: {
                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('budgets', {
                url: urlWithoutScopeFor('metas'),
                views: {
                    'zze-front': {
                        controller: 'zze.budgets.BudgetsCtrl',
                        controllerAs: 'budgets',
                        templateUrl: templatePath('modules/budgets/templates/budgets.html'),
                        resolve: {

                            isAllowedAccess: function ($injector) {
                                var PermissionsFactory = $injector.get('zze.permissions.permissionsFactory');

                                return PermissionsFactory.isAllowedAccess('goal');
                            },

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('expenses_limit', {
                url: urlWithoutScopeFor('limite-de-gastos'),
                views: {
                    'zze-front': {
                        controller: 'zze.budgets.BudgetsCtrl',
                        controllerAs: 'budgets',
                        templateUrl: templatePath('modules/budgets/templates/budgets.html'),
                        resolve: {

                            isAllowedAccess: function ($injector) {
                                var PermissionsFactory = $injector.get('zze.permissions.permissionsFactory');

                                return PermissionsFactory.isAllowedAccess('goal');
                            },

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            },
                            onlyExpenses: function () {
                                return true;
                            }
                        }
                    }
                }
            })
            .state('entities', {
                url: urlFor('configuracoes/minha-conta'),
                views: {
                    'zze-front': {
                        controller: 'zze.entities.EntitiesCtrl',
                        controllerAs: 'entities',
                        templateUrl: templatePath('modules/settings/entities/templates/entities.html'),
                        resolve: {

                            isAllowedAccess: function ($injector) {
                                var PermissionsFactory = $injector.get('zze.permissions.permissionsFactory');

                                return PermissionsFactory.isAllowedAccess('entity');
                            },

                            hasExpiredLicense: function ($injector) {
                                var MainFactory = $injector.get('zze.mainFactory');

                                return MainFactory.hasExpiredLicense();
                            }
                        }
                    }
                }
            })
            .state('plans', {
                url: urlFor('planos'),
                views: {
                    'zze-front': {
                        controller: 'zze.plans.PlansCtrl',
                        controllerAs: 'plans',
                        templateUrl: templatePath('modules/plans/templates/plans.html')
                    }
                }
            })
            .state('plans/change-plan', {
                url: urlFor('mudar-plano-mensal'),
                views: {
                    'zze-front': {
                        controller: 'zze.plans.PlansCtrl',
                        controllerAs: 'plans',
                        templateUrl: templatePath('modules/plans/templates/change_mensal_plan_to_anual.html')
                    }
                }
            });


        // legacy routes redirect
        $urlRouterProvider.when(urlFor('configuracoes/notificacoes'), function ($state) {
            $state.go('settings.reminders');
        });

        function urlFor(path) {
            return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/a/' + path;
        }

        function urlWithoutScopeFor(path) {
            return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/' + path;
        }

        function templatePath(path) {
            return AssetPath.get('templates/' + path);
        }

        $locationProvider.html5Mode({
            enabled: true,
            requireBase: false
        });
    }
})();

(function() {
	'use strict';

	angular.module('zze').run(function($rootScope) {
		window.ContextSource = null;

		$rootScope.locale = window.Context.locale;
		$rootScope.refinedLocale = $rootScope.locale === 'pt' ? 'pt-BR' : $rootScope.locale;

		/**
             * Here is the hacking that will allow us to co-exist "new and legacy" enviroment smoothly.
             *
             * We redirect the user via Turbolinks and also make a workaround at window.history to avoid exceptions.
             * We also make some cleaning on angular side that works out as memory/cpu releasing after we leave this new
             * app context.
             **/

		$(document).off('click.noTurbolink').on('click.noTurbolink', '*[data-no-turbolink]', function() {
			return true;
		});

		$(document).one('angular:leaveApp', function(e, absUrl, path, hash) {
			$('html, body').removeClass('ngdialog-open');
			document.cookie = 'reloadContextSource=1; path=/';

			var url = absUrl.split('#')[0];

			if (path === '/primeiros-passos') {
				window.Loader.top.show();
				/* jshint camelcase:false */
				Turbolinks.visit_silent(path);
			} else {
				if (hash) {
					Turbolinks.visit(url + '#' + hash);
				} else {
					Turbolinks.visit(absUrl);
				}
			}

			$(window).off('popstate').off('hashchange').off('keydown.zze').off('keypress.zze');

			window.history.replaceState({ turbolinks: true, url: url }, '', url);

			$rootScope.$destroy();

			$(document).one('page:load', function() {
				$rootScope.$broadcast('$destroy');

				var scope = $rootScope.$$childHead;

				while (scope) {
					var nextScope = scope.$$nextSibling;

					scope.$destroy();
					scope = nextScope;
				}
				for (var prop in $rootScope) {
					if ($rootScope[prop]) {
						$rootScope[prop] = null;
					}
				}
			});
		});
	});
})();

(function () {

    'use strict';

    angular.module('independent-loader')
        .run(runBlock);

    runBlock.$inject = ['$injector'];

    function runBlock ($injector) {
        var $templateCache = $injector.get('$templateCache'),
            LoadingService = $injector.get('independent-loader.loadingFactory'),
            LOADING_TEMPLATE = $injector.get('independent-loader.LOADING_TEMPLATES');

        $templateCache.put(LOADING_TEMPLATE.pageSmall, LoadingService.getTemplateCircle('small'));
        $templateCache.put(LOADING_TEMPLATE.pageMedium, LoadingService.getTemplateCircle('medium'));
        $templateCache.put(LOADING_TEMPLATE.pageBig, LoadingService.getTemplateCircle('big'));

        $templateCache.put(LOADING_TEMPLATE.pageSmallWhite, LoadingService.getTemplateCircle('small', 'load-white'));
        $templateCache.put(LOADING_TEMPLATE.pageMediumWhite, LoadingService.getTemplateCircle('medium', 'load-white'));
        $templateCache.put(LOADING_TEMPLATE.pageBigWhite, LoadingService.getTemplateCircle('big', 'load-white'));

        $templateCache.put(LOADING_TEMPLATE.headerSmall, LoadingService.getTemplateHeader('small'));
        $templateCache.put(LOADING_TEMPLATE.headerBig, LoadingService.getTemplateHeader('big'));
    }

}());

(function () {

    'use strict';

    angular.module('zze.commons')
        .run(runBlock);

    runBlock.$inject = ['$injector'];

    function runBlock ($injector) {
        var $templateCache = $injector.get('$templateCache'),
            LoadingService = $injector.get('zze.commons.loadingFactory'),
            LOADING_TEMPLATE = $injector.get('zze.commons.LOADING_TEMPLATES');

        $templateCache.put(LOADING_TEMPLATE.pageSmall, LoadingService.getTemplateCircle('small'));
        $templateCache.put(LOADING_TEMPLATE.pageMedium, LoadingService.getTemplateCircle('medium'));
        $templateCache.put(LOADING_TEMPLATE.pageBig, LoadingService.getTemplateCircle('big'));

        $templateCache.put(LOADING_TEMPLATE.pageSmallWhite, LoadingService.getTemplateCircle('small', 'load-white'));
        $templateCache.put(LOADING_TEMPLATE.pageMediumWhite, LoadingService.getTemplateCircle('medium', 'load-white'));
        $templateCache.put(LOADING_TEMPLATE.pageBigWhite, LoadingService.getTemplateCircle('big', 'load-white'));

        $templateCache.put(LOADING_TEMPLATE.pageSmallGreen, LoadingService.getTemplateCircle('small', 'load-green'));
        $templateCache.put(LOADING_TEMPLATE.pageMediumGreen, LoadingService.getTemplateCircle('medium', 'load-green'));
        $templateCache.put(LOADING_TEMPLATE.pageBigGreen, LoadingService.getTemplateCircle('big', 'load-green'));

        $templateCache.put(LOADING_TEMPLATE.headerSmall, LoadingService.getTemplateHeader('small'));
        $templateCache.put(LOADING_TEMPLATE.headerBig, LoadingService.getTemplateHeader('big'));
    }

}());

/**
 * Created by selinger on 08/09/17.
 */
(function () {

    'use strict';

    angular.module('asset-path')
        .provider('assetPath', function () {
            return {
                $get: function () {
                    return AssetPath.get;
                }
            };
        });
})();

(function () {
    'use strict';

    /**
     * @ngdoc controller
     * @name zze.controller:MainCtrl
     *
     * @requires $state
     * @requires promiseTracker
     * @requires zze.commons.crudFactory
     *
     * @function
     *
     * @description Controller's main application, can be seen by any service, filter, controller or directive.
     * Think well before adding anything here, not to overload the controller.
     */
    angular.module('zze')
        .controller('zze.MainCtrl', MainCtrl);

    MainCtrl.$inject = ['$injector', '$rootScope', '$scope'];

    function MainCtrl ($injector, $rootScope, $scope) {

        var viewModel = this,

            $q = $injector.get('$q'),
            $filter = $injector.get('$filter'),

            Dialog = $injector.get('ngDialog'),
            PromiseTracker = $injector.get('promiseTracker'),
            MainFactory = $injector.get('zze.mainFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            PermissionFactory = $injector.get('zze.permissions.permissionsFactory'),

            publicMethods = {
                getContentClass: getContentClass,
                getIconCategory: getIconCategory,

                setContentClass: setContentClass,
                dismissAnnouncement: dismissAnnouncement,
                showDialogActivateTrial: showDialogActivateTrial,
                showFinhubSync: showFinhubSync,
                showAccessDanied: showAccessDanied,
                visit: visit,

                showDialogPremiumFeature: showDialogPremiumFeature,
                closeAllDialogs: closeAllDialogs,

                checkPermissionView: checkPermissionView
            },

            zzeContentClass = '';

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            $rootScope.$on('$stateChangeStart', function () {
                zzeContentClass = '';
            });

            viewModel.tracker = {
                loadHeader: PromiseTracker()
            };

            _loadContextData();
        }

        function getContentClass () {
            return zzeContentClass;
        }

        function setContentClass (classes) {
            zzeContentClass = classes;
        }

        function getIconCategory (category) {
            return MainFactory.getIconCategory(category);
        }

        function showDialogActivateTrial (status, feature) {
            return MainFactory.showDialogActivateTrial(status, feature, $scope);
        }

        function showFinhubSync () {
            return MainFactory.showFinhubSync();
        }

        function showAccessDanied () {
            MainFactory.showAccessDanied();
        }

        function closeAllDialogs () {
            Dialog.closeAll();
        }

        function checkPermissionView (state, action) {
            return PermissionFactory.checkAccessAction(state, action);
        }

        function visit (url, e) {
            return MainFactory.visit(url, e);
        }

        // TODO: Pedir para o Solano documentar este método.
        function dismissAnnouncement ($event) {
            return MainFactory.dismissAnnouncement($event);
        }

        function showDialogPremiumFeature (status) {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/premium/templates/premium-feature.dialog.html'),
                controller: 'zze.premium.premiumFeatureDialogCtrl',
                controllerAs: 'premiumFeature',
                closeByDocument: false,
                width: 470,
                scope: $scope,
                className: 'ngdialog theme-organizze zze-dialog-premium-feature ' + viewModel.product,
                data: {
                    status: status
                }
            });
        }

        function _loadContextData () {
            viewModel.contextSource = window.Context;

            viewModel.currentUserName = viewModel.contextSource.currentUser.name;

            viewModel.entityID = viewModel.contextSource.currentEntity.id;

            $rootScope.availableResources = viewModel.contextSource.availableResources;

            viewModel.product                 = 'organizze';
            viewModel.isControlle             = false;
            viewModel.isAccountFree           = false;
            viewModel.isAccountTrial          = viewModel.contextSource.currentEntity.planTimeRangeName === 'trial';
            viewModel.isOrganizzeFree         = false;
            viewModel.isControlleFree         = false;
            viewModel.isControlleProfessional = false;


            viewModel.fixedCategories = viewModel.contextSource.currentEntity.fixedCategories;

            viewModel.avatarURL = viewModel.contextSource.currentUser.avatarURL ?
                                  viewModel.contextSource.currentUser.avatarURL :
                                  $filter('assetPath')('images/application/avatar-missing.png');

            _getCountryById(viewModel.contextSource.countryCode).then(function (country) {
                viewModel.country = country;
            });

            /* jshint camelcase:false */
            viewModel.legacy_routes = window.Routes.legacy_app;

            viewModel.permission = {
                account: viewModel.contextSource.currentUser.permissions.account === 'manage',
                balance: viewModel.contextSource.currentUser.permissions.balance === 'read' || viewModel.contextSource.currentUser.permissions.balance === 'manage',
                reports: viewModel.contextSource.currentUser.permissions.report === 'manage' || viewModel.contextSource.currentUser.permissions.report === 'read',
                budget: viewModel.contextSource.currentUser.permissions.goal === 'manage' || viewModel.contextSource.currentUser.permissions.goal === 'read',
                credit_card: viewModel.contextSource.currentUser.permissions.credit_card === 'manage',
                goal: viewModel.contextSource.currentUser.permissions.goal,
                transaction: viewModel.contextSource.currentUser.permissions.transaction
            };
        }

        function _getCountryById (id) {
            var url, deferred;

            url = ContextFactory.getEndPointProccess({
                method: 'show',
                enums: 'countries',
                replace: ':id',
                value: id
            });

            deferred = $q.defer();

            CrudFactory.getOne(url).then(function (resp) {
                deferred.resolve(resp.data);
            });

            return deferred.promise;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .controller('zze.commons.ChartCtrl', zzeChartCtrl);

    zzeChartCtrl.$inject = ['$injector'];

    function zzeChartCtrl ($injector) {
        /* jshint validthis:true */
        var viewModel = this,

            configGraphic = angular.copy(viewModel.config),
            trackerName,

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            ChartFactory = $injector.get('zze.commons.chartFactory'),

            publicMethods = {
                getChart: getChart
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            configGraphic.id = viewModel.data.id;
            configGraphic.uuid = viewModel.data.uuid;

            trackerName = 'chart' + configGraphic.id;

            viewModel.tracker = [];

            viewModel.tracker[trackerName] = PromiseTracker();
        }

        function getChart () {
            if (configGraphic.endPoint) {
                _getChartEndPoint();
            } else {
                _getChartNoEndPoint();
            }
        }

        function _getChartEndPoint () {
            var urlGetPoint = ContextFactory.getEndPointProccess({
                method: configGraphic.endPoint,
                replace: ':id',
                value: viewModel.data.id
            });

            var promise = CrudFactory.getOne(urlGetPoint, {
                params: configGraphic.params
            });

            viewModel.tracker[trackerName].addPromise([promise]);

            promise.then(function (resp) {
                var chartData = ChartFactory.create({
                        config: configGraphic,
                        data: resp.data
                    }),

                    chartLabels = ChartFactory.getLabels(resp.data.chartData);

                _startChart(configGraphic.type, 'chart-' + configGraphic.id, chartData, chartLabels);
            });
        }

        function _getChartNoEndPoint () {
            var chartData = ChartFactory.create({
                config: configGraphic,
                data: viewModel.data
            });

            _startChart(configGraphic.type, 'chart-' + configGraphic.id, chartData);
        }

        function _startChart (type, id, data, labels) {
            var sum = _.countBy(data.data, function (item) {
                return item.y !== 0 ? 'containsValue' : 'noContainsValue';
            });

            if (type === 'BackgroundChart' && !sum.containsValue) {
                return;
            }


            ChartFactory.start(type, id, data, labels);
        }
    }
})();

/**
 * Created by selinger on 24/10/17.
 */
(function () {

    'use strict';

    angular.module('zze.commons')
        .controller('zze.commons.PaginationCtrl', PaginationCtrl);

    PaginationCtrl.$inject = ['$injector', '$scope'];

    function PaginationCtrl ($injector, $scope) {
        var viewModel = this,

            options = {},
            processingPagination = false,

            PaginationService = $injector.get('zze.commons.zzePaginationService'),

            methodsPublic = {
                setOptions: setOptions,
                checkScrollPosition: checkScrollPosition
            };

        _.extend(viewModel, methodsPublic);

        viewModel.hasMoreItems = false;

        function setOptions (opts) {
            options = opts;
        }

        function checkScrollPosition () {

            if (options.zzeMethodTop && PaginationService.checkScrollTop()) {
                var isPageZero = $scope[options.zzeController].pagination.offset;

                if (isPageZero === 0) {
                    return;
                }

                $scope[options.zzeController][options.zzeMethodTop]();
            }

            viewModel.hasMoreItems = $scope[options.zzeController].pagination.hasMoreItems;

            if (options.zzeMethodBottom && PaginationService.checkScrollBottom()) {
                if (!viewModel.hasMoreItems || _checkTrackerActive() || processingPagination) {
                    return;
                }
                var promise = $scope[options.zzeController][options.zzeMethodBottom]();
                if (promise) {
                    promise.then(function (resp) {
                        viewModel.hasMoreItems = resp.data.hasMoreItems;
                    });
                }
                processingPagination = true;
            }
        }

        function _checkTrackerActive () {
            var trackerActive = $scope[options.zzeController].tracker.loadPagination.active();

            if (!trackerActive) {
                processingPagination = false;
            }

            return trackerActive;
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.shared')
        .controller('zze.shared.SettingsMenuCtrl', settingsMenuCtrl);

    settingsMenuCtrl.$inject = ['$injector'];

    function settingsMenuCtrl ($injector) {
        /* jshint validthis:true */
        var viewModel = this,

            ContextFactory = $injector.get('zze.commons.contextFactory'),

            publicMethods = {
                getLegacyUrl: getLegacyUrl
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.data = {};
        }

        function getLegacyUrl (name) {
            return ContextFactory.getLegacyRoute(name);
        }
    }

})();
(function () {

    'use strict';

    angular.module('zze.settings')
        .controller('zze.settings.SettingsCtrl', settingsCtrl);

    settingsCtrl.$inject = ['$injector', '$rootScope'];

    function settingsCtrl () {
        /*jshint validthis:true */
        var viewModel = this,

            publicMethods = {
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
        }

    }

})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .controller('zze.commons.CropImageCtrl', CropImageCtrl);

    CropImageCtrl.$inject = ['$injector', '$scope', 's3UploadResponse'];

    function CropImageCtrl($injector, $scope, s3UploadResponse) {
        var viewModel = this,

            $timeout = $injector.get('$timeout'),

            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            PromiseTracker = $injector.get('promiseTracker'),

            publicMethods = {
                saveCroppedImage: saveCroppedImage,
                uploadFile: uploadFile
            },

            s3UploadImage = s3UploadResponse.data,
            dialogData = $scope.ngDialogData;

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadAvatar: PromiseTracker()
            };

            viewModel.data = {
                myImage: '',
                myCroppedImage: ''
            };
        }

        function saveCroppedImage() {
            var urlBucket = '',
                _s3ObjectKey = 'uploads/' + dialogData.options.dir + '/' + dialogData.options.key + '/avatars/avatar.jpg';

            var url = angular.copy(s3UploadImage.url).replace('https://s3.amazonaws.com/', ''),
                bucket = new AWS.S3({
                    params: {
                        Bucket: url
                    }
                });

            var params = {
                Key: _s3ObjectKey,
                ContentType: 'image/jpg',
                Body: _dataURItoBlob(viewModel.data.myCroppedImage, 'image/jpg'),
                ACL: 'public-read'
            };

            bucket.putObject(params, function (err) {

                if (err) {
                    MessageFactory.setFlash('Tivemos um problema ao enviar sua imagem, por favor, tente novamente!', 'error');
                } else {
                    urlBucket = s3UploadImage.url + '/' + _s3ObjectKey;
                }
            });

            var promise = $timeout(function () {
                $scope.$parent[dialogData.options.ctrl][dialogData.options.callback](dialogData.item, urlBucket);
                $scope.closeThisDialog();
            }, 3000);

            viewModel.tracker.loadAvatar.addPromise(promise);
        }

        function uploadFile($event) {

            var file = $event.target.files[0],
                reader = new FileReader();

            reader.onload = function ($event) {
                $scope.$apply(function () {
                    viewModel.data.myImage = $event.target.result;
                });
            };

            reader.readAsDataURL(file);
        }

        function _dataURItoBlob(dataURI, type) {
            var byteString = atob(dataURI.split(',')[1]),
                ab = new ArrayBuffer(byteString.length),
                ia = new Uint8Array(ab);

            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }

            var bb = new Blob([ab], {
                type: type
            });

            return bb;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.highcharts')
        .controller('zze.commons.HighchartBalanceCtrl', HighchartBalanceCtrl);

    HighchartBalanceCtrl.$inject = ['$injector'];

    function HighchartBalanceCtrl ($injector) {
        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            StringsFactory = $injector.get('zze.utils.stringProcessFactory'),
            HighchartsFactory = $injector.get('zze.highcharts.highchartsFactory'),

            publicMethods = {
                setConfigGraphic: setConfigGraphic
            },

            trackerName;

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = [];

            trackerName = 'chart' + viewModel.zzeHighchartId;
            viewModel.tracker[trackerName] = PromiseTracker();

           /* viewModel.zzeHighchartConfig = {
                endPoint: setConfigGraphic()
             };*/
        }

        function setConfigGraphic () {

            if (viewModel.zzeHighchartConfig.endPoint) {
                _getEndpointGraphic();
            } else {
                var settings = HighchartsFactory.getConfigDefaultBalance(viewModel.zzeHighchartConfig);

                settings.series[0].data = HighchartsFactory.createStructureDataBalance(viewModel.zzeHighchartConfig.data);

                settings.chart.renderTo = 'chart-' + viewModel.zzeHighchartId;

                HighchartsFactory.startGraphic('balance', settings);
            }
        }

        function _getEndpointGraphic () {

            var url = StringsFactory.stringReplace(viewModel.zzeHighchartConfig.endPoint, ':id', viewModel.zzeHighchartId),
                settings = HighchartsFactory.getConfigDefaultBalance(viewModel.zzeHighchartConfig);

            var promise = CrudFactory.getOne(url);

            viewModel.tracker[trackerName].addPromise(promise);

            promise.then(function (resp) {
                settings.greetingText = resp.data.greetingText || '';
                settings.currentBalanceInFloat = resp.data.currentAmount;
                settings.series[0].data = HighchartsFactory.createStructureDataBalance(resp.data.chartData);

                settings.chart.renderTo = 'chart-' + viewModel.zzeHighchartId;

                HighchartsFactory.startGraphic('balance', settings);
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.highcharts')
        .controller('zze.commons.HighchartColumnCtrl', HighchartColumnCtrl);

    HighchartColumnCtrl.$inject = ['$injector'];

    function HighchartColumnCtrl ($injector) {
        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            HighchartsFactory = $injector.get('zze.highcharts.highchartsFactory'),

            publicMethods = {
                setConfigGraphic: setConfigGraphic
            },

            trackerName;

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = [];

            trackerName = 'chart' + viewModel.zzeHighchartId;
            viewModel.tracker[trackerName] = PromiseTracker();
        }

        function setConfigGraphic () {
            var settings = HighchartsFactory.getConfigDefaultColumn(viewModel.zzeHighchartConfig);

            settings.xAxis.categories = HighchartsFactory.createStructureLabelColumn(viewModel.zzeHighchartConfig.data);
            settings.series[0].name = viewModel.zzeHighchartConfig.name;
            settings.series[0].data = HighchartsFactory.createStructureDataColumn(viewModel.zzeHighchartConfig.data);

            settings.chart.renderTo = 'chart-' + viewModel.zzeHighchartId;

            HighchartsFactory.startGraphic('column', settings);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.highcharts')
        .controller('zze.commons.HighchartPieCtrl', HighchartPieCtrl);

    HighchartPieCtrl.$inject = ['$injector'];

    function HighchartPieCtrl ($injector) {
        var viewModel = this,

            HighchartsFactory = $injector.get('zze.highcharts.highchartsFactory'),

            publicMethods = {
                createStructureData: createStructureData,
                setConfigGraphic: setConfigGraphic
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

        }

        function createStructureData (data) {
            return HighchartsFactory.createStructureDataPie(data);
        }

        function setConfigGraphic (settings) {
            viewModel.settings = settings;
        }
    }
})();
(function () {

    'use strict';

    angular.module('zze.commons')
        .controller('zze.commons.PeriodsCtrl', PeriodsCtrl);

    PeriodsCtrl.$inject = ['$injector', '$scope'];

    function PeriodsCtrl ($injector, $scope) {
        var viewModel = this,

            $filter = $injector.get('$filter'),
            PeriodsFactory = $injector.get('zze.commons.navPeriodsFactory'),
            StorageFactory = $injector.get('zze.utils.storageFactory'),

            settings = {},

            popoverConfig = {
                template: $filter('assetPath')('templates/commons/periods/templates/commons-periods-dropdown.template.html')
            },

            publicMethods = {
                toggleCustomDates: toggleCustomDates,
                showPeriodSelected: showPeriodSelected,
                trackerActive: trackerActive,
                blockFutureMonths: blockFutureMonths,

                getSetting: getSettingsToExternal,
                getPopoverConfig: getPopoverConfig,

                setConfig: setConfig,
                setToday: setToday,
                setWeek: setWeek,
                setMonth: setMonth,
                setCustom: setCustom,
                setYear: setYear,
                setNavPeriods: setNavPeriods
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.data = {
                startDate: '',
                endDate: ''
            };

            viewModel.showCustomDate = false;
        }

        function toggleCustomDates (status) {
            if (trackerActive()) {
                return;
            }

            viewModel.showCustomDate = status;
        }

        function blockFutureMonths () {
            var todayDate = new Date();
            return moment(settings.endDate, 'YYYY/MM/DD').month() === todayDate.getMonth() && getSettingsToExternal('blockFutureMonths');
        }

        function showPeriodSelected () {
            return PeriodsFactory.showPeriodSelected(settings);
        }

        function getSettingsToExternal (attr) {
            return settings[attr];
        }

        function getPopoverConfig () {
            return popoverConfig;
        }

        /**
         * @name setConfig
         * @description Receive at settings gives navigation periods to controller navigations.
         *
         * @param {object} opts Object with gives settings navigation controller.
         */
        function setConfig (opts) {
            StorageFactory.setSession(opts.ctrl + 'StartDate', opts.startDate);
            StorageFactory.setSession(opts.ctrl + 'EndDate', opts.endDate);

            settings = opts;
            settings.periodsSelected = PeriodsFactory.checkPeriodSelected(settings.startDate, settings.endDate);

            _updateFormDateCustom();
        }

        function setToday () {
            if (trackerActive()) {
                return;
            }

            _updateCollections(settings.dateTodayServer, settings.dateTodayServer, 'day');
        }

        function setWeek () {
            if (trackerActive()) {
                return;
            }

            var firstWeek = moment(settings.dateTodayServer).startOf('week').format('YYYY-MM-DD'),
                lastWeek = moment(settings.dateTodayServer).endOf('week').format('YYYY-MM-DD');

            _updateCollections(firstWeek, lastWeek, 'week');
        }

        function setMonth () {
            if (trackerActive()) {
                return;
            }

            var firstMonth = moment(settings.dateTodayServer).startOf('month').format('YYYY-MM-DD'),
                lastMonth = moment(settings.dateTodayServer).endOf('month').format('YYYY-MM-DD');

            _updateCollections(firstMonth, lastMonth, 'month');
        }

        function setCustom () {
            if (!_isFormValid() || trackerActive()) {
                return;
            }

            $scope.$popoverInstance.hide(true);

            _updateCollections(viewModel.data.startDate, viewModel.data.endDate, PeriodsFactory.checkPeriodSelected(viewModel.data.startDate, viewModel.data.endDate));
        }

        function setYear () {
            if (trackerActive()) {
                return;
            }

            var firstDayOfYear = moment(settings.dateTodayServer).startOf('year').format('YYYY-MM-DD'),
                lastDayOfYear = moment(settings.dateTodayServer).endOf('year').format('YYYY-MM-DD');

            _updateCollections(firstDayOfYear, lastDayOfYear, 'year');
        }

        /**
         * @name setNavPeriods
         * @description
         *
         * @param {string} dir Direction to navegation periods.
         */
        function setNavPeriods (dir) {
            if (trackerActive()) {
                return;
            }

            var period = settings.periodsSelected,
                isPrev = dir === 'prev';

            switch(period) {
                case 'month':
                    _navPeriodsMonth(isPrev, 'month');
                    break;
                case 'monthInterval':
                    _navPeriodsMonthInterval(isPrev, 'monthInterval');
                    break;
                case 'week':
                    _navPeriodsWeek(isPrev, 'week');
                    break;
                case 'day':
                    _navPeriodsDay(isPrev, 'day');
                    break;
                case 'year':
                    _navPeriodsYear(isPrev, 'year');
                    break;
                default:
                    _navPeriodsCustom(isPrev, 'custom');
            }
        }

        function trackerActive () {
            return $scope.$parent[settings.ctrl].tracker[settings.tracker].active();
        }

        function _navPeriodsDay (isPrev, periodsSelected) {
            var dayPrev = moment(settings.startDate).add((isPrev ? -1 : +1), 'day').format('YYYY-MM-DD');

            _updateCollections(dayPrev, dayPrev, periodsSelected);
        }

        function _navPeriodsWeek (isPrev, periodsSelected) {
            var weekPrev = moment(settings.startDate).add((isPrev ? -1 : +1), 'week'),
                firstDayWeek = weekPrev.startOf('week').format('YYYY-MM-DD'),
                lastDayWeek = weekPrev.endOf('week').format('YYYY-MM-DD');

            _updateCollections(firstDayWeek, lastDayWeek, periodsSelected);
        }

        function _navPeriodsMonth (isPrev, periodsSelected) {
            var monthPrev = moment(settings.startDate).add((isPrev ? -1 : +1), 'month'),
                firstDayMonth = monthPrev.startOf('month').format('YYYY-MM-DD'),
                lastDayMonth = monthPrev.endOf('month').format('YYYY-MM-DD');

            _updateCollections(firstDayMonth, lastDayMonth, periodsSelected);
        }

        // TODO: Criado em 29/11/2017, deixar um tempo rodando as novas alterações do Custom, se não mudar mais, este método pode ser removido.
        function _navPeriodsMonthInterval (isPrev, periodsSelected) {

            var startDate = moment(settings.startDate),
                endDate = moment(settings.endDate),

                diff = endDate.diff(startDate, 'month') === 0 ? 1 : endDate.diff(startDate, 'month'),

                newStartDate = null,
                newEndDate = null;

            if (isPrev) {
                newStartDate = moment(settings.startDate).add(-diff, 'month').format('YYYY-MM-DD');
                newEndDate = moment(settings.startDate).format('YYYY-MM-DD');
            } else {
                newStartDate = moment(settings.endDate).format('YYYY-MM-DD');
                newEndDate = moment(settings.endDate).add(+diff, 'month').format('YYYY-MM-DD');
            }

            _updateCollections(newStartDate, newEndDate, periodsSelected);
        }

        function _navPeriodsYear (isPrev, periodsSelected) {
            var yearPrev = moment(settings.startDate).add((isPrev ? -1 : +1), 'year'),
                firstDayYear = yearPrev.startOf('year').format('YYYY-MM-DD'),
                lastDayYear = yearPrev.endOf('year').format('YYYY-MM-DD');

            _updateCollections(firstDayYear, lastDayYear, periodsSelected);
        }

        function _navPeriodsCustom (isPrev, periodsSelected) {

            var startDate = moment(settings.startDate),
                endDate = moment(settings.endDate),

                diff = endDate.diff(startDate, 'month') === 0 ? 1 : endDate.diff(startDate, 'month'),

                newStartDate = null,
                newEndDate = null;

            if (isPrev) {
                newStartDate = moment(settings.startDate).add(-diff, 'month').format('YYYY-MM-DD');
                newEndDate = moment(settings.endDate).add(-diff, 'month').format('YYYY-MM-DD');
            } else {
                newStartDate = moment(settings.startDate).add(+diff, 'month').format('YYYY-MM-DD');
                newEndDate = moment(settings.endDate).add(+diff, 'month').format('YYYY-MM-DD');
            }

            _updateCollections(newStartDate, newEndDate, periodsSelected);
        }

        /**
         * @name _updateCollections
         * @description Update at dates in sessionStorage and execute methods to update collections and forms.
         *
         * @param {string} startDate Date to start in filters of the collection.
         * @param {string} endDate Date to end in filters of the collection.
         *
         * @private
         */
        function _updateCollections (startDate, endDate, periodsSelected) {
            settings.startDate = startDate;
            settings.endDate = endDate;
            settings.periodsSelected = periodsSelected;

            _executeUpdateCollections();
            _updateFormDateCustom();
        }

        /**
         * @name _updateFormDateCustom
         * @description Update form with dates custom.
         *
         * @private
         */
        function _updateFormDateCustom () {
            viewModel.data.startDate = settings.startDate;
            viewModel.data.endDate = settings.endDate;
        }

        /**
         * @name _executeUpdateCollections
         * @description Execute method past in configs to update to collection.
         *
         * @private
         */
        function _executeUpdateCollections () {

            StorageFactory.setSession(settings.ctrl + 'StartDate', settings.startDate);
            StorageFactory.setSession(settings.ctrl + 'EndDate', settings.endDate);

            var selectedPeriod = PeriodsFactory.checkPeriodSelected(settings.startDate, settings.endDate);
            $scope.$parent[settings.ctrl][settings.methodUpdateCollections](settings.startDate, settings.endDate, selectedPeriod);
        }

        function _isFormValid () {
            return viewModel.form && viewModel.form.$valid;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.budgets')
        .controller('zze.budgets.BudgetsDetailsCtrl', BudgetsDetailsCtrl);

    BudgetsDetailsCtrl.$inject = ['$injector', '$scope'];

    function BudgetsDetailsCtrl($injector, $scope) {

        var viewModel = this,

            $filter = $injector.get('$filter'),

            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            BudgetsFactory = $injector.get('zze.budgets.budgetsFactory'),
            PermissionFactory = $injector.get('zze.permissions.permissionsFactory'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),

            publicMethods = {
                getPopoverConfig: getPopoverConfig,
                getFormatedDate: getFormatedDate,
                getCurrencyMasked: getCurrencyMasked,
                checkIconCategory: checkIconCategory,
                checkIconStyle: checkIconStyle,
                updateBudget: updateBudget
            },

            _popoverConfig = {
                update: {
                    reCalcTop: -4,
                    toggle: 'click',
                    width: PermissionFactory.checkAccessAction('budget', ['create', 'edit']) ? 190 : 290,
                    template: $filter('assetPath')('templates/modules/budgets/templates/budgets-details-update-value.template.html')
                }
            },

            _item = $scope.ngDialogData.item;

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = PromiseTrackerService.create([
                'loadPage'
            ]);

            viewModel.data = {
                item: _item,
                transactions: [],
                amount: _item.budget.value,

                dayly: BudgetsFactory.getBalancePredictedDayly(_item, $scope.ngDialogData.today, $scope.ngDialogData.currency),
                weekly: BudgetsFactory.getBalancePredictedWeekly(_item, $scope.ngDialogData.today, $scope.ngDialogData.currency),
                monthly: BudgetsFactory.getBalancePredictedMonthly(_item, $scope.ngDialogData.currency)
            };

            viewModel.permissionToManage = $scope.main.contextSource.currentUser.permissions.goal === 'manage';

            _getBudgetTransactions();
        }

        function checkIconCategory() {
            return $scope.$parent.budgets.checkIconCategory(_item.parent ? _item.parent : _item);
        }

        function checkIconStyle() {
            return $scope.$parent.budgets.checkIconStyle(_item.parent ? _item.parent : _item, true);
        }

        function getPopoverConfig(key) {
            return _popoverConfig[key];
        }

        function getCurrencyMasked(value, symbol) {
            return BudgetsFactory.getCurrencyMasked(value, $scope.ngDialogData.currency, symbol);
        }

        function getFormatedDate(date) {
            var mask = $scope.main.contextSource.locale === 'en' ? 'MM/DD/YYYY' : 'DD/MM/YYYY';
            return BudgetsFactory.getFormatedDate(date, mask);
        }

        function updateBudget() {
            _item.budget.value = viewModel.data.amount;
            viewModel.data.item.budget.value = viewModel.data.amount;

            viewModel.data.dayly = BudgetsFactory.getBalancePredictedDayly(_item, $scope.ngDialogData.today, $scope.ngDialogData.currency);
            viewModel.data.weekly = BudgetsFactory.getBalancePredictedWeekly(_item, $scope.ngDialogData.today, $scope.ngDialogData.currency);
            viewModel.data.monthly = BudgetsFactory.getBalancePredictedMonthly(_item, $scope.ngDialogData.currency);

            $scope.$parent.budgets.newBudget(viewModel.data.item);
        }

        function _getBudgetTransactions() {

            var url = ContextFactory.getEndPoint('transactions'),
                promise = CrudFactory.getOne(url, {
                    /* jshint camelcase:false */
                    params: {
                        date: $scope.ngDialogData.date,
                        activity_type: _item.type === 'expenses' ? 0 : 1,
                        category_id: _item.id
                    }
                });

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data.transactions = resp.data;
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.budgets')
        .controller('zze.budgets.BudgetsItemCtrl', BudgetsItemCtrl);

    function BudgetsItemCtrl () {
        var viewModel = this,

            publicMethods = {
                setBudgets: setBudgets
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

        }

        function setBudgets (data, dataFather) {
            viewModel.data = data;

            if (dataFather) {
                viewModel.data.type = dataFather.type;
                viewModel.data.parent = dataFather;
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.budgets')
        .controller('zze.budgets.BudgetsCtrl', BudgetsCtrl);

    BudgetsCtrl.$inject = ['$injector', '$scope'];

    function BudgetsCtrl($injector, $scope) {
        $scope.main.setContentClass('zze-layout_content-extend-budgets');

        var viewModel = this,

            $timeout = $injector.get('$timeout'),
            $filter = $injector.get('$filter'),

            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            Dialog = $injector.get('ngDialog'),

            BudgetsFactory = $injector.get('zze.budgets.budgetsFactory'),
            PeriodsFactory = $injector.get('zze.commons.navPeriodsFactory'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            PermissionFactory = $injector.get('zze.permissions.permissionsFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
                showTransactionsBudget: showTransactionsBudget,
                newBudget: newBudget,
                setNewBudget: setNewBudget,
                setAnyBudget: setAnyBudget,
                resetBudget: resetBudget,
                cloneBudget: cloneBudget,

                getStartDate: getStartDate,
                getTodayDate: getTodayDate,
                getMarkDay: getMarkDay,
                getBudgets: getBudgets,
                getBudgetsExternal: getBudgetsExternal,
                getPredictedCurrency: getPredictedCurrency,

                getProgressDaySize: getProgressDaySize,
                getProgressFutureSize: getProgressFutureSize,
                getProgressClass: getProgressClass,

                getCurrencyMasked: getCurrencyMasked,
                getPopoverConfig: getPopoverConfig,
                getPeriodsConfig: getPeriodsConfig,

                checkIconCategory: checkIconCategory,
                checkIconStyle: checkIconStyle,
                checkMarkDay: _checkMarkDay,
                isMonthCurrent: isMonthCurrent,
                isMonthBefore: isMonthBefore,
                isMonthAfter: isMonthAfter,
                showOptionCopy: showOptionCopy,
                hasBudgetActived: hasBudgetActived,
                validForNewBudgets: validForNewBudgets,
                monthUsedBudgets: monthUsedBudgets,

                toggleVisibilityPredicted: toggleVisibilityPredicted
            },

            markDayPosition = {
                left: '7%'
            },

            popoverConfig = {
                update: {
                    reCalcTop: -4,
                    reCalcLeft: 1,
                    toggle: 'click',
                    width: PermissionFactory.checkAccessAction('budget', ['create', 'edit']) ? 190 : 290,
                    createToBody: true,
                    template: $filter('assetPath')('templates/modules/budgets/templates/budgets-update-value.template.html')
                },
                create: {
                    reCalcTop: -4,
                    reCalcLeft: 1,
                    toggle: 'click',
                    width: PermissionFactory.checkAccessAction('budget', ['create', 'edit']) ? 190 : 290,
                    createToBody: true,
                    template: $filter('assetPath')('templates/modules/budgets/templates/budgets-update-value.template.html')
                }
            },

            periodsConfig = {
                ctrl: 'budgets',
                tracker: 'loadBudgetsUpdate',
                methodUpdateCollections: 'getBudgetsExternal',
                dateTodayServer: $scope.main.contextSource.today,

                startDate: sessionStorage.getItem('budgetStartDate') || BudgetsFactory.getFirstDayMounthCurrent($scope.main.contextSource.today),
                endDate: sessionStorage.getItem('budgetEndDate') || BudgetsFactory.getLastDayMounthCurrent($scope.main.contextSource.today),

                showSetToday: false,
                showSetWeek: false,
                showSetCustom: false,
                blockFutureMonths: false
            },

            datesControl = {
                start: sessionStorage.getItem('budgetStartDate') || BudgetsFactory.getFirstDayMounthCurrent($scope.main.contextSource.today),
                end: sessionStorage.getItem('budgetEndDate') || BudgetsFactory.getLastDayMounthCurrent($scope.main.contextSource.today),
                current: BudgetsFactory.getFirstDayMounthCurrent($scope.main.contextSource.today)
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.status = {
                anyBudget: false,
                categoriesMigrated: true,
                onlyExpenses: $scope.$resolve.onlyExpenses
            };

            viewModel.data = {
                expenses: BudgetsFactory.getBudgetFake(),
                expensesGeneral: BudgetsFactory.getBudgetFake(),
                earning: BudgetsFactory.getBudgetFake(),
                earningGeneral: BudgetsFactory.getBudgetFake(),
                popovers: {
                    predicted: getCurrencyMasked(0, true)
                }
            };

            viewModel.newBudgetSelected = {};

            viewModel.tracker = PromiseTrackerService.create([
                'loadBudgetsStart',
                'loadBudgetsUpdate',
                'loadBudgetsCopy',
                'loadBudgetsUpdateItem'
            ]);

            viewModel.showPredicted = localStorage.getItem('showPredicted') === null ? false : true;

            getBudgets(periodsConfig.startDate, periodsConfig.endDate, 'loadBudgetsStart');

            document.title = "Organizze | Limite de gastos";
        }

        function showTransactionsBudget(item) {

            if (item.budget.value === 0) {
                return;
            }

            Dialog.open({
                template: $filter('assetPath')('templates/modules/budgets/templates/budgets-details.dialog.html'),
                controller: 'zze.budgets.BudgetsDetailsCtrl',
                controllerAs: 'details',
                className: 'theme-organizze zze-extend_theme-organizze-in-budgets-details',
                width: 470,
                scope: $scope,
                data: {
                    item: item,
                    date: datesControl.start,
                    currency: $scope.main.contextSource.currency,
                    today: $scope.main.contextSource.today,
                    options: {
                        ctrl: 'details',
                        edit: ''
                    }
                }
            });
        }

        function updateValues(data, itemId) {
            var endpoint = viewModel.newBudgetSelected.budget.id ? 'update' : 'create',
                method = viewModel.newBudgetSelected.budget.id ? 'put' : 'post',
                url = ContextFactory.getEndPointProccess({
                    method: endpoint,
                    replace: ':id',
                    value: itemId
                });

            return CrudFactory[method](url, data);
        }

        function newBudget(itemEditDialog) {
            if (itemEditDialog) {
                viewModel.newBudgetSelected = itemEditDialog;
                viewModel.data.amount = itemEditDialog.budget.value;
            }

            /* jshint camelcase:false */
            var valueItemId = viewModel.newBudgetSelected.budget.id ? viewModel.newBudgetSelected.budget.id : viewModel.newBudgetSelected.id,
                data = {
                    amount_in_cents: viewModel.data.amount || 0,
                    date: datesControl.start,
                    id: viewModel.newBudgetSelected.budget.id,
                    category_id: viewModel.newBudgetSelected.id,
                    activity_type: viewModel.newBudgetSelected.budget.activityType
                };

            var promise,
                sumValues = _sumChildrenValueFromBudget(viewModel.newBudgetSelected);

            if (!_isFixedCategories() && _isRoot(viewModel.newBudgetSelected)) {
                if (Number(viewModel.data.amount) < sumValues) {
                    MessageFactory.setFlash($filter('translate')('budgets.errors.subcategorie_sum'), 'error');
                    return;
                }
            }

            promise = updateValues(data, valueItemId);

            viewModel.tracker.loadBudgetsUpdateItem.addPromise(promise);

            promise.then(function (response) {
                var listkey = viewModel.newBudgetSelected.listKey;
                viewModel.status.anyBudget = true;
                _updateBudgetView(listkey, response.data);

                // If child, update father.
                if (response.data.parentId && response.data.budget.rootValue) {
                    _updateBudgetView(listkey, {
                        id: response.data.parentId,
                        budget: {
                            id: response.data.budget.rootId,
                            value: response.data.budget.rootValue || 0,
                            currentValue: response.data.budget.rootCurrentValue || 0,
                            predictedValue: response.data.budget.rootPredictedValue || 0
                        }
                    });
                }

                resetBudget();
            });
        }

        function setNewBudget(item, $event) {
            $event.stopPropagation();

            viewModel.newBudgetSelected = item;
            viewModel.data.amount = item.budget.valueView;
        }

        function validForNewBudgets() {
            //Otimizar função futuramente
            return (_isFixedCategories() && _isNewBudget() && isMonthCurrent()) || !_isFixedCategories() || _isFixedCategories() && !_isNewBudget();
        }

        function setAnyBudget(value) {
            if (!PermissionFactory.checkAccessAction('budget', ['create'])) {
                $scope.main.showAccessDanied();
                return;
            }

            viewModel.status.anyBudget = value;
        }

        function resetBudget() {
            viewModel.newBudgetSelected = {};
            viewModel.data.amount = 0;
        }


        function cloneBudget() {
            if (!PermissionFactory.checkAccessAction('budget', ['create'])) {
                $scope.main.showAccessDanied();
                return;
            }

            var url = ContextFactory.getEndPoint('clone'),

                promise = CrudFactory.post(url, {
                    date: datesControl.start
                });

            viewModel.tracker.loadBudgetsCopy.addPromise(promise);

            promise.then(function (response) {
                _separateBudgetList(response.data);
            });
        }

        function getStartDate() {
            return PeriodsFactory.showPeriodSelected({
                startDate: datesControl.start,
                endDate: datesControl.end
            });
        }

        function getTodayDate() {
            var mask = $scope.main.contextSource.locale === 'en' ? 'MM/DD/YYYY' : 'DD/MM/YYYY';
            return moment($scope.main.contextSource.today).format(mask);
        }

        function getPeriodsConfig() {
            return periodsConfig;
        }

        function getPopoverConfig(key) {
            if (key === "update" || key === "create") {
                return popoverConfig[key];
            }

            return popoverConfig[key];
        }

        function getCurrencyMasked(currency, symbol) {
            return BudgetsFactory.getCurrencyMasked(currency, $scope.main.contextSource.currency, symbol);
        }

        function getPredictedCurrency(item) {
            viewModel.data.popovers.predicted = getCurrencyMasked(item.budget.predictedValue, true);
        }

        function getMarkDay() {
            return markDayPosition;
        }

        function getProgressClass(type, item) {
            return BudgetsFactory.getProgressClass(type, item);
        }

        function getProgressDaySize(item) {
            return BudgetsFactory.getProgressDaySize(item);
        }

        function getProgressFutureSize(item) {
            if (!viewModel.showPredicted) {
                return {
                    width: 0
                };
            }

            return BudgetsFactory.getProgressFutureSize(item);
        }

        function getBudgets(startDate, endDate, loadBudgets) {
            datesControl.start = startDate;
            datesControl.end = endDate;

            sessionStorage.setItem('budgetStartDate', startDate);
            sessionStorage.setItem('budgetEndDate', endDate);

            markDayPosition.left = '7%';

            _resetBudgetsList('earning');
            _resetBudgetsList('earningGeneral');
            _resetBudgetsList('expenses');
            _resetBudgetsList('expensesGeneral');

            var url = ContextFactory.getEndPoint('index'),
                promise = CrudFactory.getOne(url, {
                    params: {
                        date: datesControl.start
                    }
                });

            viewModel.tracker[loadBudgets].addPromise(promise);

            promise.then(function (response) {
                _separateBudgetList(response.data);
            });
        }

        function getBudgetsExternal(startDate, endDate) {
            getBudgets(startDate, endDate, 'loadBudgetsUpdate');
        }

        function checkIconCategory(item) {
            /* jshint camelcase:false */
            item.icon = item.fixed || item.is_fixed_parent ? 'icon-category-' + (item.group_id + '').replace(/_/g, '-') : 'icon-' + (item.group_id + '').replace(/exp_|ear_/g, '').replace(/_/g, '-');
            return !viewModel.status.categoriesMigrated ? 'icon-category zze-icon-legacy' : 'zze-icon-categories ' + item.icon;
        }

        function checkIconStyle(item, useBackground) {
            return viewModel.status.categoriesMigrated ? {
                'background': '#' + item.color
            } : {
                'background': useBackground ? '#' + item.color : 'transparent',
                'color': '#' + item.color
            };
        }

        function isMonthCurrent() {
            return datesControl.start === datesControl.current;
        }

        function isMonthBefore() {
            return moment(datesControl.current).isBefore(datesControl.start);
        }

        function isMonthAfter() {
            return moment(datesControl.current).isAfter(datesControl.start);
        }

        function showOptionCopy() {
            return !viewModel.status.anyBudget;
        }

        function hasBudgetActived() {
            return false;
        }

        function monthUsedBudgets() {
            var totalUsedEarningBudgets = _totalUsedBudget(viewModel.data.earning);
            var totalUsedExpensesBudgets = _totalUsedBudget(viewModel.data.expenses);

            return totalUsedEarningBudgets + totalUsedExpensesBudgets;
        }

        function toggleVisibilityPredicted() {
            if (viewModel.showPredicted) {
                localStorage.removeItem('showPredicted');
                viewModel.showPredicted = false;
            } else {
                localStorage.setItem('showPredicted', 'show');
                viewModel.showPredicted = true;
            }
        }

        function _totalUsedBudget(budgetList) {
            var totalBudget = 0;

            for (var i = 0, len = budgetList.length; i < len; i++) {
                if (budgetList[i].budget.value > 0) {
                    totalBudget++;
                }
                if (_isFixedCategories()) {
                    if (budgetList[i].children.length > 0) {
                        for (var k = 0, lenChild = budgetList[i].children.length; k < lenChild; k++) {
                            if (budgetList[i].children[k].budget.value > 0) {
                                totalBudget++;
                            }
                        }
                    }
                }
            }

            return totalBudget;
        }

        function _sumOnlyParentBudgetsAtrr(listKey, attr) {
            var budgetList = viewModel.data[listKey],
                totalBudgetvalue = 0;

            for (var i = 0, lenj = budgetList.length; i < lenj; i++) {
                totalBudgetvalue += Number(budgetList[i].budget[attr]);
            }

            return totalBudgetvalue;
        }

        function _sumAllBudgetsAtrr(listKey, attr) {
            var budgetList = viewModel.data[listKey],
                totalBudgetPredicted = 0;

            for (var i = 0, lenj = budgetList.length; i < lenj; i++) {
                var budgetChildrenList = budgetList[i].children;

                if (Number(budgetList[i].budget[attr]) === 0) {
                    if (budgetChildrenList.length > 0) {
                        for (var j = 0, lenk = budgetChildrenList.length; j < lenk; j++) {
                            totalBudgetPredicted += Number(budgetChildrenList[j].budget[attr]);
                        }
                    }
                }
                else {
                    totalBudgetPredicted += Number(budgetList[i].budget[attr]);
                }
            }

            return totalBudgetPredicted;
        }

        function _totalizerEarningExpenses(generalList, listKey) {
            if (_isFixedCategories() && _isNewBudget()) {
                generalList[0].budget.value = _sumAllBudgetsAtrr(listKey, 'value');
                generalList[0].budget.currentValue = _sumAllBudgetsAtrr(listKey, 'currentValue');
                generalList[0].budget.predictedValue = _sumAllBudgetsAtrr(listKey, 'predictedValue');

                return generalList;
            }

            generalList[0].budget.value = _sumOnlyParentBudgetsAtrr(listKey, 'value');
            generalList[0].budget.currentValue = _sumOnlyParentBudgetsAtrr(listKey, 'currentValue');

            return generalList;
        }

        function _sumChildrenValueFromBudget(budgetItem) {
            var sumValues = 0;

            if (budgetItem.children && budgetItem.children.length > 0) {
                for (var l = 0, lenl = budgetItem.children.length; l < lenl; l++) {
                    sumValues += Number(budgetItem.children[l].budget.value);
                }
            }

            return sumValues;
        }

        function _getOnlyAvailableBudgets(data) {
            return _.filter(data, function (budgets) {
                return budgets.available;
            });
        }

        function _separateBudgetList(data) {
            viewModel.data.earning = _getOnlyAvailableBudgets(data.earnings);
            viewModel.data.expenses = _getOnlyAvailableBudgets(data.expenses);

            viewModel.data.earningGeneral = _totalizerEarningExpenses([data.general.earnings], 'earning');
            viewModel.data.expensesGeneral = _totalizerEarningExpenses([data.general.expenses], 'expenses');
            viewModel.status.anyBudget = data.anyBudget;
            viewModel.status.anyLastMonthBudget = data.anyLastMonthBudget;
            viewModel.status.categoriesMigrated = data.categoriesMigrated;

            _createBudgetsList('earning', 'earning');
            _createBudgetsList('earningGeneral', 'earning');
            _createBudgetsList('expenses', 'expenses');
            _createBudgetsList('expensesGeneral', 'expenses');
        }

        function _getSortBudget(budgetList) {
            budgetList.sort(function (a, b) {
                var AInt = parseInt(a.name, 10);
                var BInt = parseInt(b.name, 10);

                if (!$.isNumeric(a.name) && !$.isNumeric(b.name)) {
                    var aA = a.name;
                    var bA = b.name;
                    return aA > bA ? 1 : -1;
                } else if (!$.isNumeric(a.name)) {
                    return 1;
                } else if (!$.isNumeric(b.name)) {
                    return -1;
                } else {
                    return AInt < BInt ? 1 : -1;
                }
            });
        }

        function _createBudgetsList(listKey, type) {
            for (var i = 0, len = viewModel.data[listKey].length; i < len; i++) {
                var item = viewModel.data[listKey][i];

                if (item.children.length > 1) {
                    _getSortBudget(item.children);
                }

                item.budget.currentValueView = 0;
                item.budget.predictedValueView = 0;
                item.budget.valueView = 0;
                item.listKey = listKey;
                item.type = type;

                if (item.children.length) {
                    for (var j = 0, lenj = item.children.length; j < lenj; j++) {
                        var child = item.children[j];

                        child.budget.currentValueView = 0;
                        child.budget.predictedValueView = 0;
                        child.budget.valueView = 0;

                        child.listKey = listKey;
                    }
                }
            }

            // Timer to animate bars progress.
            $timeout(function () {
                _checkMarkDay();

                for (var i = 0, len = viewModel.data[listKey].length; i < len; i++) {
                    var item = viewModel.data[listKey][i];

                    item.budget.currentValueView = item.budget.currentValue;
                    item.budget.predictedValueView = item.budget.predictedValue;
                    item.budget.valueView = item.budget.value;

                    if (item.children.length) {
                        for (var j = 0, lenj = item.children.length; j < lenj; j++) {
                            var child = item.children[j];

                            child.budget.currentValueView = child.budget.currentValue;
                            child.budget.predictedValueView = child.budget.predictedValue;
                            child.budget.valueView = child.budget.value;
                        }
                    }
                }
            }, 500);
        }

        function _resetBudgetsList(listKey) {
            for (var i = 0, len = viewModel.data[listKey].length; i < len; i++) {
                var item = viewModel.data[listKey][i];

                item.budget.value = 0;
                item.budget.valueView = 0;
                item.budget.currentValue = 0;
                item.budget.currentValueView = 0;
                item.budget.predictedValue = 0;
                item.budget.predictedValueView = 0;

                if (item.children.length) {
                    for (var j = 0, lenj = item.children.length; j < lenj; j++) {
                        var child = item.children[j];

                        child.budget.value = 0;
                        child.budget.valueView = 0;
                        child.budget.currentValue = 0;
                        child.budget.predictedValue = 0;
                        child.budget.currentValueView = 0;
                        child.budget.predictedValueView = 0;
                    }
                }
            }
        }

        function _updateBudgetView(listKey, item) {
            for (var i = 0, len = viewModel.data[listKey].length; i < len; i++) {
                var _item = viewModel.data[listKey][i],
                    sumValues = 0;

                if (item.id === _item.id) {
                    if (!$scope.main.fixedCategories) {
                        sumValues = _sumChildrenValueFromBudget(_item);

                        if (_isRoot(viewModel.newBudgetSelected)) {

                            if (Number(_item.budget.value) < sumValues) {
                                MessageFactory.setFlash($filter('translate')('budgets.errors.subcategorie_sum'), 'error');
                                break;
                            }

                            _item.budget.value = item.budget.value;
                            _item.budget.valueView = _item.budget.value;

                        } else {
                            if (_item.budget.value < sumValues) {
                                _item.budget.value = sumValues;
                                _item.budget.valueView = sumValues;
                            }
                        }

                        /* jshint camelcase:false */
                        var data = {
                            amount_in_cents: _item.budget.valueView || 0,
                            date: datesControl.start,
                            id: _item.budget.id,
                            category_id: _item.id,
                            activity_type: viewModel.newBudgetSelected.budget.activityType
                        };

                        viewModel.tracker.loadBudgetsUpdateItem.addPromise(updateValues(data, _item.budget.id));
                    } else {
                        _item.budget.value = item.budget.value;
                        _item.budget.valueView = item.budget.value;
                    }

                    _item.budget.id = item.budget.id;

                    if (_isFixedCategories() && _isNewBudget()) {
                        _item.budget.currentValue = _item.budget.currentValue;
                        _item.budget.currentValueView = _item.budget.currentValue;
                    }
                    else {
                        _item.budget.currentValue = item.budget.currentValue;
                        _item.budget.currentValueView = item.budget.currentValue;
                    }

                    _item.budget.predictedValue = item.budget.predictedValue;
                    _item.budget.predictedValueView = item.budget.predictedValue;

                    break;
                }

                if (!item.icon && _item.children.length) {
                    for (var j = 0, lenj = _item.children.length; j < lenj; j++) {
                        var child = _item.children[j];

                        if (item.id === child.id) {

                            child.budget.id = item.budget.id;
                            child.budget.value = item.budget.value;
                            child.budget.valueView = item.budget.value;
                            child.budget.currentValue = item.budget.currentValue;
                            child.budget.predictedValue = item.budget.predictedValue;
                            child.budget.currentValueView = item.budget.currentValue;
                            child.budget.predictedValueView = item.budget.predictedValue;

                            break;
                        }
                    }
                }
            }

            _updateBudgetGeneral(listKey);
        }

        function _updateBudgetGeneral(listKey) {
            var listKeyGeneral = listKey === 'expenses' ? 'expensesGeneral' : 'earningGeneral';

            viewModel.data[listKeyGeneral][0].budget.value = _isFixedCategories() && _isNewBudget() ?
                _sumAllBudgetsAtrr(listKey, 'value') :
                _sumOnlyParentBudgetsAtrr(listKey, 'value');

            viewModel.data[listKeyGeneral][0].budget.valueView = _isFixedCategories() && _isNewBudget() ?
                _sumAllBudgetsAtrr(listKey, 'valueView') :
                _sumOnlyParentBudgetsAtrr(listKey, 'valueView');

            viewModel.data[listKeyGeneral][0].budget.currentValue = _isFixedCategories() && _isNewBudget() ?
                _sumAllBudgetsAtrr(listKey, 'currentValue') :
                _sumOnlyParentBudgetsAtrr(listKey, 'currentValue');

            viewModel.data[listKeyGeneral][0].budget.currentValueView = _isFixedCategories() && _isNewBudget() ?
                _sumAllBudgetsAtrr(listKey, 'currentValue') :
                _sumOnlyParentBudgetsAtrr(listKey, 'currentValue');

            viewModel.data[listKeyGeneral][0].budget.predictedValue = _isFixedCategories() && _isNewBudget() ?
                _sumAllBudgetsAtrr(listKey, 'predictedValue') :
                _sumOnlyParentBudgetsAtrr(listKey, 'predictedValue');

            viewModel.data[listKeyGeneral][0].budget.predictedValueView = _isFixedCategories() && _isNewBudget() ?
                _sumAllBudgetsAtrr(listKey, 'predictedValue') :
                _sumOnlyParentBudgetsAtrr(listKey, 'predictedValue');
        }

        function _checkMarkDay() {
            if (!isMonthCurrent()) {
                markDayPosition.left = '7%';
                return;
            }

            markDayPosition.left = BudgetsFactory.getMarkDay($scope.main.contextSource.today);
        }

        function _isRoot(budgetItem) {
            return !budgetItem.parentId;
        }

        function _isNewBudget() {
            return $scope.main.contextSource.currentEntity.newBudgets;
        }

        function _isFixedCategories() {
            return $scope.main.fixedCategories;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .controller('zze.categories.MigrationCtrl', MigrationCtrl);

    MigrationCtrl.$inject = ['$injector', '$scope'];

    function MigrationCtrl ($injector, $scope) {
        var viewModel = this,

            _itemCombineSelected,
            _showInstructionUser = false,
            _showInstructionOrganizze = false,

            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
                showInstructionUser: showInstructionUser,
                showInstructionOrganizze: showInstructionOrganizze,

                hideInstructionUser: hideInstructionUser,
                hideInstructionOrganizze: hideInstructionOrganizze,

                getTitlePage: getTitlePage,
                getPercentageCombined: getPercentageCombined,
                getIconFormatedName: getIconFormatedName,

                setItemCombine: setItemCombine,

                combine: combine,
                getUrlRedirect: getUrlRedirect,
                reverseItemSelected: reverseItemSelected,
                getKindFilterCategories: getKindFilterCategories,

                checkClassItemSelected: checkClassItemSelected,
                checkCategoriesMigrated: checkCategoriesMigrated,
                descombinedMigration: descombinedMigration,
                checkClassShowOrganizze: checkClassShowOrganizze
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            $scope.main.setContentClass('zze_context_categories-migration-extend');

            viewModel.quantCategoriesUser = 0;
            viewModel.quantCategoriesUserMigrated = 0;

            viewModel.viewCategoriesOrganizze = false;

            viewModel.categoriesUserClass = 'zze-ng-animate-if-fade-in-top';
            viewModel.categoriesOrganizzeClass = 'zze-ng-animate-if-fade-in-top';

            viewModel.data = {
                categories: {
                    user: [],
                    organizze: []
                }
            };

            viewModel.tracker = PromiseTrackerService.create([
                'loadCategoriesUser',
                'loadCategoriesOrganizze'
            ]);

            _getCategories();
            _delayAnimateHelpUser();
        }

        function showInstructionUser () {
            return !viewModel.viewCategoriesOrganizze && viewModel.quantCategoriesUserMigrated === 0 && _showInstructionUser;
        }

        function showInstructionOrganizze () {
            return viewModel.viewCategoriesOrganizze && viewModel.quantCategoriesUserMigrated === 0 && _showInstructionOrganizze;
        }

        function hideInstructionUser () {
            viewModel.categoriesUserClass = 'zze-ng-animate-if-fade-out-top';

            setTimeout(function () {
                $scope.$apply(function () {
                    _showInstructionUser = false;
                });
            }, 100);
        }

        function hideInstructionOrganizze () {
            viewModel.categoriesOrganizzeClass = 'zze-ng-animate-if-fade-out-top';

            setTimeout(function () {
                $scope.$apply(function () {
                    _showInstructionOrganizze = false;
                });
            }, 100);
        }

        function getPercentageCombined () {
            return (viewModel.quantCategoriesUserMigrated / viewModel.quantCategoriesUser) * 100;
        }

        function getTitlePage () {
            return getPercentageCombined() === 100 ? 'Uau, agora suas categorias estão de acordo com o novo padrão.' : 'Combine com uma categoria equivalente a direita';
        }

        function setItemCombine (item) {
            hideInstructionUser();

            _itemCombineSelected = item;

            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.viewCategoriesOrganizze = true;
                    _delayAnimateHelpOrganizze();
                });
            }, 100);
        }

        function getParentFixedCategory (itemId) {
            var categoryList = viewModel.data.categories.organizze;
            return _.filter(categoryList, function (category) {
                return category.id === itemId;
            });
        }

        function combine (categoryId) {
            if (!_itemCombineSelected) {
                return;
            }

            _saveCategorieCombined(getParentFixedCategory(categoryId)[0], _itemCombineSelected);

            viewModel.categoriesOrganizzeClass = 'zze-ng-animate-if-fade-out-top';

            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.viewCategoriesOrganizze = false;
                    _itemCombineSelected = undefined;
                });
            }, 100);
        }

        function getUrlRedirect (page) {
            return ContextFactory.getLegacyRoute(page);
        }

        function checkClassItemSelected (item) {
            if (!_itemCombineSelected) {
                return;
            }

            return item.id === _itemCombineSelected.id ? 'selected' : 'no-selected';
        }

        function getKindFilterCategories (categoryList, categoryKind){
            var categories = _.filter(categoryList, function (category) {
                return category.kind === categoryKind;
            });

            return categories;
        }

        function getIconFormatedName (item) {
            /* jshint camelcase: false */
            return item.group_id.replace(/_/g, '-');
        }

        function checkClassShowOrganizze(item) {
            if (!_itemCombineSelected) {
                return;
            }

            return item.id === _itemCombineSelected.id ? 'selected' : 'no-selected';
        }

        function checkCategoriesMigrated () {
            var count = {
                migrated: 0,
                emigrate: 0
            };

            for (var i = 0, lenUser = viewModel.data.categories.user.length; i < lenUser; i++) {
                count.emigrate++;

                if (viewModel.data.categories.user[i].children) {
                    for (var j = 0, lenUser2 = viewModel.data.categories.user[i].children.length; j < lenUser2; j++) {
                        count.emigrate++;
                    }
                }
            }

            for (var k = 0, lenZZE = viewModel.data.categories.organizze.length; k < lenZZE; k++) {
                if (viewModel.data.categories.organizze[k].children) {
                    for (var l = 0, lenZZE2 = viewModel.data.categories.organizze[k].children.length; l < lenZZE2; l++) {
                        count.migrated++;
                    }
                }
            }

            viewModel.quantCategoriesUser = (count.migrated + count.emigrate);
            viewModel.quantCategoriesUserMigrated = count.migrated;

            if (count.migrated > 0) {
                _showInstructionUser = false;
                _showInstructionOrganizze = false;
            }

            if (getPercentageCombined() === 100) {
                _finishMigration();
            }
        }

        function reverseItemSelected () {
            viewModel.categoriesOrganizzeClass = 'zze-ng-animate-if-fade-out-top';

            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.viewCategoriesOrganizze = false;
                    _itemCombineSelected = undefined;
                });
            }, 100);

            checkClassItemSelected(0);
        }

        function _delayAnimateHelpUser () {
            setTimeout(function () {
                $scope.$apply(function () {
                    _showInstructionUser = true;
                });
            }, 1500);

            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.categoriesUserClass = 'zze-bounce-way';
                });
            }, 3000);
        }

        function _delayAnimateHelpOrganizze () {
            setTimeout(function () {
                $scope.$apply(function () {
                    _showInstructionOrganizze = true;
                });
            }, 1500);

            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.categoriesOrganizzeClass = 'zze-bounce-way';
                });
            }, 3000);
        }

        function _getCategories () {
            var url = ContextFactory.getEndPoint('index'),
                promise = CrudFactory.getAll(url);

            viewModel.tracker.loadCategoriesUser.addPromise(promise);

            promise.then(function (resp) {

                if (resp.data.finished) {
                    viewModel.quantCategoriesUser = 100;
                    viewModel.quantCategoriesUserMigrated = 100;

                    getPercentageCombined();

                    return;
                }

                viewModel.data.categories.user = resp.data.legacy;
                viewModel.data.categories.organizze = resp.data.new;

                checkCategoriesMigrated();
            });
        }

        function getParentCategoryByUuid (categoryList, itemUuid) {
            var category = [];

            for (var i = 0, len = categoryList.length; i < len; i++) {
                if (categoryList[i].children.length > 0) {
                    for (var j = 0, len1 = categoryList[i].children.length; j < len1; j++) {
                        if (categoryList[i].children[j].uuid === itemUuid) {
                            category = categoryList[i].children[j];
                        }
                    }
                }
            }

            return category;
        }

        function getParentCategory (categoryList, itemId) {
            var category = [];

            for (var i = 0, len = categoryList.length; i < len; i++) {
                if (categoryList[i].children.length > 0){
                    for (var j = 0, len1 = categoryList[i].children.length; j < len1; j++) {
                        if (categoryList[i].children[j].id === itemId){
                            category = categoryList[i];
                        }
                    }
                }
            }

            return category;
        }

        function hasParentInList (categoryList, uuid) {
            var category = _.filter(categoryList, function (category) {
                return category.uuid === uuid;
            });

            return category;
        }

        function descombinedMigration (categoryUndo) {
            /* jshint camelcase:false */
            if (!categoryUndo.parent_uuid) {
                insertCategoryLegacy(null, categoryUndo);
                removeCategoryFixed(getParentCategory(viewModel.data.categories.organizze, categoryUndo.id).id, categoryUndo);
            } else {
                var previousCategory = hasParentInList(viewModel.data.categories.user, categoryUndo.parent_uuid);
                if (previousCategory[0]) {
                    insertCategory(viewModel.data.categories.user, previousCategory[0].id, categoryUndo);
                    removeCategoryFixed(getParentCategory(viewModel.data.categories.organizze, categoryUndo.id).id, categoryUndo);
                } else {
                    var parentCategory = getParentCategoryByUuid(viewModel.data.categories.organizze, categoryUndo.parent_uuid);

                    insertCategoryLegacy(null, parentCategory);
                    insertCategoryLegacy(parentCategory.id, categoryUndo);

                    var categoryFixedId = getParentCategory(viewModel.data.categories.organizze, categoryUndo.id).id;
                    removeCategoryFixed(categoryFixedId, categoryUndo);

                    var categoryFixedParentId = getParentCategory(viewModel.data.categories.organizze, parentCategory.id).id;
                    removeCategoryFixed(categoryFixedParentId, parentCategory);
                }
            }

            viewModel.checkCategoriesMigrated();
        }

        function _saveCategorieCombined (newCategory, legacyCategory) {
            /* jshint camelcase:false */
            if (!legacyCategory.parent_uuid) {
                if (legacyCategory.children.length > 0) {
                    for (var i = 0, len = legacyCategory.children.length; i < len; i++) {
                        insertCategory(viewModel.data.categories.organizze, newCategory.id, legacyCategory.children[i]);
                        removeCategoryLegacy(legacyCategory.children[i].id, legacyCategory.children[i]);
                        i--;
                        if (legacyCategory.children.length === 0) {
                            insertCategory(viewModel.data.categories.organizze, newCategory.id, legacyCategory);
                            removeCategoryLegacy(legacyCategory.id, legacyCategory);
                            viewModel.checkCategoriesMigrated();
                            return;
                        }
                    }
                }

                insertCategory(viewModel.data.categories.organizze, newCategory.id, legacyCategory);
                removeCategoryLegacy(legacyCategory.id, legacyCategory);
            } else {
                insertCategory(viewModel.data.categories.organizze, newCategory.id, legacyCategory);
                removeCategoryLegacy(legacyCategory.id, legacyCategory);
            }

            viewModel.checkCategoriesMigrated();
        }

        function insertCategory (listCategory, listCategoryNewParentId, item) {
            /* jshint camelcase:false */
            for (var i = 0, len = listCategory.length; i < len; i++) {
                if (listCategory[i].id === listCategoryNewParentId) {
                    listCategory[i].children.push(item);
                    return;
                }
            }

            listCategory.push(item);
        }

        function insertCategoryLegacy (listCategoryParent, item) {
            /* jshint camelcase:false */
            var listCategory = viewModel.data.categories.user;

            if (listCategoryParent === null) {
                listCategory.push(item);
                return;
            }

            for (var i = 0, len = listCategory.length; i < len; i++) {
                if (listCategory[i].id === listCategoryParent) {
                    listCategory[i].children.push(item);
                    return;
                }
            }
        }

        function removeCategoryFixed (categoryIdLegacy, item) {
            /* jshint camelcase:false */
            var listCategory = viewModel.data.categories.organizze;

            for (var i = 0, len1 = listCategory.length; i < len1; i++) {
                if (listCategory[i].id === categoryIdLegacy) {
                    for (var j = 0, len2 = listCategory[i].children.length; j < len2; j++) {
                        if (listCategory[i].children[j].id === item.id) {
                            listCategory[i].children.remove(item);
                            return;
                        }
                    }
                }
            }
        }

        function removeCategoryLegacy (categoryIdLegacy, item) {
            /* jshint camelcase:false */
            var listCategory = viewModel.data.categories.user;

            if (item.parent_uuid) {
                for (var j = 0, len = listCategory.length; j < len; j++) {
                    if (listCategory[j].uuid === item.parent_uuid) {
                        listCategory[j].children.remove(item);
                        return;
                    }
                }
            }

            for (var i = 0, len1 = listCategory.length; i < len1; i++) {
                if (listCategory[i].id === categoryIdLegacy) {
                    listCategory.remove(listCategory[i]);
                    return;
                }
            }
        }

        function _finishMigration () {
            /* jshint camelcase:false */

            var organizzeList = viewModel.data.categories.organizze,
            promise,
            requestPayloadData = [];

            for (var i=0; i < organizzeList.length; i++) {
                var fixedCategory = organizzeList[i];

                for (var x=0; x < fixedCategory.children.length; x++) {
                    var child = fixedCategory.children[x];

                    requestPayloadData.push({
                        legacy_category_id: child.id,
                        new_parent_id: fixedCategory.id
                    });
                }
            }

            promise = _postToFinish(requestPayloadData);

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function() {
                MessageFactory.setFlash('Parabéns, suas categorias foram migradas', 'success');
            }).catch(function () {
                MessageFactory.setFlash('Desculpe, tivemos um problema ao finalizar a migração, por favor, tente novamente.', 'error');
            });
        }

        function _postToFinish(requestPayloadData) {
            /* jshint camelcase:false */
            var url = ContextFactory.getEndPoint('finish', 'categories_migration');

            return CrudFactory.post(url, {categories_migration: requestPayloadData});
            }
    }
})();

(function () {

    'use strict';

    angular.module('zze.credit-cards')
        .controller('zze.credit-cards.ConfirmCtrl', confirmCtrl);

    confirmCtrl.$inject = ['$injector', '$scope'];

    function confirmCtrl ($injector, $scope) {
        /*jshint validthis:true */
        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),

            publicMethods = {
                cancel: cancel,
                action: action
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            /* jshint camelcase:false */
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.nameCreditCard = $scope.ngDialogData.name || '';
            viewModel.blockToDeleteCreditCard = $scope.ngDialogData.have_credit_card_invoice_payment;

            _getCountTransactions();
        }

        function cancel () {
            $scope.closeThisDialog();
        }

        function action (method) {
            $scope.$parent.creditCards[method]($scope.ngDialogData);
            $scope.closeThisDialog();
        }

        function _getCountTransactions () {
            var url = ContextFactory.getEndPointProccess({
                method: 'transactions_count',
                replace: ':id',
                value: $scope.ngDialogData.id
            });

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                viewModel.countTransactions = resp.data;
            });
        }
    }

})();
(function () {

    'use strict';

    angular.module('zze.credit-cards')
        .controller('zze.credit-cards.CreateCtrl', CreateCtrl);

    CreateCtrl.$inject = ['$injector', '$scope'];

    function CreateCtrl ($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,

            $q = $injector.get('$q'),
            $filter = $injector.get('$filter'),

            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            FinhubSteps = $injector.get('zze.finhub.finhubSteps'),
            FinhubInstitutions = $injector.get('zze.finhub.finhubInstitutions'),
            FinhubInstitutionIcon = $injector.get('zze.finhub.finhubInstitutionIcon'),

            ENUMS_TYPE_ACCOUNTS = $injector.get('ENUMS_TYPE_ACCOUNTS'),

            publicMethods = {
                pushStep: pushStep,
                popStep: popStep,
                currentStep: currentStep,
                shouldShowBackButton: shouldShowBackButton,

                getMostPopularInstitutions: getMostPopularInstitutions,

                selectInstitution: selectInstitution,
                selectNullInstitution: selectNullInstitution,

                showPaymentAccountInput: showPaymentAccountInput,

                save: save,
                closeDialog: closeDialog,
                showDescriptionField: showDescriptionField
            },

            /* jshint camelcase:false */
            _institutions = [],
            _accounts = [],

            defaultData = {
                institution: null,
                form: {
                    color: 'D5D5D5',
                    payment_account_id: null
                },
                institutionsSelectize: {
                    value: null,
                    config: {}
                },
                paymentAccountSelectize: {
                    config: {}
                }
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            FinhubSteps.reset();
            FinhubSteps.pushStep('major-institution-select');

            viewModel.tracker = PromiseTrackerService.create([
                'loadingData'
            ]);

            viewModel.data = angular.copy(defaultData);

            viewModel.animationClassName = 'zze-ng-animate-if-fade-in';
            viewModel.descriptionFieldVisible = false;
            viewModel.daysOfMonth = _getDaysOfMonthArray();
            viewModel.paymentAccountIsVisible = false;

            _fetchInstitutionsAndAccounts();

            $scope.$watch('creditCardCad.data.institutionsSelectize.value', function (newVal, oldVal) {
                var institution;

                if (newVal === oldVal) {
                    return;
                }
                institution = _.find(_institutions, function(i) {
                    return i.id === newVal;
                });
                if (institution) {
                    viewModel.data.form.institution_id = institution.id;
                    viewModel.data.institution = institution;
                } else {
                    viewModel.data.form.institution_id = 'default';
                    viewModel.data.institution = null;
                }
            });

            $scope.$on('colorPicker.setColor', function(event, value) {
                viewModel.data.form.color = value;
            });
        }

        function showPaymentAccountInput () {
            viewModel.paymentAccountIsVisible = true;
        }

        function getMostPopularInstitutions () {
            return _institutions.slice(0, 8);
        }

        function selectInstitution (institution) {
            /* jshint camelcase: false */
            _resetFormData();
            viewModel.data.form.institution_id = institution.id;
            viewModel.data.institution = institution;
            pushStep('create-with-major-institution-selected');
        }

        function selectNullInstitution () {
            /* jshint camelcase: false */
            _resetFormData();
            viewModel.data.form.institution_id = 'default';
            viewModel.data.institution = null;
            pushStep('create-with-institution-null');
        }

        function shouldShowBackButton () {
            return FinhubSteps.shouldShowBackButton();
        }

        function pushStep (step) {
            viewModel.animationClassName = 'zze-ng-animate-if-fade-in-right';
            FinhubSteps.pushStep(step);
        }

        function popStep () {
            viewModel.animationClassName = 'zze-ng-animate-if-fade-in-left';
            FinhubSteps.popStep();
        }

        function currentStep () {
            return FinhubSteps.currentStep();
        }

        function closeDialog () {
            $scope.closeThisDialog();
        }

        function showDescriptionField () {
            viewModel.descriptionFieldVisible = true;
        }

        function save () {
            if (!_isFormValid()) {
                return;
            }

            _create();
        }

        function _create () {
            var url = ContextFactory.getEndPoint('create', 'credit_cards'),
                promise = CrudFactory.post(url, {credit_card: viewModel.data.form});

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                var callbackOptions = $scope.ngDialogData.callbackOptions;

                $scope.$parent[callbackOptions.ctrl][callbackOptions.afterCreate](resp.data);
                MessageFactory.setFlash($filter('translate')('creditCards.createdMessageOk'), 'success');
                $scope.closeThisDialog();
            });
        }

        function _isFormValid () {
            return viewModel.form && viewModel.form.$valid;
        }

        function _fetchInstitutionsAndAccounts () {
            var institutionsPromise = FinhubInstitutions.getInstitutions(),
                url = ContextFactory.getEndPoint('index', 'accounts'),
                accountsPromise = CrudFactory.getAll(url),
                promiseAll = $q.all([institutionsPromise, accountsPromise]);

            viewModel.tracker.loadingData.addPromise(promiseAll);

            promiseAll.then(function (resp) {
                _buildInstitutionsArray(resp[0]);
                _setInstitutionsSelectizeConfig();
                _accounts = resp[1].data;
                _setPaymentAccountSelectizeConfig();
            });
        }

        function _buildInstitutionsArray (institutions) {
            for (var i = 0, len = institutions.length; i < len; i++) {
                var institution = institutions[i];

                if (_.contains(institution.countries, $scope.main.country.id) === false) {
                    continue;
                }
                if (institution.deleted === true) {
                    continue;
                }
                if (_.contains(institution.products, 'credit_card')) {
                    _institutions.push(institution);
                }
            }
        }

        function _getDaysOfMonthArray () {
            var days = [];

            for (var i = 0; i < 31; i++) {
                var day = i + 1;
                days.push(day);
            }

            return days;
        }

        function _setInstitutionsSelectizeConfig () {
            /* jshint camelcase:false */
            var selectizeItemHTML, selectizeOptionHTML, newItemHTML, institutionName;

            selectizeItemHTML = function (item, escape) {
                var str = '';

                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';
                str += '</div>';

                return str;
            };

            selectizeOptionHTML = function (item, escape) {
                var str = '';

                if (item.manualItem || (item.name === 'default')) {
                    return '<div style="display: none"></div>';
                }
                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += '<img src="' + item.logo_url + '" />';
                str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';
                str += '</div>';

                return str;
            };

            newItemHTML = function (item, escape) {
                institutionName = escape(item.input);
                return '<div class="create">Adicionar <strong>' + institutionName + '</strong>&hellip;</div>';
            };

            viewModel.data.institutionsSelectize.config = {
                persist: false,
                valueField: 'id',
                disabledField: false,
                options: _institutions,
                labelField: 'name',
                searchField: ['name'],
                maxItems: 1,
                openOnFocus: true,
                highlight: false,
                create: function (input) {
                    return {
                        id: 'default-'+input,
                        manualItem: true,
                        name: input,
                        popularity: 999999
                    };
                },
                render: {
                    item: selectizeItemHTML,
                    option: selectizeOptionHTML,
                    option_create: newItemHTML
                },
                onChange: function (id) {
                    var isDefaultInstitution = (id+'').split('-')[0] === 'default';

                    $scope.$apply(function () {
                        viewModel.data.form.institution_name = isDefaultInstitution ? institutionName : null;
                    });
                }
            };
        }

        function _setPaymentAccountSelectizeConfig () {
            var selectizeItemHTML, selectizeOptionHTML;

            selectizeItemHTML = function (item, escape) {
                var str = '';

                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += FinhubInstitutionIcon.buildRawHTML(item);
                str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';
                str += '</div>';

                return str;
            };

            selectizeOptionHTML = function (item, escape) {
                var str = '',
                    humanKind = ENUMS_TYPE_ACCOUNTS[item.kind].description;

                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += FinhubInstitutionIcon.buildRawHTML(item);
                str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';
                str += '<span class="zze-selectize-complement">' + escape(humanKind) + '</span>';
                str += '</div>';

                return str;
            };

            viewModel.data.paymentAccountSelectize.config = {
                persist: false,
                valueField: 'id',
                disabledField: false,
                options: _accounts,
                labelField: 'name',
                searchField: ['name'],
                maxItems: 1,
                openOnFocus: true,
                highlight: false,
                render: {
                    item: selectizeItemHTML,
                    option: selectizeOptionHTML
                }
            };
        }

        function _resetFormData () {
            viewModel.paymentAccountIsVisible = false;
            viewModel.data.form.payment_account_id = null;
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.credit-cards')
        .controller('zze.credit-cards.UpdateCtrl', UpdateCtrl);

    UpdateCtrl.$inject = ['$injector', '$scope'];

    function UpdateCtrl ($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,

            $q = $injector.get('$q'),

            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            FinhubInstitutions = $injector.get('zze.finhub.finhubInstitutions'),
            FinhubInstitutionIcon = $injector.get('zze.finhub.finhubInstitutionIcon'),

            ENUMS_TYPE_ACCOUNTS = $injector.get('ENUMS_TYPE_ACCOUNTS'),

            publicMethods = {
                showPaymentAccountInput: showPaymentAccountInput,
                save: save,
                closeDialog: closeDialog,
                isAutomatic: isAutomatic
            },

            /* jshint camelcase:false */
            _institutions = [],

            _accounts = [],

            _creditCard = $scope.ngDialogData.item,

            defaultData = {
                institution: null,
                form: {
                    color: 'D5D5D5',
                    payment_account_id: null
                },
                institutionsSelectize: {
                    value: null,
                    config: {}
                },
                paymentAccountSelectize: {
                    config: {}
                }
            };

            /* jshint camelcase:false */
        if (_creditCard.institution_id.toLowerCase() === 'default') {
            defaultData.institution = null;
        } else {
            defaultData.institution = FinhubInstitutions.findInstitutionById(_creditCard.institution_id);
        }

        defaultData.form = {
            color: _creditCard.color,
            name: _creditCard.name,
            institution_id: _creditCard.institution_id,
            institution_name: _creditCard.institution_name,
            limit: parseFloat(_creditCard.limit),
            payment_account_id: _creditCard.payment_account_id,
            billing_cycle_day: _creditCard.billing_cycle_day,
            billing_due_day: _creditCard.billing_due_day
        };

        if (_creditCard.institution_id.toLowerCase() === 'default') {
            defaultData.institutionsSelectize.value = 'default-'+_creditCard.institution_name;
        } else {
            defaultData.institutionsSelectize.value = _creditCard.institution_id.toLowerCase();
        }

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = PromiseTrackerService.create([
                'loadingData'
            ]);

            viewModel.data = angular.copy(defaultData);

            viewModel.daysOfMonth = _getDaysOfMonthArray();

            _fetchInstitutionsAndAccounts();

            viewModel.paymentAccountIsVisible = _.isPresent(_creditCard.payment_account_id);

            $scope.$watch('creditCardCad.data.institutionsSelectize.value', function (newVal, oldVal) {
                var institution;

                if (newVal === oldVal) {
                    return;
                }

                institution = _.find(_institutions, function(i) {
                    return i.id === newVal;
                });
                if (institution && (newVal.toLowerCase() !== 'default')) {
                    viewModel.data.form.institution_id = institution.id;
                    viewModel.data.institution = institution;
                } else {
                    viewModel.data.form.institution_id = 'default';
                    viewModel.data.institution = null;
                }
            });

            $scope.$on('colorPicker.setColor', function(event, value) {
                viewModel.data.form.color = value;
            });
        }

        function showPaymentAccountInput () {
            viewModel.paymentAccountIsVisible = true;
        }

        function isAutomatic () {
            return $scope.ngDialogData.item.automatic;
        }

        function closeDialog () {
            $scope.closeThisDialog();
        }

        function save () {
            if (!_isFormValid()) {
                return;
            }

            if (_.isBlank(viewModel.data.form.payment_account_id)) {
                viewModel.data.form.payment_account_id = null;
            }

            _update();
        }

        function _fetchInstitutionsAndAccounts () {
            var institutionsPromise = FinhubInstitutions.getInstitutions(),
                url = ContextFactory.getEndPoint('index', 'accounts'),
                accountsPromise = CrudFactory.getAll(url),
                promiseAll = $q.all([institutionsPromise, accountsPromise]);

            viewModel.tracker.loadingData.addPromise(promiseAll);

            promiseAll.then(function (resp) {
                _buildInstitutionsArray(resp[0]);
                _setInstitutionsSelectizeConfig();
                _accounts = resp[1].data;
                _setPaymentAccountSelectizeConfig();
            });
        }

        function _buildInstitutionsArray (institutions) {
            for (var i = 0, len = institutions.length; i < len; i++) {
                var institution = institutions[i];

                if (_.contains(institution.countries, $scope.main.country.id) === false) {
                    continue;
                }
                if (institution.deleted === true) {
                    continue;
                }
                if (_.contains(institution.products, 'credit_card')) {
                    _institutions.push(institution);
                }
            }
        }

        function _update () {
            var url = ContextFactory.getEndPointProccess({
                    enums: 'credit_cards',
                    method: 'update',
                    replace: ':id',
                    value: _creditCard.id
                }),
                promise = CrudFactory.put(url, {credit_card: viewModel.data.form});

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                var callbackOptions = $scope.ngDialogData.callbackOptions;

                $scope.$parent[callbackOptions.ctrl][callbackOptions.afterUpdate](resp.data);
                MessageFactory.setFlash('Cartão atualizado com sucesso', 'success');

                $scope.closeThisDialog();
            });
        }

        function _isFormValid () {
            return viewModel.form && viewModel.form.$valid;
        }

        function _setInstitutionsSelectizeConfig () {
            /* jshint camelcase:false */
            var selectizeItemHTML, selectizeOptionHTML, newItemHTML, institutionName;

            var firstLoad = true;

            if (_creditCard.institution_id.toLowerCase() === 'default') {
                _institutions.push({
                    id: 'default-'+_creditCard.institution_name,
                    manualItem: true,
                    name: _creditCard.institution_name,
                    popularity: 999999
                });
            }

            selectizeItemHTML = function (item, escape) {
                var name, str = '';

                if (firstLoad && (item.name.toLowerCase() === 'default')) {
                    name = _creditCard.institution_name;
                } else {
                    name = item.name;
                }

                firstLoad = false;

                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += '<span class="zze-selectize-label">' + escape(name) + '</span>';
                str += '</div>';

                return str;
            };

            selectizeOptionHTML = function (item, escape) {
                var str = '';

                if (item.manualItem || (item.name.toLowerCase() === 'default')) {
                    return '<div style="display: none"></div>';
                }
                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += '<img src="' + item.logo_url + '" />';
                str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';
                str += '</div>';

                return str;
            };

            newItemHTML = function (item, escape) {
                institutionName = escape(item.input);
                return '<div class="create">Adicionar <strong>' + institutionName + '</strong>&hellip;</div>';
            };

            viewModel.data.institutionsSelectize.config = {
                persist: false,
                valueField: 'id',
                disabledField: false,
                options: _institutions,
                labelField: 'name',
                searchField: ['name'],
                maxItems: 1,
                openOnFocus: true,
                highlight: false,
                create: function (input) {
                    return {
                        id: 'default-'+input,
                        manualItem: true,
                        name: input,
                        popularity: 999999
                    };
                },
                render: {
                    item: selectizeItemHTML,
                    option: selectizeOptionHTML,
                    option_create: newItemHTML
                },
                onChange: function (id) {
                    var isDefaultInstitution = (id+'').split('-')[0].toLowerCase() === 'default';

                    $scope.$apply(function () {
                        viewModel.data.form.institution_name = isDefaultInstitution ? institutionName : null;
                    });
                }
            };
        }

        function _setPaymentAccountSelectizeConfig () {
            var selectizeItemHTML, selectizeOptionHTML;

            selectizeItemHTML = function (item, escape) {
                var str = '';

                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += FinhubInstitutionIcon.buildRawHTML(item);
                str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';
                str += '</div>';

                return str;
            };

            selectizeOptionHTML = function (item, escape) {
                var str = '',
                    humanKind = ENUMS_TYPE_ACCOUNTS[item.kind].description;

                str += '<div class="zze-image-left zze-truncate zze-text-complement-hidden option">';
                str += FinhubInstitutionIcon.buildRawHTML(item);
                str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';
                str += '<span class="zze-selectize-complement">' + escape(humanKind) + '</span>';
                str += '</div>';

                return str;
            };

            viewModel.data.paymentAccountSelectize.config = {
                persist: false,
                valueField: 'id',
                disabledField: false,
                options: _accounts,
                labelField: 'name',
                searchField: ['name'],
                maxItems: 1,
                openOnFocus: true,
                highlight: false,
                render: {
                    item: selectizeItemHTML,
                    option: selectizeOptionHTML
                }
            };
        }

        function _getDaysOfMonthArray () {
            var days = [];

            for (var i = 0; i < 31; i++) {
                var day = i + 1;
                days.push(day);
            }

            return days;
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.credit-cards')
        .controller('zze.credit-cards.CreditCardsCtrl', CreditCardsCtrl);

    CreditCardsCtrl.$inject = ['$injector', '$scope'];

    function CreditCardsCtrl ($injector, $scope) {

        var viewModel = this,

            $filter = $injector.get('$filter'),
            $q      = $injector.get('$q'),

            CreditCardsFactory = $injector.get('zze.credit-cards.creditCardsFactory'),
            FinhubInstitutions = $injector.get('zze.finhub.finhubInstitutions'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            StringsFactory = $injector.get('zze.utils.stringProcessFactory'),
            PromiseTracker = $injector.get('promiseTracker'),
            Dialog = $injector.get('ngDialog'),
            PermissionFactory = $injector.get('zze.permissions.permissionsFactory'),

            publicMethods = {
                getCreditCards: getCreditCards,
                getPopoverCreditCardsOptions: getPopoverCreditCardsOptions,

                getCurrencyMasked: getCurrencyMasked,

                openCreateCreditCardDialog: openCreateCreditCardDialog,
                openUpdateCreditCardDialog: openUpdateCreditCardDialog,

                unarchive: unarchive,
                archive: archive,
                confirmArchive: confirmArchive,
                updateItemData: updateItemData,
                addItemFirstData: addItemFirstData,
                viewInvoices: viewInvoices,
                destroy: destroy,
                confirmDestroy: confirmDestroy,
                redirectReconciliation: redirectReconciliation
            },

            _popoversConfig = {
                reCalcTop: -8,
                template: $filter('assetPath')('templates/modules/credit-cards/templates/credit-cards-popover-credit-cards-options.template.html')
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

            if (StringsFactory.checkParamUrl('dialog') === 'cadastro') {
                openCreateCreditCardDialog();
            }

            viewModel.tracker = {
                loadPage: PromiseTracker(),
                balance: PromiseTracker()
            };

            viewModel.data = CreditCardsFactory.getDataFake();

            getCreditCards(true);

            viewModel.graphic = {
                balance: {
                    endPoint: ContextFactory.getEndPoint('general_report'),
                    settings: {
                        currency: $scope.main.contextSource.currency,
                        chart: {
                            defaultSeriesType: 'area',
                            backgroundColor: 'transparent',
                            height: 54,
                            marginTop: 5,
                            marginRight: 0,
                            marginBottom: 5,
                            marginLeft: 0
                        },
                        xAxis: {
                            categories: [],
                            lineWidth: 0,
                            minorGridLineWidth: 0,
                            lineColor: 'transparent',
                            minorTickLength: 0,
                            tickLength: 0,
                            labels: {
                                enabled: false
                            },
                            title: {
                                text: null
                            }
                        }
                    }
                }
            };
        }

        function openCreateCreditCardDialog () {
            Dialog.open({
                scope: $scope,
                template: $filter('assetPath')('templates/modules/credit-cards/templates/credit-cards-create.dialog.html'),
                controller: 'zze.credit-cards.CreateCtrl',
                controllerAs: 'creditCardCad',
                className: 'theme-organizze zze-extend_theme-organizze-in-finhub',
                width: 470,
                data: {
                    callbackOptions: {
                        ctrl: 'creditCards',
                        afterCreate: 'addItemFirstData'
                    }
                },
                preCloseCallback: function () {
                    StringsFactory.cleanParamsUrl();
                    // window.location.reload();
                }
            });
        }

        function openUpdateCreditCardDialog (item) {
            Dialog.open({
                scope: $scope,
                template: $filter('assetPath')('templates/modules/credit-cards/templates/credit-cards-update.dialog.html'),
                controller: 'zze.credit-cards.UpdateCtrl',
                controllerAs: 'creditCardCad',
                className: 'theme-organizze zze-extend_theme-organizze-in-finhub',
                width: 470,
                data: {
                    item: item,
                    callbackOptions: {
                        ctrl: 'creditCards',
                        afterUpdate: 'updateItemData'
                    }
                },
                preCloseCallback: function () {
                    StringsFactory.cleanParamsUrl();
                }
            });
        }

        function getPopoverCreditCardsOptions () {
            return _popoversConfig;
        }

        function getCurrencyMasked (value) {
            return CurrencyFactory.getCurrencyMasked(value, $scope.main.contextSource.currency, true);
        }

        function archive (item) {
            var data = item,
                url = ContextFactory.getEndPointProccess({
                    method: 'archive',
                    replace: ':id',
                    value: data.id
                });

            var promise = CrudFactory.put(url);

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function () {
                data.archived = true;

                _removeItemData(data.id, false);
                _addItemLastData(data);

                // TODO - Esta forma de fechar o drop-down deve ser revista.
                $('*[data-drop-down=hover]').trigger('mouseleave.drop-down:hover');

                MessageFactory.setFlash($filter('translate')('creditCards.archivedMessageOk'), 'success');
            });
        }

        function confirmArchive (item) {
            if (!PermissionFactory.checkAccessAction('credit_card', ['edit'])) {
                $scope.main.showAccessDanied();
                return;
            }

            Dialog.open({
                template: $filter('assetPath')('templates/modules/credit-cards/templates/credit-cards-confirm-archive.dialog.html'),
                controller: 'zze.credit-cards.ConfirmCtrl',
                controllerAs: 'confirm',
                scope: $scope,
                width: 420,
                showClose: false,
                closeByNavigation: false,
                closeByDocument: false,
                data: item
            });
        }

        function unarchive (item) {
            if (!PermissionFactory.checkAccessAction('credit_card', ['edit'])) {
                $scope.main.showAccessDanied();
                return;
            }

            var data = item,
                url = ContextFactory.getEndPointProccess({
                    method: 'unarchive',
                    replace: ':id',
                    value: item.id
                });

            var promise = CrudFactory.put(url);

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function () {
                data.archived = false;

                _removeItemData(data.id, false);
                addItemFirstData(data);

                // TODO - Esta forma de fechar o drop-down deve ser revista.
                $('*[data-drop-down=hover]').trigger('mouseleave.drop-down:hover');

                MessageFactory.setFlash($filter('translate')('creditCards.unarchivedMessageOk'), 'success');
            });
        }

        function destroy (item) {

            var data = item,
                url = ContextFactory.getEndPointProccess({
                    method: 'destroy',
                    replace: ':id',
                    value: data.id
                });

            var promise = CrudFactory.destroy(url);

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function () {
                _removeItemData(item.id, true);
            });
        }

        function confirmDestroy (item) {
            if (!PermissionFactory.checkAccessAction('transaction', ['delete'])) {
                $scope.main.showAccessDanied();
                return;
            }

            Dialog.open({
                template: $filter('assetPath')('templates/modules/credit-cards/templates/credit-cards-confirm-destroy.dialog.html'),
                controller: 'zze.credit-cards.ConfirmCtrl',
                controllerAs: 'confirm',
                scope: $scope,
                width: 420,
                showClose: false,
                closeByNavigation: false,
                closeByDocument: false,
                data: item
            });
        }

        function getCreditCards (useLoading) {
            var url = ContextFactory.getEndPoint('index'),
                creditCardsPromise = CrudFactory.getAll(url, {
                    params: {
                        status: 'all'
                    }
                }),
                institutionsPromise = FinhubInstitutions.getInstitutions(),
                promiseAll = $q.all([creditCardsPromise, institutionsPromise]);

            if (useLoading) {
                viewModel.tracker.loadPage.addPromise(promiseAll);
            }

            promiseAll.then(function (resp) {
                viewModel.data = resp[0].data;
            });
        }

        function viewInvoices (creditCardId) {
            return ContextFactory.getLegacyRouteProccess({
                method: 'credit_card_invoices',
                replace: ':credit_card_id',
                value: creditCardId.id
            });
        }

        function addItemFirstData (data) {
            viewModel.data.unshift(data);
            getCreditCards(true);
            if (window.PrimeirosPassos && window.PrimeirosPassos.Callout) {
                window.PrimeirosPassos.Callout.refreshProgress();
            }
        }

        function redirectReconciliation (item, $event) {
            if (!PermissionFactory.checkAccessAction('reconciliation', ['view'])) {
                $scope.main.showAccessDanied();
                return;
            }

            $scope.main.visit(_getUrlReconciliation(item.uuid), $event);
        }

        function _getUrlReconciliation (uuid) {
            return ContextFactory.getLegacyRouteProccess({
                method: 'conciliations_new_account_statement',
                replace: ':uuid',
                value: uuid
            });
        }

        function _addItemLastData (data) {
            viewModel.data.push(data);
        }

        function updateItemData (data) {
            for (var i = viewModel.data.length - 1; i >= 0; i--) {
                if (viewModel.data[i].id === data.id) {
                    viewModel.data[i] = data;

                    MessageFactory.setFlash($filter('translate')('creditCards.updatedMessageOk'), 'success');

                    break;
                }
            }
        }

        function _removeItemData (id, showMessage) {
            for (var i = viewModel.data.length - 1; i >= 0; i--) {
                if (viewModel.data[i].id === id) {
                    viewModel.data.splice(i, 1);

                    if (!!showMessage) {
                        MessageFactory.setFlash($filter('translate')('creditCards.deletedMessageOk'), 'success');

                        if (viewModel.data.length === 0) {
                            getCreditCards(true);
                        }
                    }

                    break;
                }
            }
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.DashboardCtrl', DashboardCtrl);

    DashboardCtrl.$inject = ['$injector', '$scope', '$compile'];

    function DashboardCtrl($injector, $scope, $compile) {
        var viewModel = this,

            $q = $injector.get('$q'),
            $filter = $injector.get('$filter'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            FinhubInstitutions = $injector.get('zze.finhub.finhubInstitutions'),
            DashboardFactory = $injector.get('zze.dashboard.dashboardFactory'),
            StorageFactory = $injector.get('zze.utils.storageFactory'),
            TransactionFactory = $injector.get('zze.transactions.transactionFactory'),
            TrackerFactory = $injector.get('zze.commons.promiseTrackerService'),
            Dialog = $injector.get('ngDialog'),

            BALANCE_CONFIG = 'hideOverallBalance_' + $scope.main.contextSource.currentEntity.id,
            ACCOUNTS = [],
            CATEGORIES = [],
            CREDIT_CARDS = [],
            TAGS = [],

            publicMethods = {
                updateStatus: updateStatus,
                hideBalance: hideBalance,
                showCadTransaction: showCadTransaction,
                showCadTransfer: showCadTransfer,
                getUrlToReports: getUrlToReports,
                setPaymentTransaction: setPaymentTransaction,
                getUrlToImportTransaction: getUrlToImportTransaction,
                showPayCreditCard: showPayCreditCard,
                showBalanceMonthInfo: showBalanceMonthInfo
            };

        $.extend(viewModel, publicMethods);

        init();

        function init() {
            /* jshint camelcase:false */
            viewModel.data = {};
            viewModel.tracker = TrackerFactory.create([
                'loadDataServer',
                'loadTopOverview',
                'loadWidgetsPosition',
                'loadBlogContent'
            ]);

            viewModel.config = {
                hideBalance: StorageFactory.getLocal(BALANCE_CONFIG, true) === DashboardFactory.SET_HIDE_BALANCE
            };

            viewModel.topOverview = {
                currentMonthEarnings: "R$ 0,00",
                currentMonthExpenses: "R$ 0,00"
            };

            viewModel.widgetsConfig = {
                widgets: []
            };

            viewModel.data.currentLicense = $scope.main.contextSource.currentEntity.currentLicense;
            viewModel.data.endFreeDate = new Date("2022-02-01").getDate();
            viewModel.data.currentDate = new Date().getDate();
            viewModel.data.timeOut = viewModel.data.endFreeDate - viewModel.data.currentDate;

            viewModel.currencySymbol = $scope.main.contextSource.currency.symbol;
            viewModel.isFeatureFlaggedConexoes = window.isFeatureFlaggedConexoes;

            _getWidgetsPosition();
            _getTopOverview();
            _getDataServer();
            _getCompletedSteps();

            if (localStorage.getItem('openOneMoreDayDialog')) {
                Dialog.open({
                    scope: $scope,
                    template: $filter('assetPath')('templates/modules/dashboard/templates/one-more-day.dialog.html'),
                    controller: 'zze.dashboard.OneMoreDayActiveCtrl',
                    controllerAs: 'oneMore',
                    width: 381,
                    heigth: 79,
                    borderRadius: 8,
                    className: 'ngdialog downgrade-dialog theme-organizzetheme-organizze zze-extend_theme-organizze-in-finhub'
                });
            }

            document.title = "Organizze | Visão geral";
        }

        function showBalanceMonthInfo() {
            if ($('#info').css("display") === "block") {
                $('#info').css("display", "none");
            } else {
                $('#info').css("display", "block");
            }
        }
        function _getCompletedSteps() {
            /* jshint camelcase:false */
            var onboardinSteps = window.Context.currentUser.onboarding_steps;
            if (onboardinSteps.budgets === null) {
                onboardinSteps.budgets = [];
            }
            viewModel.completedSteps = [];
            if (onboardinSteps !== null && onboardinSteps !== {}) {
                Object.keys(onboardinSteps).forEach(function (item) {
                    if (onboardinSteps[item] === true || onboardinSteps[item].length > 0) {
                        viewModel.completedSteps.push(onboardinSteps[item]);
                    }
                });
            }

        }

        function showCadTransaction(type, item) {
            // console - essa parte tem q ser feita, para abrir os lançamentos corretamente.
            // Lembrar q toda a parte genérica de transactions é CAMELCASE e do backend nao est'avindo em CAMELCASE;
            /* jshint camelcase:false */
            if (item) {
                item.amountInCents = item.amount_in_cents;
                item.activityType = type === "expense" ? 0 : 1;
                item.account = item.account.account || item.account;
                item.categoryUuid = item.category.uuid;
                item.attachmentsCount = item.attachments_count;
            }
            var _item = item,
                opts = {
                    scope: $scope,
                    data: {
                        item: item ? _item : undefined,
                        type: type,
                        //options: {
                        //ctrl: 'details',
                        //save: 'getAccount'
                        //},
                        accounts: ACCOUNTS,
                        categories: CATEGORIES,
                        creditCards: CREDIT_CARDS,
                        tags: TAGS
                    },

                    preCloseCallback: function (param) {
                        if (param === "saved") {
                            if (window.PrimeirosPassos && window.PrimeirosPassos.Callout) {
                                window.PrimeirosPassos.Callout.refreshProgress();
                            }
                            updateStatus();
                        }
                    }
                };

            if (_item) {
                TransactionFactory.getTransactionComplementApi(_item).then(function (resp) {

                    _item.complement = resp.data;

                    TransactionFactory.showCadTransaction(opts);
                });
            } else {
                TransactionFactory.showCadTransaction(opts);
            }



            // TransactionFactory.showCadTransaction(opts);
        }

        function showCadTransfer() {
            var opts = {
                scope: $scope,
                data: {
                    accounts: ACCOUNTS,
                    categories: CATEGORIES,
                    tags: TAGS
                },
                preCloseCallback: function () {
                    updateStatus();
                }
            };

            TransactionFactory.showCadTransference(opts);
        }

        function showPayCreditCard(item) {
            TransactionFactory.showPayCreditCard($scope, item, []);
        }

        function hideBalance() {
            var newStatus = viewModel.config.hideBalance ?
                DashboardFactory.SET_SHOW_BALANCE :
                DashboardFactory.SET_HIDE_BALANCE;

            viewModel.config.hideBalance = newStatus;
            localStorage.setItem(BALANCE_CONFIG, newStatus);
        }

        function getUrlToReports() {
            var url = ContextFactory.getLegacyRoute('report_general');
            return url;
        }

        function getUrlToImportTransaction() {
            var url = ContextFactory.getLegacyRoute('new_conciliation_statement');
            return url;
        }

        function setPaymentTransaction(item) {
            return TransactionFactory.setPaymentTransaction(item);
        }

        function updateStatus() {
            _getTopOverview();
            _getDataServer();
        }

        function _getWidgetsPosition() {
            var promise = CrudFactory.getOne('/zze_front/widgets/widgets');

            viewModel.tracker.loadWidgetsPosition.addPromise(promise);

            promise.then(function (resp) {
                viewModel.widgetsConfig.widgets = resp.data.widgets;
                viewModel.widgetsConfig.widgets.grid1.forEach(function (widget) {
                    angular.element(document.getElementById("col-sortable-1")).append(getDirectiveMarkup(widget.name, widget.minimized));
                });
                viewModel.widgetsConfig.widgets.grid2.forEach(function (widget) {
                    angular.element(document.getElementById("col-sortable-2")).append(getDirectiveMarkup(widget.name, widget.minimized));
                });
            });
        }

        function getDirectiveMarkup(widgetName, minimized) {
            /* jshint camelcase:false */
            var directives = {
                    accounts_overview: "<div id='widget-accounts_overview' class='zze-sortable-item'><zze-widget-accounts></zze-widget-accounts></div>",
                    credit_cards_overview: "<div id='widget-credit_cards_overview' class='zze-sortable-item'><zze-widget-credit-cards></zze-widget-credit-cards></div>",
                    blog_feeds: "<div id='widget-blog_feeds' class='zze-sortable-item'><zze-widget-blog></zze-widget-blog></div>",
                    bills_to_pay: "<div id='widget-bills_to_pay' class='zze-sortable-item'><zze-widget-bills-to-pay></zze-widget-bills-to-pay></div>",
                    bills_to_receive: "<div id='widget-bills_to_receive' class='zze-sortable-item'><zze-widget-bills-to-receive></zze-widget-bills-to-receive></div>",
                    top_expenses: "<div id='widget-top_expenses' class='zze-sortable-item'><zze-widget-top-expenses></zze-widget-top-expenses></div>",
                    budgets: "<div id='widget-budgets' class='zze-sortable-item'><zze-widget-budgets></zze-widget-budgets></div>",
                    balance_month_overview: "<div id='widget-balance_month_overview' class='zze-sortable-item zze-balance-month'><zze-widget-balance-month></zze-widget-balance-month></div>"
                },
                minimizedDirectives = {
                    accounts_overview: "<div id='widget-accounts_overview' class='zze-sortable-item zze-sortable-closed' style='height: 90px; opacity: 1;'><zze-widget-accounts></zze-widget-accounts></div>",
                    credit_cards_overview: "<div id='widget-credit_cards_overview' class='zze-sortable-item zze-sortable-closed' style='height: 90px; opacity: 1;'><zze-widget-credit-cards></zze-widget-credit-cards></div>",
                    blog_feeds: "<div id='widget-blog_feeds' class='zze-sortable-item zze-sortable-closed' style='height: 65px; opacity: 1;'><zze-widget-blog></zze-widget-blog></div>",
                    bills_to_pay: "<div id='widget-bills_to_pay' class='zze-sortable-item zze-sortable-closed' style='height: 65px; opacity: 1;'><zze-widget-bills-to-pay></zze-widget-bills-to-pay></div>",
                    bills_to_receive: "<div id='widget-bills_to_receive' class='zze-sortable-item zze-sortable-closed' style='height: 65px; opacity: 1;'><zze-widget-bills-to-receive></zze-widget-bills-to-receive></div>",
                    top_expenses: "<div id='widget-top_expenses' class='zze-sortable-item zze-sortable-closed' style='height: 65px; opacity: 1;'><zze-widget-top-expenses></zze-widget-top-expenses></div>",
                    budgets: "<div id='widget-budgets' class='zze-sortable-item zze-sortable-closed' style='height: 65px; opacity: 1;'><zze-widget-budgets></zze-widget-budgets></div>",
                    balance_month_overview: "<div id='widget-balance_month_overview' class='zze-sortable-item zze-balance-month zze-sortable-closed' style='height: 65px; opacity: 1;'><zze-widget-balance-month></zze-widget-balance-month></div>"
                };

            if (minimized) {
                return $compile(minimizedDirectives[widgetName])($scope);
            } else {
                return $compile(directives[widgetName])($scope);
            }
        }

        function _getTopOverview() {
            var url = ContextFactory.getEndPointProccess({
                method: 'top_overview',
                enums: 'widgets',
                replace: '',
                value: ''
            });

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadTopOverview.addPromise(promise);

            const singleCapitalize = function(str) {
                let firstLetter = str[0].toUpperCase();
                return firstLetter+str.slice(1, str.length);
            };

            promise.then(function (resp) {
                var greetingTime = resp.data.greetingTime;
                viewModel.topOverview.greeting = $filter('translate')('dashboard.widget.topOverview.' + greetingTime);
                viewModel.topOverview.greetingImage = $filter('assetPath')('images/application/dashboard/' + greetingTime + '.png');
                viewModel.topOverview.userName = resp.data.userName;
                viewModel.topOverview.entityName = singleCapitalize(resp.data.entityName);
                viewModel.topOverview.currentMonthEarnings = CurrencyFactory.getCurrencyMasked(resp.data.currentMonthEarnings / 100, $scope.main.contextSource.currency, true);
                viewModel.topOverview.currentMonthExpenses = CurrencyFactory.getCurrencyMasked(Math.abs(resp.data.currentMonthExpenses) / 100, $scope.main.contextSource.currency, true);
            });
        }

        function _getDataServer() {
            /* jshint camelcase:false */
            TransactionFactory.setIsLegacyCategories(!$scope.main.contextSource.currentEntity.fixedCategories);

            var prmAccounts = TransactionFactory.getAccountsApi(true),
                prmCategories = TransactionFactory.getCategoriesApi(),
                prmCreditCards = TransactionFactory.getCreditCardsApi(),
                prmTags = TransactionFactory.getTagsApi(),
                institutionsPromise = FinhubInstitutions.getInstitutions();

            viewModel.getDataServerPromise = $q.all([prmAccounts, prmCategories, prmCreditCards, prmTags, institutionsPromise]);

            viewModel.tracker.loadDataServer.addPromise(viewModel.getDataServerPromise);

            viewModel.getDataServerPromise.then(function (resp) {
                ACCOUNTS = resp[0].data;
                CATEGORIES = resp[1];
                CREDIT_CARDS =resp[2].data;
                TAGS = resp[3].data;

                viewModel.credit_cards = { CREDIT_CARDS };
                viewModel.accounts = { ACCOUNTS };
            });
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.OneMoreDayActiveCtrl', oneMoreDayActiveCtrl);

    oneMoreDayActiveCtrl.$inject = ['$injector', '$scope'];

    function oneMoreDayActiveCtrl($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,
            PromiseTracker = $injector.get('promiseTracker'),

            publicMethods = {
                closeOneMoreDayDialog: closeOneMoreDayDialog
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };
        }
        function closeOneMoreDayDialog() {
            $scope.closeThisDialog();
            localStorage.removeItem("openOneMoreDayDialog");
        }
    }

})();
(function () {

    'use strict';

    angular.module('zze.finhub')
        .controller('zze.finhub.ColorPickerCtrl', ColorPickerCtrl);

    ColorPickerCtrl.$inject = ['$scope'];

    function ColorPickerCtrl ($scope) {
        var viewModel = this,

            publicMethods = {
                setColor: setColor,
                toggle: toggle,
                ngStyleForColor: ngStyleForColor,
                setActivated: setActivated
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.colors = [
                        "ffe000", "ff0000", "006aff", "00e766",
                        "ffd6a7", "ffbe73", "ff9d2b", "e97800",
                        "ff9eaa", "ff697b", "ff324b", "d0021b",
                        "ff8f7c", "ff806a", "ff593c", "ef3a1b",
                        "ffa85d", "e99043", "ba7437", "8b572a",
                        "b8e986", "7ed321", "5fb007", "417505",
                        "8fffe6", "4cf4ce", "10daad", "00b089",
                        "76b5ff", "5ea8ff", "2389ff", "0068e0",
                        "cf9ff9", "be75ff", "9e30ff", "8800ff",
                        "ffa3c4", "ff74a5", "ff4889", "f50057",
                        "c3c3c3", "7e7e7e", "4a4a4a", "000000"
                    ];
            viewModel.isVisible = false;
            viewModel.wide = false;
            viewModel.activated = "";
        }

        function setActivated (color) {
            return viewModel.activated === color ? 'selected' : '';
        }

        function setColor (color) {
            viewModel.selectedColor = color;
            viewModel.isVisible = false;
            $scope.$emit('colorPicker.setColor', color);
            viewModel.activated = color;
        }

        function toggle () {
            viewModel.isVisible = !viewModel.isVisible;
        }

        function ngStyleForColor (color) {
            return {
                'background-color': '#'+color
            };
        }
    }
})();

/**
 * Created by selinger on 11/08/17.
 */
(function () {

    'use strict';

    angular.module('zze.finhub')
        .controller('zze.finhub.FinhubSyncCtrl', FinhubSyncCtrl);

    FinhubSyncCtrl.$inject = ['$injector', '$scope'];

    function FinhubSyncCtrl ($injector, $scope) {
        var viewModel = this,

            $filter = $injector.get('$filter'),
            $q = $injector.get('$q'),

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            FinhubFactory = $injector.get('zze.finhub.finhubFactory'),
            DateFactory = $injector.get('zze.utils.dateFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            ConstantsFactory = $injector.get('zze.utils.constantsFactory'),

            ENUMS_CREDIT_CARDS = ConstantsFactory.getEnumsCredCards(),

            publicMethods = {
                formatDate: formatDate,
                formatCurrency: formatCurrency,

                getPopoverConfig: getPopoverConfig,
                getCategories: getCategories,
                getIconClass: getIconClass,
                getColorIcon: getColorIcon,
                getIconInstitution: getIconInstitution,

                setRememberCategorie: setRememberCategorie,
                selectTransactionModify: selectTransactionModify,
                setNewCategorie: setNewCategorie,
                setNewObservation: setNewObservation,
                setNewJoined: setNewJoined
            },

            popovers = {
                categories: {
                    width: 442,
                    toggle: 'click',
                    reCalcLeft: 185,
                    reCalcTop: -8,
                    theme: 'white zze-finhub-sync-popover',
                    template: $filter('assetPath')('templates/modules/finhub/templates/finhub-categories-popover.template.html')
                },
                observation: {
                    width: 230,
                    toggle: 'click',
                    theme: 'white zze-finhub-sync-popover-default',
                    template: $filter('assetPath')('templates/modules/finhub/templates/finhub-observation-popover.template.html')
                },
                tags: {
                    width: 400,
                    toggle: 'click',
                    theme: 'white zze-finhub-sync-popover-default',
                    overflowX: 'inherit',
                    overflowY: 'inherit',
                    template: $filter('assetPath')('templates/modules/finhub/templates/finhub-tags-popover.template.html')
                }
            },

            categories = [],
            tags = [],
            transactionSelected = {};

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = FinhubFactory.getTransactionsFake();

            viewModel.status = {
                remenber: false
            };

            viewModel.selectize = {
                tags: []
            };

            _getDatasServer();
        }

        function formatDate (date) {
            return DateFactory.formatDate(date);
        }

        function formatCurrency (currency) {
            var _currency = currency / 100.0;
            return CurrencyFactory.getCurrencyMasked(_currency, $scope.ngDialogData.currency, false);
        }

        function getPopoverConfig (key) {
            return popovers[key];
        }

        function getIconClass (icon) {
            return icon ? 'icon-' + icon +  ' zze-icon-' + icon : 'icon-caret-down zze-icon-caret-down';
        }

        function getColorIcon (color) {
            return {
                'background': '#' + color
            };
        }

        function getIconInstitution (index) {
            /* jshint camelcase:false */
            return ENUMS_CREDIT_CARDS[index].image_url || ENUMS_CREDIT_CARDS['default'].image_url;
        }

        function getCategories () {
            return categories;
        }

        function setRememberCategorie () {
            viewModel.status.remember = !angular.copy(viewModel.status.remember);
        }

        function selectTransactionModify (options) {
            transactionSelected = options;

            /* jshint camelcase:false */
            viewModel.observation = options.observation || undefined;
            viewModel.joined_tags = options.joined_tags || undefined;
        }

        function setNewCategorie (category) {
            var transaction = viewModel.data[transactionSelected.parent].transactions[transactionSelected.child],
                categoryOld = angular.copy(transaction.category);

            transaction.category = category;

            _putTransaction({
                categoryUuid: category.uuid,
                categoryOld: categoryOld,
                remember: viewModel.status.remember
            });
        }

        function setNewObservation () {
            _putTransaction({
                observation: viewModel.observation
            });
        }

        function setNewJoined () {
            /* jshint camelcase:false */
            _putTransaction({
                joined_tags: FinhubFactory.getTagsString(viewModel.joined_tags)
            });
        }

        function _getDatasServer () {
            var promiseTransactions = _getTransactions(),
                promiseCategories = _getCategories(),
                promiseTags = _getTags(),

                promiseAll = $q.all([promiseTransactions, promiseCategories, promiseTags]);

            viewModel.tracker.loadPage.addPromise(promiseAll);

            promiseAll.then(function (resp) {

                viewModel.data = FinhubFactory.cleanCollectionSync(resp[0].data);
                categories = resp[1].data;
                tags = resp[2].data;

                _checkCategories();

                viewModel.selectize.tags = _createSelectizeTags();
            });
        }

        function _getTransactions () {
            var url = ContextFactory.getEndPoint('index', 'syncable_transactions');

            return CrudFactory.getAll(url);
        }

        function _getCategories () {
            var url = ContextFactory.getEndPoint('index', 'categories');

            return CrudFactory.getAll(url);
        }

        function _getTags () {
            var url = ContextFactory.getEndPoint('index', 'tags');

            return CrudFactory.getAll(url);
        }

        function _putTransaction (options) {
            var transaction = viewModel.data[transactionSelected.parent].transactions[transactionSelected.child],

                url = ContextFactory.getEndPointProccess({
                method: 'update',
                enums: 'syncable_transactions',
                replace: ':id',
                value: transactionSelected.transactionId
            }),

            data = {};

            if (options.categoryUuid) {
                /* jshint camelcase:false */
                data.tag_uuid = options.categoryUuid;
            }

            if (options.observation) {
                data.observation = options.observation;
                transaction.observation = options.observation;
            }

            if (options.joined_tags) {
                data.joined_tags = options.joined_tags;

                /* jshint camelcase:false */
                transaction.joined_tags = FinhubFactory.getTagsArray(options.joined_tags, 'name');
            }

            CrudFactory.put(url, {
                transaction: data,
                remember: options.remember || false
            }).then(function () {
                viewModel.status.remember = false;

                viewModel.observation = undefined;
                viewModel.joined_tags = undefined;
            }, function () {
                transaction.category = options.categoryOld;
                MessageFactory.setFlash('Desculpe, tivemos problemas em alterar esta categoria.', 'error');
            }).catch(function () {
                transaction.category = options.categoryOld;
                MessageFactory.setFlash('Desculpe, tivemos problemas em alterar esta categoria.', 'error');
            });
        }

        function _checkCategories () {

            for (var i=0, len=viewModel.data.length; i<len; i++) {

                for (var j=0, lenj=viewModel.data[i].transactions.length; j<lenj; j++) {

                    viewModel.data[i].transactions[j].category = FinhubFactory.getCategorieTransaction(categories, viewModel.data[i].transactions[j].categoryUuid);
                }
            }
        }

        function _createSelectizeTags () {
            var configSelectize = {
                plugins: ['remove_button'],
                persist: false,
                valueField: 'name',
                labelField: 'name',
                searchField: ['name'],
                options: tags,
                create: function (input) {
                    return {
                        name: input
                    };
                },
                render: {
                    /* jshint camelcase:false */
                    option_create: function (data, escape) {
                        return '<div class="create">Adicionar <strong>' + escape(data.input) + '</strong>&hellip;</div>';
                    }
                }
            };

            return configSelectize;
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze-messages')
        .controller('zze-messages.MessageDetailsCtrl', MessageDetailsCtrl);

    MessageDetailsCtrl.$inject = ['$injector', '$scope'];

    function MessageDetailsCtrl($injector, $scope) {
        var viewModel = this,
            $timeout = $injector.get('$timeout'),
            PromiseTracker = $injector.get('promiseTracker'),
            ContextFactory = $injector.get('zze-messages.contextFactory'),
            CrudFactory = $injector.get('zze-messages.crudFactory'),

            publicMethods = {
                cancel: cancel,
                checkCurrentStep: checkCurrentStep,
                changeCurrentStepBasedInCampaing: changeCurrentStepBasedInCampaing,
                action: action
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = $scope.ngDialogData;
            viewModel.currentStep = "mainMessage";
            window.history.pushState("", "", window.location.pathname);
        }

        function cancel() {
            $scope.closeThisDialog();
            showSupportTooltip();
        }

        function action() {
            $scope.closeThisDialog();
            showSupportTooltip();
        }

        function checkCurrentStep(step) {
          return viewModel.currentStep === step;
        }

        function changeCurrentStepBasedInCampaing(event) {
            if (viewModel.data.campaign) {
                joinTheCampaign();
            }
            /* jshint camelcase:false */
            if (viewModel.data.campaign && viewModel.data.campaign.finish_method === "success_message" && viewModel.data.campaign.success_message) {
                event.preventDefault();
                viewModel.currentStep = "campaignSuccessMessage";
            }else if (viewModel.data.campaign && viewModel.data.campaign.finish_method === "close") {
                event.preventDefault();
                cancel();
            }else {
                cancel();
            }
        }

        function joinTheCampaign () {
            /* jshint camelcase:false */
            viewModel.data.joined_to_campaign = true;
            var url = ContextFactory.getMessagesUpdateUrl(viewModel.data);
            CrudFactory.put(url, viewModel.data);
        }
        function showSupportTooltip() {
            $timeout(function() {
                window.Tooltips.show('Support', 'new-support-location');
            }, 2000);
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze-messages')
        .controller('zze-messages.FullHistoryCtrl', FullHistoryCtrl);

    FullHistoryCtrl.$inject = ['$injector', '$scope', '$rootScope', '$timeout'];

    function FullHistoryCtrl($injector, $scope, $rootScope, $timeout) {
        var viewModel = this,

            $filter = $injector.get('$filter'),
            ContextFactory = $injector.get('zze-messages.contextFactory'),
            CrudFactory = $injector.get('zze-messages.crudFactory'),
            Dialog = $injector.get('ngDialog'),
            PromiseTracker = $injector.get('promiseTracker'),

            publicMethods = {
                actionFor: actionFor,
                goToPage: goToPage,
                pageNumberAvailableToShow: pageNumberAvailableToShow
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker(),
                loading: PromiseTracker()
            };

            _getMessages();

            document.title = "Organizze | Mensagens";

        }

        function actionFor(message) {
            /* jshint camelcase:false */
            var promise = _markAsRead(message);

            viewModel.tracker.loading.addPromise(promise);

            promise.then(function (resp) {
                document.cookie = "reloadContextSource=1";
                var url;
                if (resp.data.kind === "custom") {
                    Dialog.open({
                        template: $filter('assetPath')('templates/modules/messages/templates/messages-details.dialog.html'),
                        controller: 'zze-messages.MessageDetailsCtrl',
                        controllerAs: 'details',
                        className: 'ngdialog theme-organizze zze-messages-dialog',
                        width: 560,
                        closeByDocument: false,
                        data: resp.data
                    });
                } else if (resp.data.kind === "transactions_alerts") {
                    Dialog.open({
                        template: $filter('assetPath')('templates/modules/messages/templates/messages-transactions-alerts.dialog.html'),
                        scope: $scope,
                        controller: 'zze-messages.MessageTransactionsAlertsCtrl',
                        controllerAs: 'transactionsAlerts',
                        className: 'ngdialog theme-organizze zze-messages-dialog transactions-alerts',
                        width: 550,
                        closeByDocument: false,
                        data: resp.data
                    });
                } else if (resp.data.kind === "calendar_event") {
                    if (resp.data.message_object) {
                        var humanizedUrl = (ContextFactory.calendarEventsUrl(true, $scope) + "?month=" + resp.data.message_object.date);
                        url = ContextFactory.calendarEventsUrl();

                        Turbolinks.visit(humanizedUrl);
                        $(document).one("page:load", function () {
                            window.history.pushState("", "", ContextFactory.calendarEventsUrl(true, $scope));
                            var calendarEventLink = $('a').filter(function () { return $(this).attr("href") === (url + "/" + resp.data.message_object.id); });
                            calendarEventLink.click();
                        });
                    } else {
                        Dialog.open({
                            template: $filter('assetPath')('templates/modules/messages/templates/messages-object-destroyed.dialog.html'),
                            controller: 'zze-messages.MessageObjectDestroyedCtrl',
                            controllerAs: 'objectDestroyed',
                            className: 'ngdialog theme-organizze zze-messages-dialog error-message',
                            width: 500,
                            data: resp.data
                        });
                    }
                } else {
                    url = ContextFactory.getLegacyRoute(resp.data.kind);
                    Turbolinks.visit(url);
                }
            });

            $timeout(function () {
                $rootScope.unreadMessages.splice(message, 1);
            }, 1000);
        }

        function _getMessages(pageNum) {
            /* jshint camelcase:false */
            var pageNumber = pageNum || localStorage.getItem("messagesCurrentPageNumber") || 1;
            var url = ContextFactory.getMessagesIndexUrl();
            var pageParam = "?page=" + pageNumber;
            var promise = CrudFactory.getAll(url + pageParam);

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = resp.data;
                viewModel.currentPageNumber = parseInt(pageNumber);
            });

            localStorage.removeItem("messagesCurrentPageNumber");
        }

        function _markAsRead(message) {
            /* jshint camelcase:false */
            message.read_at = new Date();

            var url = ContextFactory.getMessagesUpdateUrl(message);
            return CrudFactory.put(url, message);
        }

        function goToPage(pageNumber) {
            _getMessages(pageNumber);
        }

        function pageNumberAvailableToShow(number) {
            return number < (viewModel.currentPageNumber + 5) && number > (viewModel.currentPageNumber - 5);
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze-messages')
        .controller('zze-messages.MessageObjectDestroyedCtrl', MessageObjectDestroyedCtrl);

    MessageObjectDestroyedCtrl.$inject = ['$injector', '$scope'];

    function MessageObjectDestroyedCtrl($injector, $scope) {
        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),

            publicMethods = {
                close: close
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = $scope.ngDialogData;
            viewModel.errorMessage = getErrorMessage();
        }

        function getErrorMessage() {
            if (viewModel.data.kind === "calendar_event") {
                return "O compromisso já foi excluído.";
            }
        }

        function close() {
            $scope.closeThisDialog();
        }

    }
})();

(function () {
    'use strict';

    angular.module('zze-messages')
        .controller('zze-messages.MessageTransactionsAlertsCtrl', MessageTransactionsAlertsCtrl);

    MessageTransactionsAlertsCtrl.$inject = ['$injector', '$scope'];

    function MessageTransactionsAlertsCtrl($injector, $scope) {
        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            ContextFactory = $injector.get('zze-messages.contextFactory'),
            CurrencyFactory = $injector.get('zze-messages.currencyFactory'),

            publicMethods = {
                cancel: cancel,
                close: close,
                action: action,
                changeSection: changeSection,
                payTransaction: payTransaction,
                unpayTransaction: unpayTransaction,
                getBillDate: getBillDate,
                getInvoiceUrl: getInvoiceUrl,
                currencyMasked: currencyMasked
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = $scope.ngDialogData;
            viewModel.selectedSection = selectFirstSection();
            window.history.pushState("", "", window.location.pathname);
        }

        function cancel() {
            $scope.closeThisDialog();
        }

        function action() {
            $scope.closeThisDialog();
        }

        function changeSection(newSection) {
            viewModel.selectedSection = newSection;
        }

        function selectFirstSection() {
            /* jshint camelcase:false */
            if (viewModel.data.transactions_alerts.overdue_transactions.length > 0) {
                return 'overdue_transactions';
            }else if (viewModel.data.transactions_alerts.next_expenses.length > 0) {
                return 'next_expenses';
            }else if (viewModel.data.transactions_alerts.next_earnings.length > 0) {
                return 'next_earnings';
            }else {
                return 'overdue_transactions';
            }
        }

        function payTransaction(transaction, e, index, keylist) {
            /* jshint camelcase:false */
            var url = ContextFactory.payTransactionUrl(transaction, $scope);
            transaction.done = true;
            viewModel.data.transactions_alerts[keylist].splice(index,1);

            paymentAjaxRequest(url, transaction);

            e.preventDefault();
        }

        function unpayTransaction(transaction, e) {
            var url = ContextFactory.unpayTransactionUrl(transaction);
            transaction.done = false;
            paymentAjaxRequest(url, transaction);

            e.preventDefault();
        }

        function getInvoiceUrl (invoice) {
            return ContextFactory.invoiceUrl(invoice, $scope);
        }

        function getBillDate (formattedDate) {
          var date = new Date(formattedDate),
          months = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
          return months[date.getMonth()] + " de " + date.getFullYear();
        }

        function currencyMasked (value, symbol) {
            var currency = value / 100.0;
            var config;
            if (window.ContextSource) {
               config = window.ContextSource.currency;
            }else {
               config = $scope.main.contextSource.currency;
            }

            return CurrencyFactory.getCurrencyMasked(currency, config, symbol);
        }

        function paymentAjaxRequest(url, transaction) {
            $.ajax({
                url: url,
                type: 'POST',
                success: function () {
                    $('body').trigger('transactions:afterUpdate', [transaction]);
                }
            });
        }

       function close () {
          $scope.closeThisDialog();
        }

    }
})();

(function () {
    'use strict';

    angular.module('zze.plans').controller('zze.plans.PlansCtrl', plansCtrl);

    plansCtrl.$inject = ['$injector', '$scope', '$timeout', '$window'];

    function plansCtrl($injector, $scope, $timeout, $window) {
        /* jshint validthis:true */
        var viewModel = this,
            $filter = $injector.get('$filter'),
            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            StringsFactory = $injector.get('zze.utils.stringProcessFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            Dialog = $injector.get('ngDialog'),
            validPeriodicity = { anual: true, trimestral: true, mensal: true },
            publicMethods = {
                changePeriodicity: changePeriodicity,
                cancelSubscription: cancelSubscription,
                readyToDowngrade: readyToDowngrade,
                validPlanTimeRanges: validPlanTimeRanges,
                planPercentualPrice: planPercentualPrice,
                isRenewal: isRenewal,
                allowInstallmentPurchase: allowInstallmentPurchase,
                installmentValue: installmentValue,
                isNextPlanFree: isNextPlanFree,
                showQuestions: showQuestions,
                toggleAnswer: toggleAnswer,
                oneMoreDay: oneMoreDay,
                getUrlsLegacy: getUrlsLegacy,
            };

        _.extend(viewModel, publicMethods);

        init();
        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker(),
            };
            viewModel.urlLegacy = getUrlsLegacy();

            viewModel.data = {};

            viewModel.currentLicense =
                $scope.main.contextSource.currentEntity.currentLicense;

            /* jshint camelcase:false */
            viewModel.startDate = new Date(viewModel.currentLicense.start_date);
            viewModel.endDate = new Date(viewModel.currentLicense.end_date);

            var timeDiff = Math.abs(
                viewModel.endDate.getTime() - viewModel.startDate.getTime()
            );

            viewModel.diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
            viewModel.remainingDays = viewModel.currentLicense.remaining_days;
            viewModel.usedDays = viewModel.diffDays - viewModel.remainingDays;
            viewModel.extendedAt = viewModel.currentLicense.extended_at;

            if (validPeriodicity[StringsFactory.checkParamUrl('p')]) {
                viewModel.periodicityContent =
                    StringsFactory.checkParamUrl('p');
            } else {
                viewModel.periodicityContent = 'mensal';
            }

            viewModel.faqQuestions = _faqQuestions();

            _clearPeriodicityParam();
            viewModel.questions = false;
            viewModel.endTest = 37;


            viewModel.isPromotionWindow = window.isPromotionWindow;

            loadPlans();
        }
        function oneMoreDay() {
            /* jshint camelcase:false */
            var url = ContextFactory.getEndPointProccess({
                method: 'extend_trial',
                enums: 'subscriptions',
                replace: '',
                value: '',
            });
            var newDate = viewModel.endDate;
            newDate.setDate(newDate.getDate() + 1);
            var promise = CrudFactory.put(url, {
                subscriptions: { current_license: { end_date: newDate } },
            });
            promise.then(function () {
                viewModel.endDate = newDate;
                localStorage.setItem('openOneMoreDayDialog', true);
                $window.location.href = '/inicio';
            });
        }

        function showQuestions() {
            viewModel.questions = !viewModel.questions;
        }
        function toggleAnswer(index) {
            var time = viewModel.frequetQuestions[index].toggleQuestion === false ? 100 : 0;
            viewModel.frequetQuestions[index].questionClass = viewModel.frequetQuestions[index].questionClass === 'question_false' ? 'question_true' : 'question_false';
            $timeout(function () {
                viewModel.frequetQuestions[index].toggleQuestion =
                    !viewModel.frequetQuestions[index].toggleQuestion;
            }, time);
        }
        function getUrlsLegacy() {
            return {
                transactionExport: ContextFactory.getLegacyRoute(
                    'transactions_export_xls'
                ),
            };
        }
        function validPlanTimeRanges() {
            /* jshint camelcase:false */
            var plans = viewModel.data.plans;

            var planTimeRanges = plans[0].plan_time_ranges;

            var activePlanTimeRanges = _activePlans();

            var newPlanTimeRange = _.filter(planTimeRanges, function (ptr) {
                return (
                    !$scope.main.contextSource.currentEntity
                        .planTimeRangeActive &&
                    ptr.active &&
                    ptr.name ===
                    $scope.main.contextSource.currentEntity
                        .planTimeRangeName
                );
            });

            var currentPlanTimeRangeId =
                $scope.main.contextSource.currentEntity.planTimeRangeId;

            var currentPlanTimeRange = _.filter(planTimeRanges, function (ptr) {
                return ptr.id === currentPlanTimeRangeId;
            });

            if (
                _.isBlank(currentPlanTimeRange) ||
                _.isBlank(newPlanTimeRange) ||
                isRenewal() ||
                _onlyActivePlans(planTimeRanges)
            ) {
                return activePlanTimeRanges;
            }

            var validPlanTimeRanges = _.filter(planTimeRanges, function (ptr) {
                return (
                    ptr.id !== newPlanTimeRange[0].id &&
                    ptr.active &&
                    ptr.id !== currentPlanTimeRange[0].id
                );
            });

            validPlanTimeRanges.push(currentPlanTimeRange[0]);

            return validPlanTimeRanges;
        }

        function _onlyActivePlans(planTimeRanges) {
            var currentId =
                $scope.main.contextSource.currentEntity.planTimeRangeId,
                nextId =
                    $scope.main.contextSource.currentEntity.nextPlanTimeRangeId,
                currentPlanTimeRange = _.filter(planTimeRanges, function (ptr) {
                    return ptr.id === currentId;
                }),
                nextPlanTimeRange = _.filter(planTimeRanges, function (ptr) {
                    return ptr.id === nextId;
                });

            return (
                currentId !== nextId &&
                currentPlanTimeRange.name === nextPlanTimeRange.name
            );
        }

        function loadPlans() {
            var url = ContextFactory.getEndPoint('index'),
                promise = CrudFactory.getAll(url);

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                /* jshint camelcase:false */
                viewModel.data = resp.data;
            });
        }

        function changePeriodicity(periodicity) {
            viewModel.periodicityContent = periodicity;
        }

        function cancelSubscription() {
            /* jshint camelcase:false */
            Dialog.open({
                template: $filter('assetPath')(
                    'templates/modules/premium/templates/premium-downgrade-to-free.dialog.html'
                ),
                closeByDocument: false,
                showClose: false,
                controller: 'zze.premium.premiumDowngradeCtrl',
                controllerAs: 'premiumDowngrade',
                width: 615,
                className: 'ngdialog theme-organizze downgrade-dialog',
                scope: $scope,
            });
        }

        function readyToDowngrade() {
            /* jshint camelcase:false */
            return (
                !$scope.main.isAccountFree &&
                !viewModel.data.have_pending_cancellation
            );
        }

        function planPercentualPrice() {
            /* jshint camelcase:false */
            var activePlanTimeRanges = _activePlans();

            var monthValue = 0;
            var annualValue = 0;


            if (!_.isBlank(activePlanTimeRanges)) {

                _.find(activePlanTimeRanges, function (plan) {
                    if (plan.active) {

                        if (plan.name === 'mensal') {
                            monthValue = (plan.value_in_cents * 12) / 100;

                        } else if (plan.name === 'anual') {
                            var value = plan.on_promotion ? plan.promotion_value_in_cents : plan.value_in_cents;
                            annualValue = (value / 100);

                        }
                    }
                });
            } else {
                MessageFactory.setFlash(
                    'Ops! Ocorreu um erro no carregamento dos planos. Atualize a página para resolver.',
                    'error'
                );
            }

            var percentualDifference = (
                ((monthValue - annualValue) * 100) /
                monthValue
            ).toFixed(2);

            return percentualDifference;
        }

        function isNextPlanFree() {
            /* jshint camelcase:false */
            if (!viewModel.data) {
                return;
            }

            return viewModel.data.next_plan === 'free';
        }

        function isRenewal() {
            /* jshint camelcase:false */
            if (!viewModel.data) {
                return;
            }

            return isNextPlanFree() && !$scope.main.isAccountFree;
        }

        function _clearPeriodicityParam() {
            setTimeout(function () {
                StringsFactory.cleanParamsUrl();
            }, 100);
        }

        function allowInstallmentPurchase(plan) {
            /* jshint camelcase:false */
            return plan.max_installments > 1;
        }

        function installmentValue(plan) {
            /* jshint camelcase:false */
            if (allowInstallmentPurchase(plan)) {
                if (plan.on_promotion) {
                    return (
                        plan.promotion_value_in_cents /
                        100 /
                        plan.max_installments
                    )
                        .toFixed(2)
                        .toString()
                        .replace('.', ',');
                }
                return (plan.value_in_cents / 100 / plan.max_installments)
                    .toFixed(2)
                    .toString()
                    .replace('.', ',');
            }
        }

        function _activePlans() {
            /* jshint camelcase:false */
            var plans = viewModel.data.plans;

            var activePlanTimeRanges = [];

            if (!_.isBlank(plans)) {
                var planTimeRanges = plans[0].plan_time_ranges;

                activePlanTimeRanges = _.filter(planTimeRanges, function (ptr) {
                    return ptr.active;
                });
            }

            return activePlanTimeRanges;
        }

        function _faqQuestions() {
            return [
                {
                    question: 'Posso cancelar a assinatura a qualquer momento?',
                    answer: 'Você pode cancelar sua assinatura a qualquer momento. E ainda, se estiver dentro do período de 7 dias após a confirmação do primeiro pagamento, você pode solicitar o reembolso total do valor da pago.',
                },
                {
                    question: 'A assinatura se renova automaticamente?',
                    answer: 'Sim. A cobrança no cartão de crédito não é necessário ação alguma sua. Assinaturas via boleto é gerado um novo boleto ao término de cada ciclo de pagamento.',
                },
                {
                    question: 'Posso testar o app de forma gratuita de novo?',
                    answer: 'Sim. Assim que o período de 7 dias acabar, você tem direito a testar o Organizze por mais 1 dia. Depois desse período, precisa aguardar 90 dias para poder testar novamente.',
                },
                {
                    question: 'Posso acessar o Organizze pelo celular?',
                    answer: 'Sim. Você pode acessar sua conta de qualquer celular, tablet ou computador. Para isso, baixe o app do Organizze no seu celular e utilize o mesmo e-mail e senha na hora de logar.',
                },
                {
                    question: 'Quais são as formas de pagamento aceitas?',
                    answer: 'Para a assinatura mensal, aceitamos pagamentos apenas via cartão de crédito. Para os outros planos aceitamos também pagamentos por boleto.',
                },
                {
                    question:
                        'Após o pagamento, quanto tempo leva para liberar o Organizze?',
                    answer: 'A assinatura realizada no cartão de crédito tem a liberação instantânea. Com Boleto, a confirmação do pagamento pode levar até 48 horas.',
                },
            ];
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.popupEmailValidation')
        .controller('zze.popupEmailValidation.PopupEmailValidationDialogCtrl', popupEmailValidationDialogCtrl);

    popupEmailValidationDialogCtrl.$inject = ['$injector', '$scope'];
    function popupEmailValidationDialogCtrl ($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
                updateEmail: updateEmail,
                newFeedback: newFeedback
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.email = null;
            FocusFactory.setFocus('#valid-email');
        }

        function updateEmail() {
            var url = ContextFactory.getEndPoint('update_email', 'email_validation'),
            promise = CrudFactory.put(url, {email: viewModel.email});
            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                if (!resp.data.errors) {
                    MessageFactory.setFlash('Email atualizado com sucesso', 'success');
                    $scope.closeThisDialog();
                }
            });
        }

        function newFeedback() {
            $scope.closeThisDialog();
            window.location = window.location.origin + "#popup=/feedback/new";
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.popupEmailValidation')
        .controller('zze.popupEmailValidation.popupEmailValidationCtrl', popupEmailValidationCtrl);

    popupEmailValidationCtrl.$inject = ['$injector'];

    function popupEmailValidationCtrl ($injector) {
        /* jshint validthis:true */
        var viewModel = this,

            $filter = $injector.get('$filter'),
            Dialog = $injector.get('ngDialog'),

            publicMethods = {

            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
          openPopup();
        }

        function openPopup () {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/popup-email-validation/templates/popup-email-validation-dialog.html'),
                controller: 'zze.popupEmailValidation.PopupEmailValidationDialogCtrl',
                controllerAs: 'emailValidationDialog',
                className: 'ngdialog theme-organizze email-validation-dialog',
                width: 520,
                closeByDocument: false
            });
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.activities')
        .controller('zze.activities.ActivitiesCtrl', activitiesCtrl);

    activitiesCtrl.$inject = ['$injector', '$scope'];

    function activitiesCtrl ($injector, $scope) {
        /* jshint validthis:true */

        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            $filter = $injector.get('$filter'),

            publicMethods = {
                showActivityDetails: showActivityDetails,
                showPagination: showPagination,

                getActivities: getActivities,
                getPopoverConfig: getPopoverConfig,
                getAccountsToExternal: getAccountsToExternal,
                getCategoriesToExternal: getCategoriesToExternal,
                getUsersToExternal: getUsersToExternal,
                getCategorySelected: getCategorySelected,

                setAccount: setAccount,
                setCategory: setCategory,
                setUser: setUser,

                clearActivitiesFilter: clearActivitiesFilter,

                applyHighlight: applyHighlight,
                goToPage: goToPage,
                pageNumberAvailableToShow: pageNumberAvailableToShow,
                currencyMasked: currencyMasked,
                configBarFilters: configBarFilters,

                checkCategorySelected: checkCategorySelected,
                formatHourBrazil: formatHourBrazil
            },

            popoversConfig = {
                filterUser: {
                    reCalcTop: -17,
                    width: 210,
                    overflowY: 'auto',
                    template: $filter('assetPath')('templates/modules/settings/activities/templates/activities-filter-user.template.html')
                },
                filterCategory: {
                    reCalcTop: -17,
                    width: 210,
                    overflowY: 'auto',
                    template: $filter('assetPath')('templates/modules/settings/activities/templates/activities-filter-category.template.html')
                },
                filterAccount: {
                    reCalcTop: -17,
                    width: 210,
                    overflowY: 'auto',
                    template: $filter('assetPath')('templates/modules/settings/activities/templates/activities-filter-account.template.html')
                }
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

            $scope.main.setContentClass("settings categories");

            viewModel.tracker = {
                loadPage: PromiseTracker(),
                loadFilter: PromiseTracker()
            };

            viewModel.data = {
                categories: [],
                accounts: [],
                users: []
            };

            viewModel.model = {
                account: {
                    uuid: 0
                },
                categories: [],
                user: {
                    uuid: 0
                }
            };

            viewModel.sessionStorageKeys = {
                activitiesCurrentPageNumber: 'activitiesCurrentPageNumber-' + $scope.main.contextSource.currentEntity.id,
                activitiesFilterAccount: 'activitiesFilterAccount-' + $scope.main.contextSource.currentEntity.id,
                activitiesFilterCategories: 'activitiesFilterCategories-' + $scope.main.contextSource.currentEntity.id,
                activitiesFilterUser: 'activitiesFilterUser-' + $scope.main.contextSource.currentEntity.id
            };

            _checkSessionStorage();
            getActivities('loadPage', 1);

            document.title = "Organizze | Atividades";
        }


        function showActivityDetails (activity) {
            if (activity.openedDetails) {
                activity.openedDetails = false;
            } else {
                activity.openedDetails = true;
            }
            angular.element('#details-'+activity.id).slideToggle(300);
        }


        function showPagination () {
            /* jshint camelcase:false */
            return viewModel.data.page_quantity > 1 ? true : false;
        }

        function getActivities (trackerName, pageNum) {
            var pageNumber = pageNum || localStorage.getItem(viewModel.sessionStorageKeys.activitiesCurrentPageNumber) || 1;
            var url = ContextFactory.getEndPoint('index');

            var pageParam = "?page=" + pageNumber;

            if (viewModel.model.account.uuid !== 0) {
                pageParam = pageParam + "&account_uuid=" + viewModel.model.account.uuid;
            }
            if (viewModel.model.categories.length !== 0) {
                pageParam = pageParam + "&category_id=" + viewModel.model.categories[0];
            }

            var promise = CrudFactory.getAll(url + pageParam);

            viewModel.tracker[trackerName].addPromise(promise);

            promise.then(function (resp) {
                _checkSessionStorage();

                viewModel.data = resp.data;

                viewModel.currentPageNumber = parseInt(pageNumber);

                _getCategories('activities');
                _getAccounts('activities');

                _checkStatusFilter();
            });

            localStorage.removeItem(viewModel.sessionStorageKeys.activitiesCurrentPageNumber);
        }


        function getPopoverConfig (key) {
            return popoversConfig[key];
        }


        function getAccountsToExternal () {
            return viewModel.data.accounts;
        }

        function getCategoriesToExternal () {
            return viewModel.data.categories;
        }


        function getUsersToExternal() {
            return viewModel.data.users;
        }


        function getCategorySelected () {
            var len = viewModel.model.categories.length;

            if (len === 0) {
                return 'Categorias';
            }
            else {
                var category = len > 1 ? (len + ' categorias') : _checkNameCategory();

                return len === 1 ? category.name : category;
            }

        }


        function setAccount (item) {
            viewModel.model.account = item;

            // Receive zero (0).
            if (!item.uuid) {
                sessionStorage.removeItem(viewModel.sessionStorageKeys.activitiesFilterAccount);
            }
            else {
                sessionStorage.setItem(viewModel.sessionStorageKeys.activitiesFilterAccount, JSON.stringify(item));
            }

            getActivities('loadFilter', 1);
        }


        function setCategory (item) {

            viewModel.model.categories = [];

            sessionStorage.removeItem(viewModel.sessionStorageKeys.activitiesFilterCategories);

            if (!item) {
                viewModel.model.categories = [];
                sessionStorage.removeItem(viewModel.sessionStorageKeys.activitiesFilterCategories);

                getActivities('loadFilter', 1);

                return;
            }

            var isChecked = checkCategorySelected(item.id),
                arr;

            if (isChecked) {
                arr = _.filter(angular.copy(viewModel.model.categories), function (data) {
                    return data !== item.id;
                });
            }
            else {
                var items = [];

                items.push(item.id);
                items.push(item.name);
                items.push(item.uuid);

                arr = _.union(angular.copy(viewModel.model.categories), items);
            }

            viewModel.model.categories = arr;
            sessionStorage.setItem(viewModel.sessionStorageKeys.activitiesFilterCategories, JSON.stringify(arr));

            getActivities('loadFilter', 1);
        }

        function setUser (item) {
            viewModel.model.user = item;

            // Receive zero (0).
            if (!item.uuid) {
                sessionStorage.removeItem(viewModel.sessionStorageKeys.activitiesFilterUser);
            }
            else {
                sessionStorage.setItem(viewModel.sessionStorageKeys.activitiesFilterUser, JSON.stringify(item));
            }

            getActivities('loadFilter', 1);
        }


        function clearActivitiesFilter () {
            viewModel.model.categories = [];

            sessionStorage.removeItem(viewModel.sessionStorageKeys.activitiesFilterCategories);
            sessionStorage.removeItem(viewModel.sessionStorageKeys.activitiesFilterAccount);
            sessionStorage.removeItem(viewModel.sessionStorageKeys.activitiesFilterUser);


            viewModel.model = {
                account: {
                    uuid: 0
                },
                categories: [],
                user: {
                    uuid: 0
                }
            };


            getActivities('loadPage', 1);
        }


        function applyHighlight (beforeChange, afterChange) {
            return beforeChange !== afterChange;
        }


        function goToPage (pageNumber) {
            getActivities('loadFilter', pageNumber);
        }


        function pageNumberAvailableToShow (number) {
            return number < (viewModel.currentPageNumber + 5) && number > (viewModel.currentPageNumber - 5);
        }


        function currencyMasked (value) {
            var currency = value / 100.0;
            return CurrencyFactory.getCurrencyMasked(currency, $scope.main.contextSource.currency, true);
        }


        function configBarFilters () {
            return {
                ctrl: 'activities',
                getDataSearch: 'getActivities',
                clearDataFilter: 'clearActivitiesFilter',
                // trackerName: 'loadFilter',
                showSearch: false,
                filterOpen: true
            };
        }


        function checkCategorySelected (uuid) {
            return _.contains(viewModel.model.categories, uuid);
        }


        function _checkNameCategory () {
            var itemArr = [];

            for (var i=0, len = viewModel.data.categories.length; i<len; i++) {
                var category = viewModel.data.categories[i];

                if (category.id === viewModel.model.categories[0]) {
                    itemArr = category;
                    break;
                }

                if (category.children) {

                    for (var j=0, lenC=category.children.length; j<lenC; j++) {
                        var children = category.children[j];

                        if (children.id === viewModel.model.categories[0]) {
                            itemArr = children;
                            break;
                        }
                    }
                }
            }

            return itemArr;
        }

        function _getAccounts () {
            var url = ContextFactory.getEndPoint('index', 'accounts'),

                /* jshint camelcase:false */
            promise = CrudFactory.getAll(url, {
                params: {
                    without_balances: '1',

                    // Remove this params.
                    /* jshint camelcase:false */
                    entity_id: $scope.main.contextSource.currentEntity.id,
                    user_id: $scope.main.contextSource.currentUser.id
                }
            });

            promise.then(function (resp) {
                viewModel.data.accounts = resp.data;
            });
        }


        function _getCategories () {
            var url = ContextFactory.getEndPoint('create', 'categories'),
                promise = CrudFactory.getAll(url + '.json');

            promise.then(function (resp) {
                viewModel.data.categories = resp.data;
            });
        }

        function _checkSessionStorage () {
            if (sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterCategories)) {
                viewModel.model.categories = JSON.parse(sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterCategories));
            }
            if (sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterAccount)) {
                viewModel.model.account = JSON.parse(sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterAccount));
            }
            if (sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterUser)) {
                viewModel.model.user = JSON.parse(sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterUser));
            }
        }

        function _checkStatusFilter () {
            if (!$scope.barFilters) {
                return false;
            }

            $scope.barFilters.status.filterOpen = false;

            if (sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterCategories) ||
                sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterAccount) ||
                sessionStorage.getItem(viewModel.sessionStorageKeys.activitiesFilterUser)) {

                $scope.barFilters.status.filterOpen = true;
            }
        }

        function formatHourBrazil (date) {
            var dateFormat = date.split(':').join('h');
            return dateFormat;
        }
    }

})();

(function () {
    'use strict';

    angular.module('zze.billings')
        .controller('zze.billings.cadCreditCardCtrl', cadCreditCardCtrl);

    cadCreditCardCtrl.$inject = ['$injector', '$scope'];

    function cadCreditCardCtrl($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,
            /* jshint camelcase:false */
            isNewRegister = $scope.ngDialogData.item ? false : true,

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            BillingsFactory = $injector.get('zze.billings.billingsFactory'),
            $filter = $injector.get('$filter'),

            publicMethods = {
                getTitleDialog: getTitleDialog,
                isCreditCardPresent: isCreditCardPresent,
                creditCardNumber: creditCardNumber,
                detectCardBrand: detectCardBrand,
                save: save,
                getCreditCardIconUrl: getCreditCardIconUrl
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            if (!isNewRegister) {
                viewModel.data = {
                    /* jshint camelcase:false */
                    credit_card: {
                        /* jshint camelcase:false */
                        brand: $scope.ngDialogData.item.credit_card.brand,
                        /* jshint camelcase:false */
                        number: undefined,
                        /* jshint camelcase:false */
                        expire_date: $scope.ngDialogData.item.credit_card.expire_date,
                        /* jshint camelcase:false */
                        expire_month: $scope.ngDialogData.item.credit_card.expire_month,
                        /* jshint camelcase:false */
                        expire_year: $scope.ngDialogData.item.credit_card.expire_year
                    },

                    /* jshint camelcase:false */
                    current_credit_card: {
                        /* jshint camelcase:false */
                        number: $scope.ngDialogData.item.credit_card.number,
                        /* jshint camelcase:false */
                        brand: $scope.ngDialogData.item.credit_card.brand
                    }
                };
            } else {
                viewModel.data = {
                    /* jshint camelcase:false */
                    credit_card: {
                        brand: undefined,
                        number: undefined,
                        /* jshint camelcase:false */
                        expire_date: undefined,
                        /* jshint camelcase:false */
                        expire_month: undefined,
                        /* jshint camelcase:false */
                        expire_year: undefined
                    }
                };
            }

            viewModel.tracker = {
                loadHeader: PromiseTracker()
            };

            _getCreditCardBrandsAll();
            _months();
            _years();

            if (isNewRegister) {
                FocusFactory.setFocus('#number');
            }
        }

        function getTitleDialog() {
            return isNewRegister ? $filter('translate')('billings.paymentModal.new') : $filter('translate')('billings.paymentModal.edit');
        }

        function isCreditCardPresent() {
            return isNewRegister;
        }

        function creditCardNumber(item) {
            /* jshint camelcase:false */
            return item.number.slice(-4);
        }

        function save() {
            var url = '',
                promise,
                message = isNewRegister ? 'Cartão criado com sucesso' : 'Cartão atualizado com sucesso',
                hasError = MessageFactory.checkError(viewModel.form.$error);

            if (hasError) {
                return;
            }

            if (isNewRegister) {
                url = ContextFactory.getEndPoint('create', 'billable_credit_cards');
                promise = CrudFactory.post(url, viewModel.data);
            } else {
                url = ContextFactory.getEndPointProccess({
                    method: 'update',
                    replace: ':id',
                    enums: 'billable_credit_cards',
                    /* jshint camelcase:false */
                    value: $scope.ngDialogData.item.credit_card.id
                });

                promise = CrudFactory.put(url, viewModel.data);
            }

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                var callback = $scope.ngDialogData.options;

                if (isNewRegister) {
                    $scope.$parent[callback.ctrl][callback.save](resp.data);
                } else {
                    $scope.$parent[callback.ctrl][callback.edit](resp.data);
                }

                MessageFactory.setFlash(message, 'success');

                $scope.closeThisDialog();
            });
        }

        function _getCreditCardBrandsAll() {
            var url = ContextFactory.getEndPoint('brands', 'billable_credit_cards');

            CrudFactory.getOne(url).then(function (resp) {
                viewModel.creditCardBrands = resp.data;
            });
        }

        function detectCardBrand(cardNumber) {
            /* jshint camelcase:false */
            if (cardNumber) {
                viewModel.data.credit_card.brand = BillingsFactory.detectCardBrand(cardNumber);
            } else {
                viewModel.data.credit_card.brand = undefined;
            }
        }

        function _months() {
            var months = [],
                monthNames = [
                    '1 - Janeiro',
                    '2 - Fevereiro',
                    '3 - Março',
                    '4 - Abril',
                    '5 - Maio',
                    '6 - Junho',
                    '7 - Julho',
                    '8 - Agosto',
                    '9 - Setembro',
                    '10 - Outubro',
                    '11 - Novembro',
                    '12 - Dezembro'
                ];

            for (var i = 0; i < monthNames.length; i++) {
                months.push({key: i + 1, title: monthNames[i]});
            }

            viewModel.months = months;
        }

        function _years() {
            var years = [],
                currYear = new Date().getFullYear();

            for (var i = 0; i < 20; i++) {
                years.push({key: currYear + i, title: currYear + i});
            }

            viewModel.years = years;
        }

        function getCreditCardIconUrl(brand) {
            if (!brand) { brand = "default"; }

            return $filter('assetPath')('images/application/credit_cards/' + brand + '.jpg');
        }

    }
})();

(function () {
    'use strict';

    angular.module('zze.billings')
        .controller('zze.billings.PaymentHistoryCtrl', PaymentHistoryCtrl);

    PaymentHistoryCtrl.$inject = ['$injector', '$scope'];

    function PaymentHistoryCtrl($injector, $scope) {
        /*jshint validthis:true */
        var viewModel = this,
            PromiseTracker = $injector.get('promiseTracker'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),

            publicMethods = {
                getCurrencyMasked: getCurrencyMasked,
                isEmpty: isEmpty
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = $scope.ngDialogData;
        }

        function getCurrencyMasked(value, symbol) {
            return CurrencyFactory.getCurrencyMasked(value, $scope.main.contextSource.currency, symbol);
        }

        function isEmpty() {
            return _.isBlank(viewModel.data);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.billings')
        .controller('zze.billings.PlansCtrl', plansCtrl);

    plansCtrl.$inject = ['$injector', '$scope'];

    function plansCtrl ($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,

            $filter = $injector.get('$filter'),
            Dialog = $injector.get('ngDialog'),
            $timeout = $injector.get('$timeout'),

            publicMethods = {
              paymentUrl: getPaymentUrl,
              isCurrentPlan: isCurrentPlan,
              close: close,
              cancelSubscription: cancelSubscription,
              openResourcesDialog: openResourcesDialog,
              sanitizePrice: sanitizePrice,
              validPlanTimeRanges: validPlanTimeRanges,
              readyToDowngrade: readyToDowngrade,
              allowInstallmentPurchase: allowInstallmentPurchase,
              installmentValue: installmentValue,
              isSubscriptionCanceled: isSubscriptionCanceled
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.data = $scope.ngDialogData;
        }

        function validPlanTimeRanges () {
            /* jshint camelcase:false */
            var plans = viewModel.data.plans;

            var currentPlanTimeRangeId = $scope.ngDialogData.current_license.plan_time_range_id;
            var planTimeRanges = plans[0].plan_time_ranges;

            var activePlanTimeRanges = _.filter(planTimeRanges, function (ptr) {
                return ptr.active;
            });

            var currentPlanTimeRange = _.filter(planTimeRanges, function (ptr) {
                return ptr.id === currentPlanTimeRangeId;
            });

            var newPlanTimeRange = _.filter(planTimeRanges, function (ptr) {
                return !$scope.ngDialogData.current_license.active &&
                        ptr.active &&
                        ptr.name === $scope.ngDialogData.current_license.plan_time_range_name;
            });

            if (_.isBlank(currentPlanTimeRange) || _.isBlank(newPlanTimeRange)) {
                return activePlanTimeRanges;
            }

            var validPlanTimeRanges = _.filter(planTimeRanges, function (ptr) {
                return ptr.id !== newPlanTimeRange[0].id &&
                ptr.active &&
                ptr.id !== currentPlanTimeRange[0].id;
            });

            validPlanTimeRanges.push(currentPlanTimeRange[0]);

            return validPlanTimeRanges;
        }

        function getPaymentUrl (plan, planTimeRange) {
            return "/" + viewModel.data.currentEntityId + "/planos/" + plan.id + "/pagamentos/novo?p=" + planTimeRange.name;
        }

        function isCurrentPlan (plan, planTimeRange) {
            /* jshint camelcase:false */
            return plan.name === viewModel.data.current_plan.name && planTimeRange.name === viewModel.data.current_license.plan_time_range_name;
        }

        function openResourcesDialog() {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/billings/templates/resources.dialog.html'),
                className: 'ngdialog theme-organizze resources-comparation',
                width: 500
            });
        }

        function isSubscriptionCanceled() {
            /* jshint camelcase:false */
            if (!viewModel.data) { return false; }

            return viewModel.data.subscription.status === "canceled";
        }

        function sanitizePrice (value) {
            return value;
        }

        function readyToDowngrade () {
            /* jshint camelcase:false */
            return !viewModel.data.isAccountFree && !viewModel.data.have_pending_cancellation;
        }

        function allowInstallmentPurchase (plan) {
            /* jshint camelcase:false */
            return plan.max_installments > 1;
        }

        function installmentValue (plan) {
            /* jshint camelcase:false */
            if (allowInstallmentPurchase(plan)) {
                if (plan.on_promotion) {
                    return ((plan.promotion_value_in_cents/100)/plan.max_installments).toFixed(2).toString().replace('.',',');
                }

                return ((plan.value_in_cents/100)/plan.max_installments).toFixed(2).toString().replace('.',',');
            }
        }

        function cancelSubscription () {
            /* jshint camelcase:false */
            close();
            $timeout(function () {
                Dialog.open({
                    template: $filter('assetPath')('templates/modules/settings/cancellations/templates/cancellation-form.dialog.html'),
                    controller: 'zze.cancellations.CancellationFormCtrl',
                    controllerAs: 'cancellations',
                    className: 'ngdialog theme-organizze cancellation-dialog',
                    width: 500
                });
            }, 4);
        }

        function close() {
          $scope.closeThisDialog();
        }

    }
})();

(function () {
    'use strict';

    angular.module('zze.billings')
        .controller('zze.billings.CancelSubscriptionCtrl', cancelSubscriptionCtrl)
        .directive('autoFocus', autoFocus);

    cancelSubscriptionCtrl.$inject = ['$injector', '$scope'];

    autoFocus.$inject = ['$injector'];

    function autoFocus ($injector) {
        var $timeout = $injector.get('$timeout');
        return {
            restrict: 'AC',
            link: function(scope, element) {
                $timeout(function(){
                    element[0].focus();
                }, 150);
            }
        };
    }

    function cancelSubscriptionCtrl($injector, $scope) {
        /*jshint validthis:true */
        var viewModel = this,
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            $filter = $injector.get('$filter'),
            $state = $injector.get('$state'),
            $timeout = $injector.get('$timeout'),
            $q = $injector.get('$q'),

            submitDeferred = $q.defer(),

            publicMethods = {
                formattedEndDate: formattedEndDate,
                isButtonDisabled: isButtonDisabled,
                submit: submit,
                isAppStoreSubscription: isAppStoreSubscription
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            $scope.main.setContentClass("settings billings");

            viewModel.tracker = PromiseTrackerService.create([
                'loadBillings',
                'loadPage'
            ]);

            viewModel.churnReason=null;
            viewModel.churnReasonContentNoFit = '';
            viewModel.churnReasonContentOther = '';

            _loadBillings();
        }

        function isButtonDisabled() {
            if (viewModel.churnReason === null) {
                return true;
            } else if (viewModel.churnReason === 'planilha' || viewModel.churnReason === 'no-control') {
                return false;
            } else {
                if (viewModel.churnReason === 'no-fit') {
                    return (viewModel.churnReasonContentNoFit === '');
                } else if (viewModel.churnReason === 'other') {
                    return (viewModel.churnReasonContentOther === '');
                } else {
                    return true;
                }
            }
        }

        function submit() {

            viewModel.tracker.loadBillings.addPromise(submitDeferred.promise);

            $timeout(function() {
                _cancelSubscription();
            }, 5000);

            return;
        }

        function formattedEndDate() {
            /* jshint camelcase:false */
            var endDate = $scope.main.contextSource.currentEntity.currentLicense.end_date;
            return moment(endDate).format("DD [de] MMMM [de] YYYY");
        }

        function isAppStoreSubscription() {
            /* jshint camelcase:false */
            if (!viewModel.data) { return; }

            return viewModel.data.subscription.payment_method === "appstore";
        }


        function _loadBillings() {
            var url = ContextFactory.getEndPoint('index', 'billings'),
                promise = CrudFactory.getAll(url);

            viewModel.tracker.loadBillings.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = resp.data;
            });
        }

        function _cancelSubscription() {
            var url = ContextFactory.getEndPoint('cancel', 'subscriptions'),
                userFeedbackParams = {};

            if (viewModel.churnReason) {
                userFeedbackParams.churnReason = viewModel.churnReason;
                if (viewModel.churnReason === 'no-fit') {
                    userFeedbackParams.churnReasonContent = viewModel.churnReasonContentNoFit;
                } else if (viewModel.churnReason === 'other') {
                    userFeedbackParams.churnReasonContent = viewModel.churnReasonContentOther;
                }
            }

            /* jshint camelcase:false */
            var promise = CrudFactory.post(url, {user_feedback: userFeedbackParams});

            promise.then(function () {
                if (isAppStoreSubscription()) {
                    $state.go('settings.cancel-subscription-appstore');
                } else {
                    var message = $filter('translate')('billings.cancelSubscription.success');
                    MessageFactory.setFlash(message, 'success');
                    $state.go('settings.cancel-subscription-success');
                }
                $timeout(function() {
                    submitDeferred.resolve();
                }, 300);
            }).catch(function () {
                submitDeferred.reject();
                var message = $filter('translate')('billings.cancelSubscription.error');
                MessageFactory.setFlash(message, 'error');
            });
        }

    }
})();

(function () {
    'use strict';

    angular.module('zze.billings')
        .controller('zze.billings.BillingsCtrl', BillingsCtrl);

    BillingsCtrl.$inject = ['$injector', '$scope', '$timeout'];

    function BillingsCtrl($injector, $scope, $timeout) {
        /* jshint validthis:true */
        var viewModel = this,
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            $filter = $injector.get('$filter'),
            $state = $injector.get('$state'),
            Dialog = $injector.get('ngDialog'),

            publicMethods = {
                getCurrencyMasked: getCurrencyMasked,
                creditCardNumber: creditCardNumber,
                subscriptionEndDate: subscriptionEndDate,
                changePaymentView: changePaymentView,
                paymentHistory: paymentHistory,
                licensePercentage: getLicensePercentage,
                formatPlanValue: formatPlanValue,

                cancelSubscription: cancelSubscription,
                confirmCancelSubscription: confirmCancelSubscription,
                confirmDefaultPaymentMethod: confirmDefaultPaymentMethod,
                setDefaultPaymentMethod: setDefaultPaymentMethod,

                getCurrencySymbol: getCurrencySymbol,
                dialogCadCreditCard: dialogCadCreditCard,
                confirmDeleteCreditCard: confirmDeleteCreditCard,
                deleteCreditCard: deleteCreditCard,
                creditCardPresent: creditCardPresent,
                cadCreditCard: cadCreditCard,
                updateCreditCard: updateCreditCard,
                openPlansDialog: openPlansDialog,
                getCreditCardIconUrl: getCreditCardIconUrl,
                getPaymentUrl: getPaymentUrl,
                getPlansByName: getPlansByName,
                isRenewal: isRenewal,
                isSubscriptionCanceled: isSubscriptionCanceled,

                getPlanPrice: getPlanPrice,
                currentPlanRange: currentPlanRange,
                getDifferenceValue: getDifferenceValue,
                dateCreditInvoice: dateCreditInvoice,
                isAppStoreSubscription: isAppStoreSubscription,
                toggleAnswer: toggleAnswer,
                showQuestions: showQuestions
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {

            $scope.main.setContentClass("settings billings");

            viewModel.tracker = PromiseTrackerService.create([
                'loadBillings'
            ]);
            viewModel.faqQuestions = _faqQuestions();

            viewModel.progressBarWidth = "98%";
            viewModel.paymentURL = "/"+$scope.main.contextSource.currentEntity.id+"/planos/plus/pagamentos/novo";

            _loadBillings();

            document.title = "Organizze";
        }

        function toggleAnswer(index) {
            var time = viewModel.frequetQuestions[index].toggleQuestion === false ? 100 : 0;
            viewModel.frequetQuestions[index].questionClass = viewModel.frequetQuestions[index].questionClass === "question_false" ? "question_true" : "question_false";
            $timeout(function () {
                viewModel.frequetQuestions[index].toggleQuestion = !viewModel.frequetQuestions[index].toggleQuestion;
            }, time);
        }

        function showQuestions() {
            viewModel.questions = !viewModel.questions;
        }

        function getCurrencySymbol() {
            return $scope.main.contextSource.currency.symbol;
        }

        function getCurrencyMasked(value) {
            return $filter('zzeMaskCurrency')({
                value: value,
                symbol: '',
                precision: value % 1 > 0 ? 2 : 0,
                /* jshint camelcase:false */
                thousands_separator: $scope.main.contextSource.currency.thousands_separator,
                /* jshint camelcase:false */
                decimal_mark: $scope.main.contextSource.currency.decimal_mark
            });
        }

        function creditCardNumber(item) {
            return item.number.slice(-4);
        }

        function paymentHistory() {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/billings/templates/_payment-history.dialog.html'),
                controller: 'zze.billings.PaymentHistoryCtrl',
                controllerAs: 'paymentHistory',
                scope: $scope,
                width: 660,
                showClose: true,
                closeByNavigation: false,
                closeByDocument: false,
                /* jshint camelcase:false */
                data: viewModel.data.visible_licenses
            });
        }

        function subscriptionEndDate() {
            if (viewModel.data.subscription.status === 'canceled') {
                /* jshint camelcase:false */
                return 'Fim da licença: ' + $filter('date')(viewModel.data.current_license.end_date, 'dd/MM/yyyy');
            } else {
                /* jshint camelcase:false */
                return 'Próxima cobrança: ' + $filter('date')(viewModel.data.current_license.end_date, 'dd/MM/yyyy');
            }
        }

        function changePaymentView(type) {
            /* jshint camelcase:false */
            viewModel.data.paymentView = type;
        }

        function confirmCancelSubscription() {
            Dialog.open({
                template: isAppStoreSubscription() ?
                    $filter('assetPath')('templates/modules/settings/billings/templates/_cancel-appstore-subscription.dialog.html') :
                    $filter('assetPath')('templates/modules/settings/billings/templates/_confirm-cancel-subscription.dialog.html'),
                controller: 'zze.billings.ConfirmCtrl',
                controllerAs: 'confirm',
                scope: $scope,
                width: 446,
                showClose: false,
                closeByNavigation: false,
                closeByDocument: false,
                data: viewModel.data
            });
        }

        function cancelSubscription() {
            var url = ContextFactory.getEndPointProccess({
                enums: 'subscriptions',
                method: 'destroy',
                replace: ':id',
                value: viewModel.data.subscription.id
            });

            var promise = CrudFactory.destroy(url);

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function () {
                var message = $filter('translate')('billings.cancelSubscription.success');
                MessageFactory.setFlash(message, 'success');
                $state.reload();
            }).catch(function () {
                var message = $filter('translate')('billings.cancelSubscription.error');
                MessageFactory.setFlash(message, 'error');
            });
        }

        function confirmDeleteCreditCard() {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/billings/templates/_confirm-delete-credit-card.dialog.html'),
                controller: 'zze.billings.ConfirmCtrl',
                controllerAs: 'confirm',
                scope: $scope,
                width: 420,
                showClose: false,
                closeByNavigation: false,
                closeByDocument: false,
            });
        }

        function dialogCadCreditCard(item) {
            Dialog.open({
                scope: $scope,
                template: $filter('assetPath')('templates/modules/settings/billings/templates/_update-card.dialog.html'),
                controller: 'zze.billings.cadCreditCardCtrl',
                controllerAs: 'billingsCadCreditCard',
                width: 470,
                data: {
                    item: item,
                    options: {
                        ctrl: 'billings',
                        save: 'cadCreditCard',
                        edit: 'updateCreditCard'
                    }
                }
            });
        }

        function cadCreditCard(data) {
            /* jshint camelcase:false */
            viewModel.data.credit_card = data.credit_card;
            viewModel.data.subscription = data.subscription;
        }

        function updateCreditCard(data) {
            /* jshint camelcase:false */
            viewModel.data.credit_card = data.credit_card;
            viewModel.data.subscription = data.subscription;
        }

        function deleteCreditCard(item) {
            var data = item,
                url = ContextFactory.getEndPointProccess({
                    enums: 'billable_credit_cards',
                    method: 'destroy',
                    replace: ':id',
                    /* jshint camelcase:false */
                    value: data.credit_card.id
                });

            var promise = CrudFactory.destroy(url);

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                /* jshint camelcase:false */
                viewModel.data.credit_card = {};
                viewModel.data.subscription = resp.data.subscription;
                MessageFactory.setFlash('Cartão excluído!', 'success');
            });
        }

        function confirmDefaultPaymentMethod(item, paymentMethod) {
            /* jshint camelcase:false */
            if (viewModel.data.current_license.periodicity === 'mês' && paymentMethod === 'boleto') {
                Dialog.open({
                    template: $filter('assetPath')('templates/modules/settings/billings/templates/billings-unsupported-plan.dialog.html'),
                    controller: 'zze.billings.ConfirmCtrl',
                    controllerAs: 'confirm',
                    scope: $scope,
                    width: 420,
                    showClose: false,
                    closeByNavigation: false,
                    closeByDocument: false
                });
            } else {
                Dialog.open({
                    template: $filter('assetPath')('templates/modules/settings/billings/templates/_confirm-payment-method-update.dialog.html'),
                    controller: 'zze.billings.ConfirmCtrl',
                    controllerAs: 'confirm',
                    scope: $scope,
                    width: 420,
                    showClose: false,
                    closeByNavigation: false,
                    closeByDocument: false,
                    data: {
                        item: item,
                        paymentMethod: paymentMethod
                    }
                });
            }
        }

        function setDefaultPaymentMethod(item) {
            var data = item.item,
                url = ContextFactory.getEndPointProccess({
                    enums: 'subscriptions',
                    method: 'update',
                    replace: ':id',
                    value: data.subscription.id
                });

            /* jshint camelcase:false */
            var promise = CrudFactory.put(url, { subscription: { payment_method: item.paymentMethod } });

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data.subscription = resp.data;
                changePaymentView(viewModel.data.subscription.payment_method);
                if (viewModel.data.subscription.payment_method === "credit_card" && !creditCardPresent(viewModel.data)) {
                    dialogCadCreditCard();
                } else {
                    MessageFactory.setFlash($filter('translate')('billings.paymentModal.success'), 'success');
                    var elem = angular.element(document.querySelector(".ngdialog-close"))[0];
                    if (elem) {
                        elem.click();
                    }
                }
            });
        }

        function creditCardPresent(data) {
            /* jshint camelcase:false */
            return _.isPresent(data.credit_card);
        }
        // get end date
        function getLicensePercentage() {
            /* jshint camelcase:false */
            var startDate = new Date(viewModel.data.current_license.start_date),
                endDate = new Date(viewModel.data.current_license.end_date),
                timeDiff = Math.abs(endDate.getTime() - startDate.getTime()),
                diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24)),
                usedDays = (diffDays - viewModel.data.current_license.remaining_days),
                licensePercentage = (100 / diffDays * usedDays);
            return (100 - licensePercentage) + "%";
        }

        function _loadBillings() {
            var url = ContextFactory.getEndPoint('index', 'billings'),
                promise = CrudFactory.getAll(url);

            viewModel.tracker.loadBillings.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = resp.data;
                /* jshint camelcase:false */
                viewModel.data.paymentView = viewModel.data.subscription.payment_method;


                viewModel.data.current_license = $scope.main.contextSource.currentEntity.currentLicense;
                var startDate = new Date(viewModel.data.current_license.start_date),
                    endDate = new Date(viewModel.data.current_license.end_date),
                    timeDiff = Math.abs(endDate.getTime() - startDate.getTime());

                viewModel.diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                viewModel.remainingDays = viewModel.data.current_license.remaining_days;
                viewModel.usedDays = (viewModel.diffDays - viewModel.remainingDays);
                viewModel.extendedAt = viewModel.data.current_license.extended_at;

                viewModel.totalOfTrialDays = viewModel.remainingDays + viewModel.usedDays;

                if (viewModel.remainingDays === viewModel.totalOfTrialDays) {
                    viewModel.progressBarWidth =  "98%";
                } else {
                    viewModel.progressBarWidth =  (viewModel.remainingDays * 100 / viewModel.totalOfTrialDays) + "%";
                }


                viewModel.plans = resp.data.plans[0].plan_time_ranges.filter((plan) => {
                    return plan.active;
                });

                viewModel.currentPlandEndDate = endDate;

                // viewModel.monthPlan = viewModel.plans.filter(plan => plan.name === "mensal")
                for (let i = 0; i < viewModel.plans.length; i++) {
                    switch (viewModel.plans[i].name) {
                        case "mensal":
                            viewModel.monthPlan = viewModel.plans[i];
                            break;
                        case "semestral":
                            viewModel.semesterPlan = viewModel.plans[i];
                            break;
                        case "anual":
                            viewModel.yearlyPlan = viewModel.plans[i];
                            break;
                        default:
                            return;
                    }
                }
            });
        }

        function openPlansDialog() {
            /* jshint camelcase:false */
            viewModel.data.isControlle = $scope.main.isControlle;
            viewModel.data.isAccountFree = $scope.main.isAccountFree;
            viewModel.data.currentEntityId = $scope.main.contextSource.currentEntity.id;
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/billings/templates/_update-plan.dialog.html'),
                controller: 'zze.billings.PlansCtrl',
                controllerAs: 'plans',
                className: 'ngdialog theme-organizze plans-dialog',
                width: 867,
                data: viewModel.data
            });
        }

        function getCreditCardIconUrl(brand) {
            return $filter('assetPath')('images/application/credit_cards/' + brand + '.jpg');
        }

        function getPaymentUrl(planName) {
            return "/" + $scope.main.contextSource.currentEntity.id + "/planos/plus/pagamentos/novo?p=" + planName;
        }

        function getPlansByName(planName, activeStatus) {
            if (!viewModel.data) { return; }

            /* jshint camelcase:false */
            return _.find(viewModel.data.plans[0].plan_time_ranges, function (plan) {
                if (plan.active === activeStatus && plan.name === planName) {
                    return plan;
                }
            });
        }

        function getPlanPrice(planTimeRangeId, planTimeRangeName) {
            /* jshint camelcase:false */

            var value;

            _.find(viewModel.data.plans[0].plan_time_ranges, function (plan) {

                if (planTimeRangeName === 'trial') {
                    if (plan.name === 'mensal' && plan.active) {
                        value = plan.value;
                    }
                }

                if (plan.id === planTimeRangeId) {
                    value = plan.value + "";
                }
            });

            return value;
        }

        function currentPlanRange() {
            return $scope.main.contextSource.currentEntity.planTimeRangeName;
        }

        function getDifferenceValue() {
            /* jshint camelcase:false */
            var value,
                valueMonth,
                valueYear,
                recurrenceTimeRange,
                currentLicensePlanId;

            if (!viewModel.data) { return; }

            currentLicensePlanId = viewModel.data.current_license.plan_time_range_id;

            recurrenceTimeRange = (12 / _getRecurrenceSubscription(currentLicensePlanId));

            valueMonth = parseFloat(getPlanPrice(currentLicensePlanId, currentPlanRange()).replace(",", ".")) * recurrenceTimeRange;
            valueYear = getPlansByName('anual', true).value_in_cents / 100;

            value = formatPlanValue((valueMonth - valueYear).toFixed(2));

            return value;
        }

        function formatPlanValue(value) {
            return value.toString().replace('.', ',');
        }

        function dateCreditInvoice(date) {
            var separator = $filter('translate')('billings.of'),
                formatDate = moment(date).format("DD [" + separator + "] MMMM [" + separator + "] YYYY");

            return formatDate;
        }

        function isAppStoreSubscription() {
            /* jshint camelcase:false */
            if (!viewModel.data) { return; }

            return viewModel.data.subscription.payment_method === "appstore";
        }

        function isSubscriptionCanceled() {
            /* jshint camelcase:false */
            if (!viewModel.data) { return false; }

            return viewModel.data.subscription.status === "canceled";
        }

        function isRenewal() {
            /* jshint camelcase:false */
            if (!viewModel.data) { return; }

            return isSubscriptionCanceled() && !$scope.main.isAccountFree;
        }

        function _getRecurrenceSubscription(planId) {
            /* jshint camelcase:false */
            var timeRange;

            _.find(viewModel.data.plans[0].plan_time_ranges, function (plan) {
                if (plan.id === planId) {
                    timeRange = plan.time_range;
                }
            });

            return timeRange;
        }

        function _faqQuestions() {
            return [
                {
                    question: "A assinatura se renova automaticamente?",
                    answer: "Sim. A cobrança no cartão de crédito não é necessário ação alguma sua. Assinaturas via boleto é gerado um novo boleto ao término de cada ciclo de pagamento."
                },
                {
                    question: "Posso cancelar a assinatura a qualquer momento?",
                    answer: "Você pode cancelar sua assinatura a qualquer momento. E ainda, se estiver dentro do período de 7 dias após a confirmação do primeiro pagamento, você pode solicitar o reembolso total do valor da pago."
                },
                {
                    question: "Posso testar o app de forma gratuita de novo?",
                    answer: "Sim. Assim que o período de teste de 34 dias acabar, você tem direito a testar o Organizze por mais 1 dia. Depois desse período, precisa aguardar 90 dias para poder testar por 34 dias novamente."
                },
                {
                    question: "Posso acessar o Organizze pelo celular?",
                    answer: "Sim. Você pode acessar sua conta de qualquer celular, tablet ou computador. Para isso, baixe o app do Organizze no seu celular e utilize o mesmo e-mail e senha na hora de logar."
                },
                {
                    question: "Quais são as formas de pagamento aceitas?",
                    answer: "Para a assinatura mensal, aceitamos pagamentos apenas via cartão de crédito. Para os outros planos aceitamos também pagamentos por boleto."
                },
                {
                    question: "Após o pagamento, quanto tempo leva para liberar o Organizze?",
                    answer: "A assinatura realizada no cartão de crédito tem a liberação instantânea. Com Boleto, a confirmação do pagamento pode levar até 48 horas."
                }
            ];
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.cancellations')
        .controller('zze.cancellations.CancellationFormCtrl', cancellationFormCtrl);

    cancellationFormCtrl.$inject = ['$injector', '$scope', '$rootScope'];

    function cancellationFormCtrl ($injector, $scope, $rootScope) {
        /* jshint validthis:true */
        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            $timeout = $injector.get('$timeout'),

            publicMethods = {
                createCancellation: createCancellation,
                destroyCancellation: destroyCancellation,
                setActiveLevel: setActiveLevel,
                checkActiveLevel: checkActiveLevel
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = {};
            viewModel.showPhoneError = false;
            if ($scope.ngDialogData && $scope.ngDialogData.activeLevel) {
                viewModel.activeLevel = $scope.ngDialogData.activeLevel;
            }else {
                viewModel.activeLevel = 1;
            }

            newCancellation();
        }

        function newCancellation () {
            var url = ContextFactory.getEndPoint('new', 'cancellations'),
            promise = CrudFactory.getAll(url);
            viewModel.tracker.loadPage.addPromise(promise);
            promise.then(function (resp) {
                viewModel.data = resp.data;
                if(viewModel.data.isControlle && !viewModel.data.isTrial) {
                    if(!viewModel.data.phoneNumber || viewModel.data.phoneNumber === "") {
                        FocusFactory.setFocus('#phone-number');
                    }
                }else {
                    createCancellation();
                }
            });
        }

        function createCancellation () {
            if (viewModel.data.phoneNumber || !viewModel.data.isControlle) {
                var url = ContextFactory.getEndPoint('create', 'cancellations'),
                promise = CrudFactory.post(url, {phone: viewModel.data.phoneNumber});

                promise.then(function (resp) {
                    if (!viewModel.data.isTrial) {
                        if (resp.data.id) {
                            if(viewModel.data.isControlle) {
                                viewModel.data.cancellation = resp.data;
                                setActiveLevel(2);
                                $timeout(function () {
                                    $rootScope.pendingCancellation = viewModel.data.cancellation;
                                }, 1000);
                            }else {
                                Turbolinks.visit(viewModel.data.billingsUrl);
                            }
                        }
                    }else {
                        Turbolinks.visit(viewModel.data.billingsUrl);
                    }
                });
            }else {
                viewModel.showPhoneError = true;
            }
        }

        function destroyCancellation () {
            var url = ContextFactory.getEndPointProccess({
                enums: 'cancellations',
                method: 'destroy',
                replace: ':id',
                value: viewModel.data.cancellation.id
            });
            var promise = CrudFactory.destroy(url);

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function () {
                setActiveLevel(4);
                $timeout(function () {
                    $rootScope.pendingCancellation = null;
                }, 1000);
            });
        }

        function setActiveLevel (level) {
            viewModel.activeLevel = level;
        }

        function checkActiveLevel (level) {
            return viewModel.activeLevel === level;
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.cancellations')
        .controller('zze.cancellations.cancellationWarningCtrl', cancellationWarningCtrl);

       cancellationWarningCtrl.$inject = ['$injector', '$rootScope'];
    function cancellationWarningCtrl ($injector, $rootScope) {
        /* jshint validthis:true */
        var viewModel = this,
            $filter = $injector.get('$filter'),
            Dialog = $injector.get('ngDialog'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            publicMethods = {
                openCancellationDialog: openCancellationDialog,
                getPendingCancellation: getPendingCancellation
            };
        _.extend(viewModel, publicMethods);

        init();

        function init () {
            getPendingCancellation();
        }

        function getPendingCancellation () {
            var url = ContextFactory.getEndPoint('get_pending', 'cancellations');
            CrudFactory.getAll(url).then(function (resp) {
                $rootScope.pendingCancellation = resp.data.cancellation;
            });
        }

        function openCancellationDialog () {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/cancellations/templates/cancellation-form.dialog.html'),
                controller: 'zze.cancellations.CancellationFormCtrl',
                controllerAs: 'cancellations',
                className: 'ngdialog theme-organizze cancellation-dialog',
                width: 500,
                data: {activeLevel: 3}
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze.entities')
        .controller('zze.entities.EntitiesChangeDataCtrl', EntitiesChangeDataCtrl);

    EntitiesChangeDataCtrl.$inject = ['$injector', '$scope'];

    function EntitiesChangeDataCtrl ($injector, $scope) {

        var viewModel = this,

            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            // ContextFactory = $injector.get('zze.commons.contextFactory'),

            publicMethods = {
                update: update,
                isTabActive: isTabActive,
                setTabActive: setTabActive
            },
            _tabActive = 0;

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = PromiseTrackerService.create([
                'loadTicket'
            ]);

            viewModel.data = {
                entity: $scope.ngDialogData.item
            };
        }

        function isTabActive (index) {
            return _tabActive === index;
        }

        function setTabActive (index) {
            _tabActive = index;
        }

        function update (formName) {

            if (!_isFormValid(formName)) {
                return;
            }
        }

        function _isFormValid (formName) {
            return viewModel.form[formName] && viewModel.form[formName].$valid;
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze.entities')
        .controller('zze.entities.EntitiesChooseProfileCtrl', EntitiesChooseProfileCtrl);

    EntitiesChooseProfileCtrl.$inject = ['$injector', '$scope'];

    function EntitiesChooseProfileCtrl ($injector, $scope) {
        $scope.main.setContentClass('zze-reset-width-entities-choose-profile');
        var viewModel = this,

            EntitiesFactory = $injector.get('zze.entities.entitiesFactory'),
            PromiseTracker = $injector.get('promiseTracker'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),


            publicMethods = {
                isOwner: isOwner,
                getEntities: getEntities
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.data = EntitiesFactory.getDataFake();

            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            getEntities(true);
        }

        function isOwner (owner) {
            if (owner) {
                return 'Dono da conta';
            }
            return 'Supervisor';
        }

        function getEntities (useLoading) {

            var url = ContextFactory.getEndPoint('index'),
                promise = CrudFactory.getAll(url);

            if (useLoading) {
                viewModel.tracker.loadPage.addPromise(promise);
            }

            promise.then(function (resp) {
                viewModel.data = resp.data;
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze.entities')
        .controller('zze.entities.EntitiesCreateProfileCtrl', EntitiesCreateProfileCtrl);

    EntitiesCreateProfileCtrl.$inject = ['$injector', '$scope'];

    function EntitiesCreateProfileCtrl ($injector) {

        var viewModel = this,

            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),

            publicMethods = {
                isTabActive: isTabActive,
                setTabActive: setTabActive
            },

        _tabActive = 0;

        _.extend(viewModel, publicMethods);


        init();

        function init () {
            viewModel.tracker = PromiseTrackerService.create([
                'loadCreate'
            ]);

            _loading();
            // isTabActive();
        }

        function isTabActive (index) {
            return _tabActive === index;
        }

        function setTabActive (index) {
            _tabActive = index;
        }

        function _loading () {

            var $timeout = $injector.get('$timeout');

            var promise = $timeout(function () {
            }, 2000);

            viewModel.tracker.loadCreate.addPromise(promise);

            promise.then(function () {
                setTabActive(1);
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze.entities')
        .controller('zze.entities.EntitiesDeleteProfileCtrl', EntitiesDeleteProfileCtrl);

    EntitiesDeleteProfileCtrl.$inject = ['$injector', '$scope'];

    function EntitiesDeleteProfileCtrl ($injector, $scope) {
        var viewModel = this,

            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
                deleteProfile: deleteProfile
            };


        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = PromiseTrackerService.create([
                'loadDeleteProfile'

            ]);


        }

        function deleteProfile () {
            if (!_isFormValid()) {
                return;
            }

            var url = ContextFactory.getEndPointProccess({
                    method: 'destroy',
                    replace: ':id',
                    value: $scope.ngDialogData.item.id
                }),
                promise = CrudFactory.post(url, {
                    user: {
                        password: viewModel.data.password
                    }
                });

            viewModel.tracker.loadDeleteProfile.addPromise(promise);

            promise.then(function () {
                $scope.$parent.entities.getEntities(false);
                $scope.closeThisDialog();

            }).catch(function (error) {
                MessageFactory.setFlash(error.data.error, 'error');
            });
        }

        function _isFormValid () {
            return viewModel.form && viewModel.form.$valid;
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.entities')
        .controller('zze.entities.EntitiesItemChooseProfileCtrl', EntitiesItemChooseProfileCtrl);

    EntitiesItemChooseProfileCtrl.$inject = ['$injector', '$scope'];

    function EntitiesItemChooseProfileCtrl ($injector) {

        var viewModel = this,

            PromiseTracker = $injector.get('promiseTracker'),
            // ContextFactory = $injector.get('zze.commons.contextFactory'),
            // CrudFactory = $injector.get('zze.commons.crudFactory'),

            publicMethods = {
                setEntities: setEntities,
                getEntities: getEntities,
                loadPage: PromiseTracker()
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            getEntities(true);
        }

        function setEntities (data) {
            viewModel.data = data;
        }

        function getEntities () {

            // var url = ContextFactory.getEndPoint('index'),
            //     promise = CrudFactory.getAll(url);
            //
            // if (useLoading) {
            //     viewModel.tracker.loadPage.addPromise(promise);
            // }
            //
            // promise.then(function (resp) {
            //     viewModel.data = resp.data;
            // });

            var $timeout = $injector.get('$timeout');

            var promise = $timeout(function () {}, 20000);

            return promise;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.entities')
        .controller('zze.entities.EntitiesCtrl', EntitiesCtrl);

    EntitiesCtrl.$inject = ['$injector', '$scope'];

    function EntitiesCtrl ($injector, $scope) {

        $scope.main.setContentClass('zze-reset-width-entities');

        var viewModel = this,

            $filter = $injector.get('$filter'),

            Dialog = $injector.get('ngDialog'),
            EntitiesFactory = $injector.get('zze.entities.entitiesFactory'),
            PromiseTracker = $injector.get('promiseTracker'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            publicMethods = {
                showEntitiesChangeData: showEntitiesChangeData,
                showEntitieDeleteProfile: showEntitieDeleteProfile,
                getEntities: getEntities,
                isOwner: isOwner
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

            viewModel.data = EntitiesFactory.getDataFake();

            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            getEntities(true);
        }

        function showEntitiesChangeData (item) {

            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/entities/templates/entities-change-data.dialog.html'),
                controller: 'zze.entities.EntitiesChangeDataCtrl',
                controllerAs: 'entitiesChangeData',
                scope: $scope,
                width: 470,
                data: {
                    item: item,
                    options: {
                        ctrl: 'entities',
                        edit: 'callbackDialogEdit'
                    }
                },
                closeByDocument: false
            });
        }

        function showEntitieDeleteProfile (item) {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/entities/templates/entities-delete-profile.dialog.html'),
                controller: 'zze.entities.EntitiesDeleteProfileCtrl',
                controllerAs: 'entitiesDeleteProfile',
                scope: $scope,
                width: 470,
                data: {
                    item: item
                },
                closeByDocument: false
            });
        }

        function isOwner (owner) {

            if (owner) {
                return 'Dono da conta';
            }

            return 'Supervisor';
        }

        function getEntities (useLoading) {

            var url = ContextFactory.getEndPoint('index'),
                promise = CrudFactory.getAll(url);

            if (useLoading) {
                viewModel.tracker.loadPage.addPromise(promise);
            }

            promise.then(function (resp) {
                viewModel.data = resp.data;
            });
        }

    }
})();


(function () {

    'use strict';

    angular.module('zze.categories')
        .controller('zze.categories.ConfirmArchiveCtrl', ConfirmArchiveCtrl);

    ConfirmArchiveCtrl.$inject = ['$injector', '$scope'];

    function ConfirmArchiveCtrl ($injector, $scope) {
        /*jshint validthis:true */
        var viewModel = this,
            PromiseTracker = $injector.get('promiseTracker'),
            category = $scope.ngDialogData.category, 

            publicMethods = {
                close: close,
                setToArchived: setToArchived
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = {
                name: category.name,
                subcategoryNumber: !!category.children ? category.children.length : null
            };

            viewModel.archive = {
                 /* jshint camelcase:false */
                canSetToArchived: !category.children || category.children.length === 0 && !category.parent_uuid && category.available
            };
        }

        function setToArchived() {
            $scope.$parent.categories.setArchiveCategory(category, false);
            close();
        }

        function close () {
            $scope.closeThisDialog();
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .controller('zze.categories.ConfirmDeleteCtrl', ConfirmDeleteCtrl);

    ConfirmDeleteCtrl.$inject = ['$injector', '$scope'];

    function ConfirmDeleteCtrl($injector, $scope) {
        /*jshint validthis:true */
        /* jshint camelcase:false */
        var viewModel = this,
            $filter = $injector.get('$filter'),
            PromiseTracker = $injector.get('promiseTracker'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            CategoriesService = $injector.get('zze.categories.categoriesService'),
            StringsFactory = $injector.get('zze.utils.stringProcessFactory'),

            categoryToDelete = $scope.ngDialogData.category,
            originParentUuid = $scope.ngDialogData.category.parent_uuid,
            callbackOptions = $scope.ngDialogData.callbackOptions,
            type = $scope.ngDialogData.type,

            publicMethods = {
                close: close,
                showForm: showForm,
                destroy: deleteCategory
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {

            viewModel.tracker = {
                autocomplete: PromiseTracker()
            };

            viewModel.type = type;
            viewModel.canDelete = !categoryToDelete.children || categoryToDelete.children.length === 0;
            viewModel.subcategoryNumber = !!categoryToDelete.children ? categoryToDelete.children.length : null;

            if (categoryToDelete) {
                let categoriesFromList;

                if (categoryToDelete.available) {
                    categoriesFromList = $scope.ngDialogData.list;
                } else {
                    categoriesFromList = $scope.ngDialogData.list.concat(categoryToDelete);
                }

                viewModel.getCategoryToDelete = categoryToDelete.uuid;
                viewModel.getCategoryToDeleteName = categoryToDelete.name;
                viewModel.selectizeToDelete = CategoriesService.getSelectizeConfig(categoriesFromList, { includeChildren: true, includeArchived: true });
                viewModel.selectizeItemSelectized = CategoriesService.getSelectizeConfig($scope.ngDialogData.list, { includeChildren: true, excludeItem: categoryToDelete.id });
                FocusFactory.setFocus('#delete-selectized');
            }

        }

        function showForm() {
            $scope.$parent.categories.showForm($scope.ngDialogData.id);
            close();
        }

        function deleteCategory() {
            if (!viewModel.substituteId) {
                MessageFactory.setFlash($filter('translate')('categories.actions.delete.selectOne'), 'error');
                FocusFactory.setFocus('#delete-selectized');
                return;
            }

            var promise = $scope.$parent.categories.delete(categoryToDelete.id, viewModel.substituteId);

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function () {
                if (CategoriesService.isParentCategory(categoryToDelete)) {
                    $scope.$parent[callbackOptions.ctrl][callbackOptions.afterDestroy](categoryToDelete);
                } else {
                    $scope.$parent[callbackOptions.ctrl][callbackOptions.afterDestroy](categoryToDelete, originParentUuid);
                }
                $scope.main.closeAllDialogs();

                var flashMessage = $filter('translate')('categories.actions.delete.success', { type: viewModel.type });
                MessageFactory.setFlash(StringsFactory.stringCapitalize(flashMessage), 'success');

            }).catch(function () {
                MessageFactory.setFlash($filter('translate')('categories.actions.delete.error', { type: viewModel.type }), 'error');
            });
        }

        function close() {
            $scope.closeThisDialog();
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .controller('zze.categories.CreateCtrl', CreateCtrl);

    CreateCtrl.$inject = ['$injector', '$scope'];

    function CreateCtrl($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,
            $filter = $injector.get('$filter'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            callbackOptions = $scope.ngDialogData.callbackOptions,
            newCategories = $scope.ngDialogData.categories,
            type = $scope.ngDialogData.type,
            signKind = $scope.ngDialogData.signKind,
            titleComplement = $scope.ngDialogData.titleComplement,

            IS_NEW_REGISTER = !$scope.ngDialogData.item,
            IS_EDIT_REGISTER = !!$scope.ngDialogData.item,
            ITEM_CATEGORY = $scope.ngDialogData.item,

            publicMethods = {
                save: save,
                showConfirmDelete: showConfirmDelete,
                closeDialog: closeDialog
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            /* jshint camelcase:false */
            viewModel.tracker = PromiseTrackerService.create([
                'loadingData',
                'loadSave'
            ]);

            viewModel.data = {
                category: {}
            };

            viewModel.base = {
                newCategories: _getNewCategories(),
                colors: {
                    rangeColor: $scope.ngDialogData.rangeColor
                },
                formTitle: _getTitle(),
                confirmButton: _getTextConfirmButton(),
                type: type,
                canShowDelete: IS_EDIT_REGISTER,
                selectedIcon: _getIcon()
            };

            if (IS_NEW_REGISTER) {
                viewModel.data.category = {
                    available: true
                };
            } else {
                /* jshint camelcase:false */
                viewModel.data.category = {
                    name: ITEM_CATEGORY.name,
                    available: ITEM_CATEGORY.available,
                    color: ITEM_CATEGORY.color,
                    children: ITEM_CATEGORY.children,
                    group_id: ITEM_CATEGORY.group_id
                };
            }

            $scope.$on('colorPicker.setColor', function (event, value) {
                viewModel.data.category.color = value;
            });
        }

        function closeDialog() {
            $scope.closeThisDialog();
        }

        function showConfirmDelete() {
            $scope.$parent[callbackOptions.ctrl].showConfirmDeleteDialog(ITEM_CATEGORY);
        }

        function save() {

            /* jshint camelcase:false */
            if (!_isFormValid()) {
                return;
            }

            if (!viewModel.data.category.color) {
                MessageFactory.setFlash($filter('translate')('categories.actions.add.emptyColor'), 'warn');
                return;
            }

            if (!viewModel.base.selectedIcon) {
                MessageFactory.setFlash($filter('translate')('categories.actions.add.emptyIcon'), 'warn');
                return;
            }

            viewModel.data.category.group_id = signKind + viewModel.base.selectedIcon.replace(/-/g, '_');

            var promise, callbackOpt, message, errorMessage;

            if (IS_NEW_REGISTER) {
                message = $filter('translate')('categories.actions.add.success');
                errorMessage = $filter('translate')('categories.actions.add.error', { type: type });
                callbackOpt = callbackOptions.afterCreate;

                var urlCreate = ContextFactory.getEndPoint('create');
                promise = CrudFactory.post(urlCreate, viewModel.data);
            } else {
                message = $filter('translate')('categories.actions.edit.success', { type: type });
                errorMessage = $filter('translate')('categories.actions.edit.error', { type: type });
                callbackOpt = callbackOptions.afterUpdate;

                var urlUpdate = ContextFactory.getEndPointProccess({
                    method: 'update',
                    replace: ':id',
                    value: ITEM_CATEGORY.id
                });

                promise = CrudFactory.put(urlUpdate, viewModel.data);
            }

            viewModel.tracker.loadSave.addPromise(promise);

            window.Loader.top.show();
            promise.then(function (resp) {
                window.Loader.top.hide();
                $scope.$parent[callbackOptions.ctrl][callbackOpt](resp.data);
                MessageFactory.setFlash(message, 'success');
                $scope.closeThisDialog();
            }).catch(function () {
                window.Loader.top.hide();
                MessageFactory.setFlash(errorMessage, 'error');
            });
        }

        function _isFormValid() {
            return viewModel.form && viewModel.form.$valid;
        }

        function _getIcon() {
            /* jshint camelcase:false */
            return IS_EDIT_REGISTER ? ITEM_CATEGORY.group_id.replace(/exp_|ear_/g, '').replace(/_/g, '-') : "";
        }

        function _getNewCategories() {
            /* jshint camelcase:false */
            var filterCategories = [];

            if (IS_NEW_REGISTER) {
                filterCategories = _.filter(newCategories, function (cat) {
                    return !cat.used;
                });
            } else {
                filterCategories = _.filter(newCategories, function (cat) {
                    return !cat.used || (ITEM_CATEGORY.group_id.includes(cat.name) && cat.used);
                });
            }
            return filterCategories;
        }

        function _getTextConfirmButton() {
            return IS_NEW_REGISTER ? 'Criar Categoria' : 'Salvar';
        }

        function _getTitle() {
            return IS_NEW_REGISTER ?
                $filter('translate')('categories.actions.add.title', { type: titleComplement }) :
                $filter('translate')('categories.actions.edit.title', { type: titleComplement });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .controller('zze.categories.UpdateSubCtrl', UpdateSubCtrl);

    UpdateSubCtrl.$inject = ['$injector', '$scope'];

    function UpdateSubCtrl ($injector, $scope) {
        /*jshint validthis:true */
        /* jshint camelcase:false */
        var viewModel = this,
            $filter = $injector.get('$filter'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CategoriesService = $injector.get('zze.categories.categoriesService'),

            callbackOptions = $scope.ngDialogData.callbackOptions,
            category = $scope.ngDialogData.category,
            categories = $scope.ngDialogData.categories,
            originParentUuid = $scope.ngDialogData.category.parent_uuid,
            type = $scope.ngDialogData.type, 

            publicMethods = {
                submit: submit,
                closeDialog: closeDialog
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = PromiseTrackerService.create([
                'submit'
            ]);

            viewModel.data = {
                form: {
                    name: category.name,
                    /* jshint camelcase:false */
                    parent_uuid: category.parent_uuid
                },

                type: type
            };

            viewModel.selectizeConfig = CategoriesService.getSelectizeConfig(categories);
        }

        function submit () {
            if (!_isFormValid()) {
                return;
            }

            /* jshint camelcase:false */
            if (!viewModel.data.form.parent_uuid) {
                MessageFactory.setFlash($filter('translate')('categories.actions.edit.selectOne'), 'error');
                FocusFactory.setFocus('#edit-selectized');
                return;
            }

            var url = ContextFactory.getEndPointProccess({
                        method: 'update',
                        replace: ':id',
                        value: category.id
                    }),
                payload = {
                    category: viewModel.data.form
                },
                promise = CrudFactory.put(url, payload);

            viewModel.tracker.submit.addPromise(promise);

            promise.then(function (resp) {
                if (resp.data.parent_uuid !== originParentUuid) {
                    $scope.$parent[callbackOptions.ctrl][callbackOptions.afterDestroy](resp.data, originParentUuid);
                }

                $scope.$parent[callbackOptions.ctrl][callbackOptions.afterUpdate](resp.data);
                closeDialog();
                MessageFactory.setFlash($filter('translate')('categories.actions.edit.success', {type: viewModel.data.type}), 'success');
            }).catch(function () {
                MessageFactory.setFlash($filter('translate')('categories.actions.edit.error', {type: viewModel.data.type}), 'error');
            });
        }

        function closeDialog () {
            $scope.closeThisDialog();
        }

        function _isFormValid () {
            return viewModel.form && viewModel.form.$valid;
        }

    }

})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .controller('zze.categories.CategoriesCtrl', CategoriesCtrl);

    CategoriesCtrl.$inject = ['$injector', '$scope'];

    function CategoriesCtrl($injector, $scope) {
        var viewModel = this,

            _showInstructionTopHelper = false,

            $filter = $injector.get('$filter'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            StorageFactory = $injector.get('zze.utils.storageFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            CategoriesService = $injector.get('zze.categories.categoriesService'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            Dialog = $injector.get('ngDialog'),

            CATEGORIES_TABS_STEP = 'CATEGORIES_TAB_' + $scope.main.contextSource.currentEntity.id,
            HELPER_STEP = 'categoriesHelperStep_' + $scope.main.contextSource.currentEntity.id,
            STEP_COMPLETE = 1,

            publicMethods = {
                delete: deleteCategory,
                archiveCategory: archiveCategory,
                setArchiveCategory: setArchiveCategory,
                submitSubcategoryForm: submitSubcategoryForm,

                afterCreateCallback: afterCreateCallback,
                afterUpdateCallback: afterUpdateCallback,
                afterDestroyCallback: afterDestroyCallback,
                afterArchiveCallback: afterArchiveCallback,
                setTabActive: setTabActive,
                goToArchivedSection: goToArchivedSection,
                isBlockedTo: isBlockedTo,

                showInstructionTopHelper: showInstructionTopHelper,
                hideInstructionTopHelper: hideInstructionTopHelper,
                showConfirmDeleteDialog: showConfirmDeleteDialog,
                showCadDialog: showCadDialog,
                showEditDialog: showEditDialog,
                showSubcategoryForm: showSubcategoryForm,
                hideSubcategoryForm: hideSubcategoryForm
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            $scope.main.setContentClass("settings categories");

            /* jshint camelcase:false */
            viewModel.tracker = PromiseTrackerService.create([
                'loadCategories',
                'loadPage',
                'addingSubcategory',
                'archive',
                'loadNewCategoriesGroup'
            ]);

            viewModel.canTestNewCategories = $scope.main.contextSource.currentUser.test_categories;

            viewModel.helperTopClass = 'zze-ng-animate-if-fade-in-top';

            viewModel.tabActive = StorageFactory.getSession(CATEGORIES_TABS_STEP, true) || 1;

            viewModel.forms = {};

            viewModel.data = {
                expenses: [],
                earnings: []
            };

            viewModel.newCategoryGroup = {
                data: {}
            };

            viewModel.tab = {
                tabExpenses: CategoriesService.TAB_EXPENSES,
                tabEarnings: CategoriesService.TAB_EARNINGS
            };

            _getCategories();

            _getNewCategoryGroups();

            document.title = "Organizze | Categorias";
        }

        function showInstructionTopHelper() {
            return !viewModel.tracker.loadCategories.active() &&
                !viewModel.tracker.loadPage.active() &&
                !viewModel.tracker.loadNewCategoriesGroup.active() &&
                !_alreadyCreateNewCategories() &&
                _showInstructionTopHelper &&
                viewModel.canTestNewCategories;
        }

        function hideInstructionTopHelper() {
            viewModel.helperTopClass = 'zze-ng-animate-if-fade-out-top';

            setTimeout(function () {
                $scope.$apply(function () {
                    _showInstructionTopHelper = false;
                    localStorage.setItem(HELPER_STEP, STEP_COMPLETE);
                });
            }, 100);
        }

        function goToArchivedSection(kind) {
            var firstItem = viewModel.data.archived[kind][0];
            CategoriesService.setHighlight(firstItem.id, true);
        }

        function isBlockedTo(item) {
            /* jshint camelcase:false */
            return CategoriesService.isParentCategory(item) ? !item.fixed : !item.is_fixed_parent;
        }

        function setTabActive(index) {

            if (viewModel.tracker.loadPage.active()) {
                return;
            }

            viewModel.tabActive = index;

            StorageFactory.setSession(CATEGORIES_TABS_STEP, index);
        }

        function submitSubcategoryForm(formData, item) {
            /* jshint camelcase:false */
            if (_.isBlank(formData) || _.isBlank(formData.category) || _.isBlank(formData.category.name)) {
                MessageFactory.setFlash($filter('translate')('categories.actions.add.emptyName', { type: _typeTranslate('subcategory') }), 'error');
                FocusFactory.setFocus('#subcategory-form-input-' + item.id);
                return;
            }

            var payload = {
                category: {
                    parent_uuid: item.uuid,
                    name: formData.category.name
                }
            },
                url = ContextFactory.getEndPoint('create'),
                promise = CrudFactory.post(url, payload);

            viewModel.tracker.addingSubcategory.addPromise(promise);

            promise.then(function (resp) {
                var category = resp.data;
                if (_.isBlank(item.children)) {
                    item.children = [];
                }
                item.children.unshift(category);
                hideSubcategoryForm(item.id);
                CategoriesService.getSortCategories(item.children);
                CategoriesService.setHighlight(category.id, false);
                MessageFactory.setFlash("Sub-categoria adicionada com sucesso!", 'success');
            }).catch(function () {
                MessageFactory.setFlash($filter('translate')('categories.actions.add.error', { type: _typeTranslate('subcategory') }), 'error');
            });
        }

        function deleteCategory(itemId, substituteId) {
            /* jshint camelcase:false */
            var url = ContextFactory.getEndPointProccess({
                method: 'destroy',
                replace: ':id',
                value: itemId
            }),
                substitute_uuid = {
                    params: {
                        substitute_uuid: substituteId
                    }
                };

            return CrudFactory.destroy(url, substitute_uuid);
        }

        function archiveCategory(category, action) {
            if (!action) {
                showConfirmArchiveDialog(category);
                return;
            }

            setArchiveCategory(category, action);
        }

        function setArchiveCategory(category, action) {
            category.available = action;

            var url = ContextFactory.getEndPointProccess({
                method: 'update',
                replace: ':id',
                value: category.id
            }),
                promise = CrudFactory.put(url, { category: { available: action } });

            viewModel.tracker.archive.addPromise(promise);

            var message = action ? $filter('translate')('categories.archive.successUnarchived') : $filter('translate')('categories.archive.success');

            promise.then(function (resp) {
                afterArchiveCallback(resp.data);
                MessageFactory.setFlash(message, 'success');
            }).catch(function () {
                MessageFactory.setFlash($filter('translate')('categories.archive.error'), 'error');
            });
        }

        function showConfirmArchiveDialog(category) {
            if (_isLastActiveCategory()) {
                MessageFactory.setFlash($filter('translate')('categories.archive.hasOnlyOneActive'), 'error');
                return;
            }

            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/categories/templates/categories-confirm-archive.dialog.html'),
                controller: 'zze.categories.ConfirmArchiveCtrl',
                controllerAs: 'confirmArchive',
                closeByEscape: false,
                closeByNavigation: false,
                closeByDocument: false,
                className: 'ngdialog theme-organizze zze-context_categories-archive',
                width: 542,
                scope: $scope,
                data: {
                    category: category,
                    callbackOptions: {
                        ctrl: 'categories',
                        afterDestroy: 'afterArchiveCallback'
                    }
                }
            });
        }

        function showCadDialog(item) {
            var titleComplement, newCategoryGroup, signKind;

            if (viewModel.tabActive === viewModel.tab.tabExpenses) {
                signKind = 'exp_';
                newCategoryGroup = viewModel.newCategoryGroup.data.expenses;
                titleComplement = $filter('translate')('categories.actions.add.newExpense');
            } else {
                signKind = 'ear_';
                newCategoryGroup = viewModel.newCategoryGroup.data.earnings;
                titleComplement = $filter('translate')('categories.actions.add.newEarning');
            }

            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/categories/templates/categories-create.dialog.html'),
                controller: 'zze.categories.CreateCtrl',
                controllerAs: 'createCtrl',
                scope: $scope,
                className: 'ngdialog theme-organizze zze-context_categories-archive',
                width: 576,
                data: {
                    item: item,
                    categories: newCategoryGroup,
                    rangeColor: CategoriesService.getRangeColorForNewCategories(),
                    titleComplement: titleComplement,
                    type: _typeTranslate('category'),
                    signKind: signKind,
                    callbackOptions: {
                        ctrl: 'categories',
                        afterCreate: 'afterCreateCallback',
                        afterUpdate: 'afterUpdateCallback'
                    }
                }
            });
        }

        function showConfirmDeleteDialog(category) {
            var categories = angular.copy(viewModel.data[category.kind]);

            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/categories/templates/categories-confirm-delete.dialog.html'),
                controller: 'zze.categories.ConfirmDeleteCtrl',
                controllerAs: 'confirmDelete',
                width: 495,
                className: 'ngdialog theme-organizze zze-context_categories-popup',
                scope: $scope,
                data: {
                    list: categories,
                    category: category,
                    type: _categoryType(category),
                    callbackOptions: {
                        ctrl: 'categories',
                        afterDestroy: 'afterDestroyCallback'
                    }
                }
            });
        }

        function showEditDialog(category) {
            var categories = angular.copy(viewModel.data[category.kind]);

            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/categories/templates/categories-sub-edit.dialog.html'),
                controller: 'zze.categories.UpdateSubCtrl',
                controllerAs: 'updateSubCtrl',
                scope: $scope,
                width: 470,
                className: 'ngdialog theme-organizze zze-context_categories-popup',
                data: {
                    category: category,
                    categories: categories,
                    type: _typeTranslate('subcategory'),
                    callbackOptions: {
                        ctrl: 'categories',
                        afterUpdate: 'afterUpdateCallback',
                        afterDestroy: 'afterDestroyCallback'
                    }
                }
            });
        }

        function showSubcategoryForm(id) {
            viewModel.forms[id] = true;
            FocusFactory.setFocus('#subcategory-form-input-' + id);
        }

        function hideSubcategoryForm(id) {
            viewModel.forms[id] = false;
        }

        function afterArchiveCallback(item) {
            var categoryList = item.available ?
                viewModel.data.archived[item.kind] :
                viewModel.data[item.kind];

            var index = CollectionsFactory.findIndex(categoryList, {
                id: item.id
            });

            categoryList.splice(index, 1);

            categoryList = item.available ?
                viewModel.data[item.kind] :
                viewModel.data.archived[item.kind];

            categoryList.push(item);
            CategoriesService.getSortCategories(categoryList);
            CategoriesService.setHighlight(item.id, true);
        }

        function afterCreateCallback(item) {
            var categoryList = item.available ? viewModel.data[item.kind] : viewModel.data.archived[item.kind];

            categoryList.push(item);
            CategoriesService.getSortCategories(categoryList);
            CategoriesService.setHighlight(item.id, true);
            _getNewCategoryGroups();
        }

        function afterDestroyCallback(removedCategory, parentCategory) {
            var categoryList = removedCategory.available ?
                viewModel.data[removedCategory.kind] :
                viewModel.data.archived[removedCategory.kind];

            if (CategoriesService.isParentCategory(removedCategory)) {
                var index = CollectionsFactory.findIndex(categoryList, {
                    id: removedCategory.id
                });

                categoryList.splice(index, 1);
                _getNewCategoryGroups();
            } else {
                _.filter(categoryList, function (catg) {
                    if (catg.uuid === parentCategory) {
                        for (var i = 0; i <= (catg.children.length - 1); i++) {
                            if (catg.children[i].id === removedCategory.id) {
                                catg.children.splice(i, 1);
                                break;
                            }
                        }
                    }
                });
            }
        }

        function afterUpdateCallback(item) {
            /* jshint camelcase:false */
            var categoryList = item.available ? viewModel.data[item.kind] : viewModel.data.archived[item.kind],
                alreadyExist = false;

            if (CategoriesService.isParentCategory(item)) {
                var index = CollectionsFactory.findIndex(categoryList, {
                    id: item.id
                });

                var setAnchor = categoryList[index].name !== item.name;

                setTimeout(function () {
                    $scope.$apply(function () {
                        item.children = categoryList[index].children;
                        categoryList[index] = item;

                        CategoriesService.getSortCategories(categoryList);
                    });

                    CategoriesService.setHighlight(item.id, setAnchor);
                }, 100);
                _getNewCategoryGroups();
            } else {
                _.filter(categoryList, function (catg) {
                    if (catg.uuid === item.parent_uuid) {

                        if (catg.children) {
                            for (var i = 0; i <= (catg.children.length - 1); i++) {
                                if (catg.children[i].id === item.id) {
                                    catg.children[i] = item;
                                    CategoriesService.getSortCategories(catg.children);
                                    CategoriesService.setHighlight(item.id, false);
                                    alreadyExist = true;
                                    break;
                                }
                            }
                        }

                        if (!alreadyExist) {
                            if (!catg.children) {
                                catg.children = [];
                            }

                            catg.children.push(item);
                            CategoriesService.getSortCategories(catg.children);
                            CategoriesService.setHighlight(item.id, true);
                        }
                    }
                });
            }
        }

        function _getCategories() {
            var promise = CategoriesService.fetchCategories({ splitArchived: true });
            viewModel.tracker.loadCategories.addPromise(promise);
            promise.then(function (categories) {
                viewModel.data = categories;
            });
        }

        function _isLastActiveCategory() {
            if (viewModel.tabActive === viewModel.tab.tabExpenses) {
                return viewModel.data.expenses.length === 1;
            } else {
                return viewModel.data.earnings.length === 1;
            }
        }

        function _getNewCategoryGroups() {
            var prmCategories = CategoriesService.fetchNewCategoryGroups();
            viewModel.tracker.loadNewCategoriesGroup.addPromise(prmCategories);

            prmCategories.then(function (resp) {
                viewModel.newCategoryGroup.data = resp;
            });
        }

        function _categoryType(category) {
            var type = CategoriesService.isParentCategory(category) ? 'category' : 'subcategory';
            return _typeTranslate(type);
        }

        function _typeTranslate(categoryType) {
            return $filter('translate')('categories.' + categoryType);
        }

        function _alreadyCreateNewCategories() {
            var createNewExpense = _.filter(viewModel.data.expenses, function (catg) {
                return !catg.fixed;
            });

            var createNewEarning = _.filter(viewModel.data.earnings, function (catg) {
                return !catg.fixed;
            });

            return createNewExpense.length > 0 || createNewEarning > 0;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.entityUsers')
        .controller('zze.entityUsers.EntityUsersCtrl', entityUsersCtrl);

    entityUsersCtrl.$inject = ['$injector', '$scope'];

    function entityUsersCtrl ($injector, $scope) {

        /* jshint validthis:true */
        var viewModel = this,

            $filter = $injector.get('$filter'),

            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            EntityUsersFactory = $injector.get('zze.entityUsers.entityUsersFactory'),
            Dialog = $injector.get('ngDialog'),

            publicMethods = {
                openFormDialog: openFormDialog,
                verifyNewUser: verifyNewUser
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = {};

            getEntityUsers();

        }

        function getEntityUsers() {
            var url = ContextFactory.getEndPoint('index');
            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = resp.data;
            });
        }

        function openFormDialog (userType) {
            var humanizedUserTypes = EntityUsersFactory.getHumanizedUserTypes(),
            data = {};
            data.permissions = {};
            data.newUser = true;
            data.humanizedUserType = humanizedUserTypes[userType];
            data.role = userType;

            if (userType === "custom") {
                data.permissions = EntityUsersFactory.getDefaultCustomPermissions();
            }

            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/entity-users/templates/user-form.dialog.html'),
                controller: 'zze.entityUsers.UserFormDialogCtrl',
                controllerAs: 'userForm',
                width: 470,
                showClose: true,
                closeByNavigation: false,
                closeByDocument: false,
                data: data,
                scope: $scope
            });
        }

        function verifyNewUser (type) {
            EntityUsersFactory.verifyNewUser(type, $scope);
        }

    }

})();

(function () {
    'use strict';

    angular.module('zze.entityUsers')
        .controller('zze.entityUsers.UserFormDialogCtrl', UserFormDialogCtrl);

    UserFormDialogCtrl.$inject = ['$injector', '$scope', '$timeout'];

    function UserFormDialogCtrl($injector, $scope, $timeout) {
        /*jshint validthis:true */
        var viewModel = this,
            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            EntityUsersFactory = $injector.get('zze.entityUsers.entityUsersFactory'),

            publicMethods = {
                showManageCheckbox: showManageCheckbox,
                updatePermissions: updatePermissions,
                createInvitation: createInvitation,
                setActiveStep: setActiveStep,
                checkActiveStep: checkActiveStep,
                checkPermissions: checkPermissions
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = $scope.ngDialogData;

            if (viewModel.data.newUser) {
                viewModel.activeStep = 1;
            }else {
                viewModel.activeStep = 2;
            }

            viewModel.permissionsOptions = EntityUsersFactory.getPermissionsOptions();

            viewModel.permissionsOptions.forEach(function(option) {
                option.readChecked = readChecked(option.objectModel);
                option.manageChecked = manageChecked(option.objectModel);
            });

            focusOnName();

        }

        function checkPermissions (index) {
            var item = viewModel.permissionsOptions[index];

            if (item.manageChecked) {
                viewModel.permissionsOptions[index].readChecked = true;
            }
        }

        function readChecked(option) {
            return viewModel.data.permissions[option] === "manage" || viewModel.data.permissions[option] === "read";
        }

        function manageChecked(option) {
            return viewModel.data.permissions[option] === "manage";
        }

        function showManageCheckbox(model) {
            return viewModel.data.permissions[model] !== null;
        }

        function setActiveStep(step) {
            if (viewModel.data.role === "custom") {
                viewModel.activeStep = step;
            } else {
                createInvitation();
            }
        }

        function checkActiveStep(step) {
            return viewModel.activeStep === step;
        }

        function createInvitation() {
            var url = ContextFactory.getEndPoint('create_invitation'),
            promise = CrudFactory.post(url, {
              invitation: {
                    name: viewModel.data.name,
                    email: viewModel.data.email,
                    role: viewModel.data.role,
                    permissions: sanitizePermissions()
                }
            });
            viewModel.tracker.loadPage.addPromise(promise);
            promise.then(function (resp) {
                $scope.$parent.entityUsers.data.invitations[checkRoleGroup(resp.data.role)].push(resp.data);
                var message = 'Configurações salvas';
                MessageFactory.setFlash(message, 'success');
                $scope.closeThisDialog();
            });
        }

        function checkRoleGroup(role) {
            var options = { sheldon: "administrators", leonard: "supervisors", operator: "operators", custom: "custom" };
            return options[role];
        }

        function updatePermissions() {
            var url = ContextFactory.getEndPointProccess({
                method: 'update',
                replace: ':id',
                value:  viewModel.data.id
            }),
            message = 'Configurações salvas',
            promise = CrudFactory.put(url, { permissions: sanitizePermissions() });
            viewModel.tracker.loadPage.addPromise(promise);
            promise.then(function (resp) {
                viewModel.data = resp.data;
                MessageFactory.setFlash(message, 'success');
                $scope.closeThisDialog();
            });
        }

        function sanitizePermissions () {

            viewModel.permissionsOptions.forEach(function(option) {
                if (option.readChecked && !option.manageChecked) {
                    viewModel.data.permissions[option.objectModel] = "read";
                }else if (option.manageChecked) {
                    viewModel.data.permissions[option.objectModel] = "manage";
                }else {
                    viewModel.data.permissions[option.objectModel] = null;
                }
            });

            return viewModel.data.permissions;
        }

        function focusOnName() {
            $timeout(function() {
                var element = angular.element(document.querySelector("#input-name"));
                element.focus();
            }, 50);
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.entityUsers')
        .controller('zze.entityUsers.EntityUserCtrl', EntityUserCtrl);

    EntityUserCtrl.$inject = ['$injector', '$scope'];

    function EntityUserCtrl ($injector, $scope) {
        var viewModel = this,
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            $filter = $injector.get('$filter'),
            Dialog = $injector.get('ngDialog'),

            publicMethods = {
                setUser: setUser,
                showDestroyLink: showDestroyLink,
                openFormDialog: openFormDialog,
                destroyUser: destroyUser,
                destroyInvitation: destroyInvitation,
                resendInvitation: resendInvitation
            };

        _.extend(viewModel, publicMethods);

        function setUser (data) {
            viewModel.data = data;
        }

        function showDestroyLink () {
            /* jshint camelcase:false */
            return window.Context.permissions.user_account === "manage";
        }

        function destroyUser() {
            var url = ContextFactory.getEndPointProccess({
                method: 'destroy',
                replace: ':id',
                value: viewModel.data.id
            });
            var promise = CrudFactory.destroy(url);
            var message = 'Usuário excluído com sucesso';

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                $scope.entityUsers.data = resp.data;
                MessageFactory.setFlash(message, 'success');
            });
        }

        function destroyInvitation() {
            var url = ContextFactory.getEndPointProccess({
                method: 'destroy_invitation',
                replace: ':invitation_id',
                value: viewModel.data.id
            });
            var promise = CrudFactory.destroy(url);
            var message = 'Convite cancelado com sucesso';

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                $scope.entityUsers.data = resp.data;
                MessageFactory.setFlash(message, 'success');
            });
        }

        function resendInvitation() {
            var url = ContextFactory.getEndPointProccess({
                method: 'resend_invitation',
                replace: ':invitation_id',
                value: viewModel.data.id
            });
            var promise = CrudFactory.put(url);
            var message = 'Convite reenviado com sucesso';

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {
                $scope.entityUsers.data = resp.data;
                MessageFactory.setFlash(message, 'success');
            });
        }

        function openFormDialog () {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/entity-users/templates/user-form.dialog.html'),
                controller: 'zze.entityUsers.UserFormDialogCtrl',
                controllerAs: 'userForm',
                width: 470,
                showClose: true,
                closeByNavigation: false,
                closeByDocument: false,
                data: viewModel.data
            });
        }
    }
})();

(function () {
    'use strict';
    angular.module('zze.reminders')
        .controller('zze.reminders.RemindersIndexCtrl', remindersIndexCtrl);

    remindersIndexCtrl.$inject = ['$injector', '$scope'];

    function remindersIndexCtrl ($injector, $scope) {

        /* jshint validthis:true */
        var viewModel = this,
            $filter = $injector.get('$filter'),
            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
                save: save,
                saveAlertsDays: saveAlertsDays,
                removeEmail: removeEmail,
                activateBrowserNotifications: activateBrowserNotifications,
                deactivateBrowserNotifications: deactivateBrowserNotifications
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

            $scope.main.setContentClass("settings categories");

            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            getReminders();

            viewModel.humanizedWeekDays = $filter('translate')('alerts.weekdays').split(',');
            viewModel.weekDays = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"];

            var OneSignal = window.OneSignal || [];

            OneSignal.push(function() {
                viewModel.browserSupportNotifications = OneSignal.isPushNotificationsSupported();
            });

            OneSignal.push(function() {
                OneSignal.getUserId(function(userId) {
                    $scope.$apply(function() {
                        viewModel.browserNotificationsActived = !_.isBlank(userId);
                    });
                });
            });

            OneSignal.push(function() {
                OneSignal.on('subscriptionChange', function (isSubscribed) {
                    if (isSubscribed) {
                        OneSignal.getUserId(function(userId) {
                            if (userId) {
                                var url = ContextFactory.getEndPoint('update', 'user_accounts');
                                /* jshint camelcase:false */
                                CrudFactory.put(url, {user_account:{one_signal_web_id: userId}});
                            }
                        });
                    }
                    $scope.$apply(function(){
                        viewModel.browserNotificationsActived = isSubscribed;
                    });
                });
            });

            var browserName = getBrowserName();

            switch(browserName) {
                case 'firefox':
                    viewModel.browserImagePath = $filter('assetPath')('images/application/images-svg/firefox.svg');
                    break;
                case 'chrome':
                    viewModel.browserImagePath = $filter('assetPath')('images/application/images-svg/chrome.svg');
                    break;
                case 'safari':
                    viewModel.browserImagePath = $filter('assetPath')('images/application/images-svg/safari.svg');
                    break;
                default:
                    viewModel.browserImagePath = $filter('assetPath')('images/application/images-svg/chrome.svg');
            }

            document.title = "Organizze | Alertas";
        }

        function activateBrowserNotifications () {
            var OneSignal = window.OneSignal || [];
            OneSignal.push(function(){
                OneSignal.getUserId(function(userId) {
                    /* jshint camelcase:false */
                    var url = ContextFactory.getEndPoint('update', 'user_accounts');
                    var message = $filter('translate')('settings.flash.saved');
                    CrudFactory.put(url, {user_account:{one_signal_web_id: userId}});
                    viewModel.browserNotificationsActived = true;
                    MessageFactory.setFlash(message, 'success');
                });
            });
            OneSignal.registerForPushNotifications();
        }

        function deactivateBrowserNotifications () {
            var url = ContextFactory.getEndPoint('update', 'user_accounts');
            var message = $filter('translate')('settings.flash.saved');
            /* jshint camelcase:false */
            CrudFactory.put(url, {user_account:{one_signal_web_id: null}});
            viewModel.browserNotificationsActived = false;
            MessageFactory.setFlash(message, 'success');
        }

        function getReminders () {
            /* jshint camelcase:false */
            var url = ContextFactory.getEndPoint('index');
            var promise = CrudFactory.getAll(url);
            viewModel.tracker.loadPage.addPromise(promise);
            promise.then(function (resp) {

                viewModel.data = resp.data;

                if ($scope.main.isAccountFree) {
                    resp.data.user_account_settings.receiving_alerts = false;
                }

                if (viewModel.browserNotificationsActived) {
                    viewModel.browserNotificationsActived = (viewModel.data.user_account_settings.one_signal_web_id !== null);
                }

            });
        }

        function save () {
            var url = ContextFactory.getEndPoint('save');
            var promise = CrudFactory.put(url, viewModel.data);
            var message = $filter('translate')('settings.flash.saved');
            $scope.main.tracker.loadHeader.addPromise(promise);
            MessageFactory.setFlash(message, 'success');
        }

        function saveAlertsDays (day) {
            /* jshint camelcase:false */
            if (viewModel.data.user_account_settings.alerts_days.includes(day)) {
                if (viewModel.data.user_account_settings.alerts_days.length === 1) {
                    viewModel.data.user_account_settings.receiving_alerts = false;
                } else {
                    var index = viewModel.data.user_account_settings.alerts_days.indexOf(day);
                    viewModel.data.user_account_settings.alerts_days.splice(index, 1);
                }
            } else {
                viewModel.data.user_account_settings.alerts_days.push(day);
            }
            save();
        }

        function removeEmail (receivingEmail) {
            var url = ContextFactory.getEndPointProccess({
                method: 'destroy',
                replace: ':id',
                value: receivingEmail.id
            });
            var promise = CrudFactory.destroy(url);
            var message = $filter('translate')('alerts.emailRemovedFlash');
            $scope.main.tracker.loadHeader.addPromise(promise);
            promise.then(function (resp) {
                viewModel.data = resp.data;
                MessageFactory.setFlash(message, 'success');
            });
        }

        function getBrowserName () {
            if ((navigator.userAgent.indexOf("Opera") || navigator.userAgent.indexOf('OPR')) !== -1 ) {
                return('opera');
            } else if (navigator.userAgent.indexOf("Chrome") !== -1 ) {
                return('chrome');
            } else if (navigator.userAgent.indexOf("Safari") !== -1) {
                return('safari');
            } else if (navigator.userAgent.indexOf("Firefox") !== -1 ) {
                return('firefox');
            } else if (navigator.userAgent.indexOf("MSIE") !== -1 ) {
                return('ie');
            } else {
                return('unknown');
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.tags')
        .controller('zze.tags.TagsConfirmDialog', tagsConfirmDialog);

    tagsConfirmDialog.$inject = ['$injector', '$scope'];

    function tagsConfirmDialog ($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,

            TagsFactory    = $injector.get('zze.tags.tagsFactory'),
            CrudFactory    = $injector.get('zze.commons.crudFactory'),
            $filter        = $injector.get('$filter'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
              close: close,
              deleteTag: deleteTag
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.data = {};
            viewModel.data.name = $scope.ngDialogData.item.name;
        }

        function deleteTag() {
            var url = ContextFactory.getEndPointProccess({
                method: 'destroy',
                replace: ':id',
                value: $scope.ngDialogData.item.uid
            });
            var promise = CrudFactory.destroy(url);
            var message = $filter('translate')('settings.tags.flash.deleted');

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {

                $scope.$parent.tagsIndex.reloadViewModelData(TagsFactory.availableTags(resp.data));

                MessageFactory.setFlash(message, 'success');

                close();

            }).catch(function () {
                MessageFactory.setFlash('Desculpe, tivemos problemas em excluir esta tag.', 'error');
                close();
            });
        }

        function close () {
          $scope.closeThisDialog();
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.tags')
        .controller('zze.tags.TagsFormDialog', tagsFormDialog);

    tagsFormDialog.$inject = ['$injector', '$scope'];

    function tagsFormDialog ($injector, $scope) {
        /* jshint validthis:true */
        var viewModel = this,
            isNewRegister = $scope.ngDialogData.item ? false : true,

            TagsFactory    = $injector.get('zze.tags.tagsFactory'),
            CrudFactory    = $injector.get('zze.commons.crudFactory'),
            $filter        = $injector.get('$filter'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
                getTitleDialog: getTitleDialog,
                save: save
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.data = {};
            viewModel.data.name = isNewRegister ? '' : $scope.ngDialogData.item.name;
        }

        function getTitleDialog() {
            return isNewRegister ? $filter('translate')('settings.tags.form.new') : $filter('translate')('settings.tags.form.edit');
        }

        function save() {
            var url = '',
                promise,
                message = isNewRegister ? $filter('translate')('settings.tags.flash.created') : $filter('translate')('settings.tags.flash.updated'),
                hasError = MessageFactory.checkError(viewModel.form.$error);

            if (hasError) {
                return;
            }

            if (isNewRegister) {
                url = ContextFactory.getEndPoint('create');
                promise = CrudFactory.post(url, viewModel.data);
            } else {
                url = ContextFactory.getEndPointProccess({
                    method: 'update',
                    replace: ':id',
                    value: $scope.ngDialogData.item.uid
                });

                promise = CrudFactory.put(url, viewModel.data);
            }

            $scope.main.tracker.loadHeader.addPromise(promise);

            promise.then(function (resp) {

                $scope.$parent.tagsIndex.reloadViewModelData(TagsFactory.availableTags(resp.data));

                MessageFactory.setFlash(message, 'success');

                $scope.closeThisDialog();
            });

        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.tags')
        .controller('zze.tags.TagsIndexCtrl', tagsIndexCtrl);

    tagsIndexCtrl.$inject = ['$injector', '$scope'];

    function tagsIndexCtrl ($injector, $scope) {

        /* jshint validthis:true */
        var viewModel = this,

            $filter = $injector.get('$filter'),

            TagsFactory = $injector.get('zze.tags.tagsFactory'),
            PromiseTracker = $injector.get('promiseTracker'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            Dialog = $injector.get('ngDialog'),

            publicMethods = {
                showFormDialog: showFormDialog,
                showConfirmDialog: showConfirmDialog,
                reloadViewModelData: reloadViewModelData
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            $scope.main.setContentClass("settings categories");

            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            viewModel.data = TagsFactory.getDataFake();

            _getTags();

            document.title = "Organizze | Tags";
        }

        function showFormDialog (item) {
            Dialog.open({
                scope: $scope,
                template: $filter('assetPath')('templates/modules/settings/tags/templates/tags-form-dialog.html'),
                controller: 'zze.tags.TagsFormDialog',
                controllerAs: 'tagsFormDialog',
                width: 470,
                data: {
                    item: item
                }
            });
        }

        function showConfirmDialog (item) {
            Dialog.open({
                scope: $scope,
                template: $filter('assetPath')('templates/modules/settings/tags/templates/tags-confirm-dialog.html'),
                controller: 'zze.tags.TagsConfirmDialog',
                controllerAs: 'tagsConfirmDialog',
                width: 390,
                data: {
                    item: item
                }
            });
        }

        function reloadViewModelData (data) {
            viewModel.data = data;
            if ( viewModel.data.length === 0 ) {
                _getTags();
            }
        }

        function _getTags () {
            var url = ContextFactory.getEndPoint('index');

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = TagsFactory.availableTags(resp.data);
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.creditCard')
        .controller('zze.creditCard.creditCardInvoicesSelector', CreditCardInvoicesSelectorCtrl);

    CreditCardInvoicesSelectorCtrl.$inject = ['$injector', '$scope'];

    function CreditCardInvoicesSelectorCtrl($injector, $scope) {
        var viewModel = this,

            $filter = $injector.get('$filter'),
            InvoicesFactory = $injector.get('zze.creditCard.CreditCardInvoices'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),

            publicMethods = {
                getInvoice: getInvoice,
                getConfigPopover: getConfigPopover,
                setNewInvoice: setNewInvoice,
                setShowInvoices: setShowInvoices
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.invoiceSelected = {};
            viewModel.invoiceSelectedOptions = [];

            viewModel.status = {
                showInvoices: false
            };
        }

        function setShowInvoices(status) {
            viewModel.status.showInvoices = status;
        }

        function getInvoice(obj) {
            if (obj.creditCardInvoiceId) {
                InvoicesFactory.getCreditCardInvoiceId(obj.creditCard.id, obj.creditCardInvoiceId).then(function (resp) {
                    viewModel.invoiceSelected = resp.data;
                    _buildOptions();
                });
            } else {
                InvoicesFactory.getInvoiceFor(obj.creditCard.id, obj.date).then(function (resp) {
                    viewModel.invoiceSelected = resp.data;
                    _buildOptions();
                });
            }
        }

        function getConfigPopover() {
            return {
                reCalcTop: 9,
                template: $filter('assetPath')('templates/modules/transactions/credit-card/templates/credit-card-popover-options.template.html')
            };
        }

        function setNewInvoice(invoice) {
            viewModel.invoiceSelected.date = invoice.date;
            $scope.invoices.zzeChange(invoice.id);
        }

        function _buildOptions() {
            var options = InvoicesFactory.buildOptions(viewModel.invoiceSelected),
                indexInvoiceSelected = CollectionsFactory.findIndex(options, {
                    date: viewModel.invoiceSelected.date
                });

            viewModel.invoiceSelectedOptions = options;

            setNewInvoice(options[indexInvoiceSelected]);
            setShowInvoices(true);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.AccrualBasisCtrl', AccrualBasisCtrl);

    AccrualBasisCtrl.$inject = ['$injector', '$scope'];

    function AccrualBasisCtrl ($injector, $scope) {
        var viewModel = this,

            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),

            publicMethods = {
                updatePreferences: updatePreferences
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.data = {
                accrualBasis: $scope.main.contextSource.currentEntity.preferences.accrualBasis
            };

        }

        function updatePreferences (accrualBasis) {

            viewModel.data.accrualBasis = accrualBasis;

            var url = ContextFactory.getEndPointProccess({
                    enums: 'entity_preferences',
                    method: 'update',
                    replace: ':id',
                    value: $scope.main.contextSource.currentEntity.id
                }),

                /* jshint camelcase:false */
                promise = CrudFactory.put(url, {
                    entity_preferences: {
                        transactions_accrual_basis: accrualBasis
                    }
                });

            promise.then(function () {
                var callback = $scope.ngDialogData.options || false;

                $scope.main.contextSource.currentEntity.preferences.accrualBasis = accrualBasis;

                $scope.$parent[callback.ctrl][callback.save]();
            }).catch(function () {
                MessageFactory.setFlash('Tivemos um problema ao alterar o regime contábil, por favor, tente novamente!', 'error');
            });
        }

    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.ConfirmUpdateAllCtrl', ConfirmUpdateAllCtrl);

    ConfirmUpdateAllCtrl.$inject = ['$injector', '$scope'];

    function ConfirmUpdateAllCtrl ($injector, $scope) {
        /*jshint validthis:true */
        var viewModel = this,

            publicMethods = {
                cancel: cancel,
                action: action
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

        }

        function cancel () {
            $scope.closeThisDialog();
        }

        function action () {
            $scope.$parent[$scope.ngDialogData.ctrl][$scope.ngDialogData.action]();
            $scope.closeThisDialog();
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.ConfirmCtrl', confirmCtrl);

    confirmCtrl.$inject = ['$injector', '$scope'];

    function confirmCtrl ($injector, $scope) {
        /*jshint validthis:true */
        var viewModel = this,
            $filter = $injector.get('$filter'),

            publicMethods = {
                cancel: cancel,
                action: action
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            var isRecurrence = $scope.ngDialogData.item.hasInfiniteRecurrence ||
                               $scope.ngDialogData.item.hasLimitedRecurrence;

            viewModel.transaction = $scope.ngDialogData.item.description;

            viewModel.buttons = {
                primary: {
                    label: isRecurrence ? $filter('translate')('transactions.actions.delete.deleteOnlyThis') :
                                          $filter('translate')('base.yes'),
                    class: isRecurrence
                },
                secondary: isRecurrence,
                cancel: !isRecurrence
            };

        }

        function cancel () {
            $scope.closeThisDialog();
        }

        function action (deleteRecursive) {
            $scope.$parent[$scope.ngDialogData.ctrl][$scope.ngDialogData.delete]($scope.ngDialogData.item, deleteRecursive, $scope.ngDialogData.item.transactionList);
            $scope.closeThisDialog();
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.ExportCtrl', ExportCtrl);

    ExportCtrl.$inject = ['$injector', '$scope'];

    function ExportCtrl ($injector, $scope) {
        var viewModel = this,

            $filter = $injector.get('$filter'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            StorageFactory = $injector.get('zze.utils.storageFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            publicMethods = {
                closeDialog: closeDialog,
                exportTransactions: exportTransactions
            },

            ACCOUNTS = _.union($scope.ngDialogData.accounts, $scope.ngDialogData.creditCards);

        _.extend(viewModel, publicMethods);

        init();

        function init () {

            viewModel.selectize = {
                accounts: _createSelectizeAccounts(ACCOUNTS)
            };

            /* jshint camelcase:false */
            viewModel.data = {
                start_date: StorageFactory.getSession('transactionsStartDate'),
                end_date: StorageFactory.getSession('transactionsEndDate'),
                account_uuid: 'all'
            };

            viewModel.state = 1;
        }

        function exportTransactions () {
            if (!_isFormValid()) {
                return;
            }

            var url = ContextFactory.getEndPoint('export', 'transactions');

            /* jshint camelcase:false */
            CrudFactory.post(url, viewModel.data).then(function () {
                viewModel.state = 2;
            });
        }

        function closeDialog () {
            $scope.closeThisDialog();
        }

        function _createSelectizeAccounts (accounts) {
            var dataSelectize = [];

            /* jshint camelcase:false */
            dataSelectize.push({
                archived: false,
                human_kind: 'Exporte de todas as contas de uma só vez.',
                id: 0,
                kind: 0,
                name: 'Exportar de todas as contas',
                type: 'Account',
                uuid: 'all'
            });

            for (var i=0, len = accounts.length; i < len; i++) {
                var dataAccounts = angular.copy(accounts[i]);

                dataSelectize.push(dataAccounts);
            }

            var configSelectize = {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'uuid',
                searchField: ['name', 'human_kind'],
                options: dataSelectize,
                placeholder: 'Selecione a conta.',
                onItemAdd: function () {
                    FocusFactory.setFocus('#dateStart');
                },
                render: {
                    item: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, false);
                    },
                    option: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, true);
                    }
                }
            };

            return configSelectize;
        }

        function _createItemSelectizeAccounts (item, escape, showComplement) {
            var str = '',
                classComplement = showComplement ? ' zze-text-complement' : '',
                iconLogo = item.bank ? item.bank.key : 'default',
                logotipo = $filter('assetPath')('images/application/banks/' + iconLogo + '.jpg');

            str += '<div class="zze-image-left' + classComplement + '">';
            str +=     '<img ng-src="' + logotipo + '" src="' + logotipo + '" />';

            str +=     '<span class="zze-selectize-label">' + escape(item.name) + (item.archived ? ' (inativa)' : '') + '</span>';

            // if (showComplement) {
            //     /* jshint camelcase:false */
            //     str += '<span class="zze-selectize-complement">' + escape(item.human_kind || item.flag_key) + '</span>';
            // }

            str += '</div>';

            return str;
        }

        function _isFormValid () {
            return viewModel.form && viewModel.form.$valid;
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.TransactionFilterCtrl', TransactionCtrl);

    TransactionCtrl.$inject = ['$injector', '$scope'];

    function TransactionCtrl () {
        var viewModel = this,

            publicMethods = {

            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

        }


    }
})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.TransactionsItemCtrl', TransactionsItemCtrl);

    function TransactionsItemCtrl () {
        var viewModel = this,

            publicMethods = {
                getTransactionsList: getTransactionsList
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {

        }

        function getTransactionsList (list) {
            viewModel.transactionList = list;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.NewTransactionCtrl', NewTransactionCtrl);

    NewTransactionCtrl.$inject = ['$injector', '$scope'];

    function NewTransactionCtrl($injector, $scope) {

        var viewModel = this,

            $q = $injector.get('$q'),
            $timeout = $injector.get('$timeout'),
            $filter = $injector.get('$filter'),

            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            MainFactory = $injector.get('zze.mainFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            TransactionFactory = $injector.get('zze.transactions.transactionFactory'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            UploaderFactory = $injector.get('zze.fileUpload.UploaderFactory'),
            FinhubInstitutionIcon = $injector.get('zze.finhub.finhubInstitutionIcon'),
            CategoriesService = $injector.get('zze.categories.categoriesService'),

            // ENUMS_TYPE_ACCOUNTS = $injector.get('ENUMS_TYPE_ACCOUNTS'),
            IS_EXPENSES = $scope.ngDialogData.type === 'expense',
            IS_NEW_REGISTER = !($scope.ngDialogData.item || $scope.ngDialogData.copy),
            IS_EDIT_REGISTER = !!$scope.ngDialogData.item,
            IS_COPY_REGISTER = !!$scope.ngDialogData.copy,
            ITEM_DATA = $scope.ngDialogData.item || $scope.ngDialogData.copy,

            ACTIVE_NEXT_FOCUS_ACCOUNT = false,
            ACTIVE_NEXT_FOCUS_CATEGORY = false,

            TAGS = $scope.ngDialogData.tags,
            ACCOUNTS = $scope.ngDialogData.accounts,
            CATEGORIES = $scope.ngDialogData.categories,
            CREDIT_CARDS = $scope.ngDialogData.creditCards,

            _isShowRecurrence = false,

            oldValues = {
                observation: '',
                tags: [],
                recurrence: {
                    status: null,
                    time: 2,
                    finitePeriodicity: 'monthly',
                    infinitePeriodicity: 'monthly'
                }
            },

            publicMethods = {
                save: save,
                closeDialog: closeDialog,

                setStatus: setStatus,
                setPayment: setPayment,
                setCreditCardInvoiceId: setCreditCardInvoiceId,
                setInstallmentValue: setInstallmentValue,
                getTitle: getTitle,
                getTextTypeAccount: getTextTypeAccount,
                isNewRegister: isNewRegister,
                isShowRecurrence: isShowRecurrence,
                contaisAttachments: contaisAttachments,
                isFixedCategories: isFixedCategories,
                isInvoicePayment: isInvoicePayment,
                showCategory: showCategory,

                getCreditCardInvoice: getCreditCardInvoice,
                callbackUpdateAll: callbackUpdateAll,
                updateSelectizeCategories: updateSelectizeCategories,
                showUpdateAllConfirm: showUpdateAllConfirm,
                isAutomatic: isAutomatic
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            TransactionFactory.setIsLegacyCategories(!$scope.main.fixedCategories);
            CategoriesService.setIsLegacyCategories(!$scope.main.fixedCategories);

            viewModel.tracker = PromiseTrackerService.create([
                'loadPage',
                'loadSave',
                'loadSelectizeAccounts',
                'loadSelectizeCategories',
                'loadS3'
            ]);

            viewModel.data = {
                transaction: {},
                creditCardInvoices: undefined,
                installmentValue: _getCurrencyInCentsMasked(0, true)
            };

            viewModel.status = {
                showTags: false,
                showObservation: MainFactory.entityPreferences('showObservation'),
                showRecurrence: false,
                showAttachment: MainFactory.entityPreferences('showAttachment'),
                selectizeAccounts: 'disabled'
            };

            viewModel.selectize = {
                accountIn: [],
                accountOut: [],
                categories: [],
                tags: [],
                time: _createSelectizeTimes(),
                recurrenceFinite: _createSelectizeRecurrency('finite'),
                recurrenceInfinite: _createSelectizeRecurrency('infinite')
            };

            _getTags();

            _getS3UploadOptions();

            _getDatasServer();
            if (IS_NEW_REGISTER) {
                _formStartDefault(true);
            } else {
                var currencyConfig = $scope.main.contextSource.currency;
                /* jshint camelcase:false */
                var subunitToUnit = parseFloat(currencyConfig.subunit_to_unit || 100);
                if (subunitToUnit <= 0) { subunitToUnit = 100.0; }

                viewModel.data.transaction = {
                    activity_type: ITEM_DATA.activityType,
                    done: ITEM_DATA.done ? 1 : 0,
                    date: ITEM_DATA.date,
                    description: ITEM_DATA.description,
                    amount: (ITEM_DATA.amountInCents || 0) / subunitToUnit,
                    account_uuid: ITEM_DATA.isCreditCard ? ITEM_DATA.creditCardUuid : ITEM_DATA.account.uuid,
                    tag_uuid: ITEM_DATA.categoryUuid,
                    observation: ITEM_DATA.complement.observation,
                    credit_card_invoice_id: ITEM_DATA.creditCardInvoiceId,
                    attachments_attributes: {}
                };

                viewModel.data.account_type = ITEM_DATA.accountType;

                /* jshint camelcase:false */
                if (ITEM_DATA.hasInfiniteRecurrence || ITEM_DATA.hasLimitedRecurrence || ITEM_DATA.recurrence_uuid) {
                    viewModel.data.transaction.recurrence_update = 'update_only_this';
                } else {
                    viewModel.data.transaction.times = 2;
                    viewModel.data.transaction.finite_periodicity = 'monthly';
                    viewModel.data.transaction.infinite_periodicity = 'monthly';
                }

                setInstallmentValue();

                /* jshint camelcase:false */
                viewModel.joined_tags = TransactionFactory.getTagsArray(ITEM_DATA.complement.tags, 'name');

                viewModel.status.showTags = ITEM_DATA.complement.tags.length;
                viewModel.status.showObservation = ITEM_DATA.complement.observation;

                viewModel.status.showRecurrence = ITEM_DATA.hasInfiniteRecurrence || ITEM_DATA.hasLimitedRecurrence || ITEM_DATA.recurrence_uuid;
                viewModel.status.showAttachment = (ITEM_DATA.attachments_count && ITEM_DATA.attachments_count > 0) ? ITEM_DATA.attachments_count : ITEM_DATA.attachmentsCount;

                _isShowRecurrence = !viewModel.status.showRecurrence;

                // Reset recurrence.
                if (IS_COPY_REGISTER) {
                    _resetRecurrence();
                }
            }

            $scope.$watch('transaction.data.transaction.activity_type', function (newVal, oldVal) {
                if (_.isBlank(newVal)) {
                    return;
                }
                if (newVal !== oldVal) {
                    if (newVal === 1) {
                        IS_EXPENSES = false;
                    } else {
                        IS_EXPENSES = true;
                    }
                    _createSelectizeCategories(); // TODO: make-it actually reload the selectize.
                }
            });
        }

        function isAutomatic() {
            if (IS_EDIT_REGISTER) {
                return $scope.ngDialogData.item.isAutomatic;
            }
        }

        function save(type) {

            if (!_isFormValid()) {
                return;
            }

            /* jshint camelcase:false */
            var accountUsed = angular.copy(viewModel.data.transaction.account_uuid),
                promise;

            viewModel.data.transaction.joined_tags = TransactionFactory.getTagsString(viewModel.joined_tags);

            _checkAndResetSelectize();

            _setAttachmentsAttributes();

            if (IS_NEW_REGISTER || IS_COPY_REGISTER) {
                viewModel.data.transaction.finite = viewModel.data.recurrence === 'finite';
                viewModel.data.transaction.infinite = viewModel.data.recurrence === 'infinite';

                promise = TransactionFactory.create(viewModel.data);
            } else {
                viewModel.data.transaction.finite = viewModel.data.recurrence === 'finite';
                viewModel.data.transaction.infinite = viewModel.data.recurrence === 'infinite';

                promise = TransactionFactory.update(ITEM_DATA.id, viewModel.data);
            }

            viewModel.tracker.loadSave.addPromise(promise);
            promise.then(function (resp) {
                var callback = $scope.ngDialogData.options || false;

                if (IS_NEW_REGISTER && callback || IS_COPY_REGISTER && callback) {
                    $scope.$parent[callback.ctrl][callback.save](resp.data, callback.transactionList);
                }

                if (IS_EDIT_REGISTER && callback) {
                    $scope.$parent[callback.ctrl][callback.edit](resp.data, callback.transactionList, viewModel.data);
                    $scope.$parent.barFooter.toogleControlBar(false);
                }
                if ($scope.billToPay) {
                    $scope.billToPay.getBills();
                }
                if ($scope.billToReceive) {
                    $scope.billToReceive.getBills();
                }
                if (type === 'saveAndNew') {
                    ACTIVE_NEXT_FOCUS_ACCOUNT = false;
                    ACTIVE_NEXT_FOCUS_CATEGORY = false;

                    viewModel.uploader.queue = [];

                    _formStartDefault(false);
                    _resetRecurrence();

                    viewModel.form.$setPristine();

                    MessageFactory.setFlash($filter('translate')('transactions.actions.add.success'), 'success');
                    FocusFactory.setFocus('#showDescription');

                    _getTags();

                    viewModel.data.transaction.account_uuid = accountUsed;
                    getCreditCardInvoice();

                } else {
                    $scope.closeThisDialog('saved');
                }
            }).catch(function () {
                MessageFactory.setFlash($filter('translate')('transactions.actions.add.error'), 'error');
            });
        }

        function showUpdateAllConfirm() {
            TransactionFactory.showUpdateAllConfirm({
                scope: $scope,
                data: {
                    ctrl: 'transaction',
                    action: 'callbackUpdateAll'
                }
            });
        }

        function setStatus(element, status, focus) {

            viewModel.status[element] = status;

            if (element === 'showRecurrence') {
                /* jshint camelcase:false */
                if (status) {
                    viewModel.data.recurrence = oldValues.recurrence.status;
                    viewModel.data.transaction.times = oldValues.recurrence.time;
                    viewModel.data.transaction.finite_periodicity = oldValues.recurrence.finitePeriodicity;
                    viewModel.data.transaction.infinite_periodicity = oldValues.recurrence.infinitePeriodicity;
                } else {
                    /* jshint camelcase:false */
                    oldValues.recurrence = {
                        status: viewModel.data.recurrence,
                        time: viewModel.data.transaction.times,
                        finitePeriodicity: viewModel.data.transaction.finite_periodicity,
                        infinitePeriodicity: viewModel.data.transaction.infinite_periodicity
                    };

                    viewModel.data.recurrence = false;
                }
            }

            if (element === 'showObservation') {
                if (status) {
                    viewModel.data.transaction.observation = oldValues.observation;
                } else {
                    oldValues.observation = viewModel.data.transaction.observation;
                    viewModel.data.transaction.observation = '';
                }
            }

            /* jshint camelcase:false */
            if (element === 'showTags') {
                if (status) {
                    viewModel.joined_tags = oldValues.tags;
                } else {
                    oldValues.tags = viewModel.joined_tags;
                    viewModel.joined_tags = [];
                }
            }

            if (focus && viewModel.status[element] && element !== 'showRecurrence') {
                // Required to end only to end as animations.
                setTimeout(function () {
                    FocusFactory.setFocus('#' + element);
                }, 300);
            }
        }

        function setPayment() {
            viewModel.data.transaction.done = angular.copy(viewModel.data.transaction.done) === 0 ? 1 : 0;
        }

        function setCreditCardInvoiceId(invoiceId) {
            /* jshint camelcase:false */
            if (IS_NEW_REGISTER || IS_COPY_REGISTER || IS_EDIT_REGISTER && viewModel.data.account_type === 'Account' ||
                IS_EDIT_REGISTER && viewModel.data.account_type === 'CreditCard' &&
                invoiceId !== viewModel.data.transaction.credit_card_invoice_id && invoiceId !== undefined) {

                viewModel.data.transaction.credit_card_invoice_id = invoiceId;
            }
        }

        function setInstallmentValue() {
            var installmentValue = TransactionFactory.getInstallmentValue(viewModel.data.transaction.amount, viewModel.data.transaction.times);
            viewModel.data.installmentValue = _getCurrencyInCentsMasked(installmentValue, true);
        }

        function closeDialog() {
            $scope.closeThisDialog();
        }

        function getTitle() {
            return _getTextStatusAccount() + ' ' + getTextTypeAccount();
        }

        function getTextTypeAccount() {
            return IS_EXPENSES ? $filter('translate')('transactions.add.expense').toLowerCase() : $filter('translate')('transactions.add.earning').toLowerCase();
        }

        function getCreditCardInvoice() {
            /* jshint camelcase:false */
            var creditCard = CollectionsFactory.findBy(CREDIT_CARDS, {
                uuid: viewModel.data.transaction.account_uuid
            });

            if (creditCard) {

                if (IS_NEW_REGISTER || IS_EDIT_REGISTER && viewModel.data.account_type === 'Account') {
                    viewModel.data.transaction.credit_card_invoice_id = undefined;
                }

                if (IS_NEW_REGISTER || IS_COPY_REGISTER || IS_EDIT_REGISTER && !viewModel.data.transaction.credit_card_invoice_id) {
                    viewModel.data.invoice = {
                        date: viewModel.data.transaction.date,
                        creditCard: creditCard
                    };
                } else {
                    viewModel.data.invoice = {
                        creditCardInvoiceId: viewModel.data.transaction.credit_card_invoice_id,
                        creditCard: creditCard
                    };
                }

                viewModel.data.isCreditCardSelected = true;
                viewModel.data.transaction.done = 1;
            } else {
                viewModel.data.invoice = undefined;
                viewModel.data.isCreditCardSelected = false;

                viewModel.data.transaction.done = moment(viewModel.data.transaction.date).isSameOrBefore($scope.main.contextSource.today) ? 1 : 0;
            }
        }

        function showCategory() {
            return isInvoicePayment() && isFixedCategories();
        }

        function isInvoicePayment() {
            if (!$scope.ngDialogData.item) {
                return false;
            }

            return $scope.ngDialogData.item.isInvoicePayment &&
                $scope.ngDialogData.item.isCreditCardBillsPayment;
        }

        function isFixedCategories() {
            return $scope.main.contextSource.currentEntity.fixedCategories;
        }

        function isNewRegister() {
            return IS_NEW_REGISTER;
        }

        function isShowRecurrence() {
            return _isShowRecurrence;
        }

        function contaisAttachments() {
            var count = 0;

            for (var i = 0, len = viewModel.uploader.queue.length; i < len; i++) {
                if (!viewModel.uploader.queue[i].destroyed) {
                    count++;
                }
            }

            return count > 0;
        }

        function callbackUpdateAll() {
            /* jshint camelcase:false */
            viewModel.data.transaction.recurrence_update = 'update_only_this';
        }

        function updateSelectizeCategories(isExpense) {
            IS_EXPENSES = isExpense;

            viewModel.tracker.loadSelectizeCategories.addPromise($timeout(function () {
                FocusFactory.setFocus('#showCategories');
            }, 1500));

            /* jshint camelcase:false */
            viewModel.data.transaction.tag_uuid = null;
            _createSelectizeCategories();
        }

        function _formStartDefault(useGetMostUsed) {
            var dateDefault = TransactionFactory.checkDefaultDate($scope.main.contextSource.today) || moment(new Date()).format("YYYY-MM-DD");
            /* jshint camelcase:false */
            viewModel.data.transaction = {
                amount: 0,
                activity_type: IS_EXPENSES ? 0 : 1,
                done: 1,
                times: 2,
                date: dateDefault,
                finite_periodicity: 'monthly',
                infinite_periodicity: 'monthly',
                attachments_attributes: {}
            };

            viewModel.data.installmentValue = _getCurrencyInCentsMasked(0, true);

            /* jshint camelcase:false */
            viewModel.joined_tags = [];

            viewModel.status.showTags = false;
            viewModel.status.showRecurrence = false;
            viewModel.status.showAttachment = false;

            _isShowRecurrence = true;

            if (useGetMostUsed) {
                _getMostUsed();
            }
        }

        function _getCurrencyInCentsMasked(valueInCents, symbol) {
            return CurrencyFactory.getCurrencyInCentsMasked(valueInCents, $scope.main.contextSource.currency, symbol);
        }

        function _getTextStatusAccount() {
            return IS_NEW_REGISTER ? $filter('translate')('transactions.actions.new') :
                IS_COPY_REGISTER ? $filter('translate')('transactions.actions.copy') :
                    $filter('translate')('transactions.actions.editing');
        }

        function _getMostUsed() {
            if ($scope.ngDialogData.setAccount) {
                /* jshint camelcase:false */
                viewModel.data.transaction.account_uuid = $scope.ngDialogData.setAccount;
                return;
            }

            if (sessionStorage.getItem('transactionsFilterAccount')) {
                var obj = JSON.parse(sessionStorage.getItem('transactionsFilterAccount'));

                viewModel.data.transaction.account_uuid = obj.uuid;

                return;
            }

            var url = ContextFactory.getEndPoint('most_used', 'accounts'),
                promise = CrudFactory.getAll(url);

            promise.then(function (resp) {
                /* jshint camelcase: false */
                viewModel.data.transaction.account_uuid = resp.data.uuid;
            });
        }

        function _getAccountsAndCreditCards() {
            var prmAccounts = TransactionFactory.getAccountsApi(),
                prmCreditCards = TransactionFactory.getCreditCardsApi(),
                prmTime = $timeout(1000),
                prmAll = $q.all([prmAccounts, prmCreditCards, prmTime]);

            viewModel.tracker.loadSelectizeAccounts.addPromise(prmAll);

            prmAll.then(function (resp) {
                ACCOUNTS = resp[0].data;
                CREDIT_CARDS = resp[1].data;

                _createSelectizeAccounts();
            });
        }

        function _getCategories() {
            TransactionFactory.setIsLegacyCategories(!$scope.main.contextSource.currentEntity.fixedCategories);

            var prmCategories = TransactionFactory.getCategoriesApi(),
                prmTime = $timeout(1000),
                prmAll = $q.all([prmCategories, prmTime]);

            viewModel.tracker.loadSelectizeCategories.addPromise(prmAll);

            prmAll.then(function (resp) {
                CATEGORIES = resp[0];
                _createSelectizeCategories();
            });
        }

        function _getTags() {
            TransactionFactory.getTagsApi().then(function (resp) {
                TAGS = resp.data;

                _createSelectizeTags();
            });
        }

        function _getDatasServer() {

            if (!ACCOUNTS || !CREDIT_CARDS) {
                _getAccountsAndCreditCards();
            } else {
                _createSelectizeAccounts();
            }

            if (!CATEGORIES) {
                _getCategories();
            } else {
                _createSelectizeCategories();
            }

            if (!TAGS) {
                _getTags();
            } else {
                _createSelectizeTags();
            }

            setTimeout(function () {
                FocusFactory.setFocus('#showDescription');
            }, 500);

            setTimeout(function () {
                ACTIVE_NEXT_FOCUS_ACCOUNT = true;
                ACTIVE_NEXT_FOCUS_CATEGORY = true;
            }, 2000);
        }

        function _getS3UploadOptions() {
            /* jshint camelcase:false */
            var url = ContextFactory.getEndPoint('s3_upload_options', 'enums');

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadS3.addPromise(promise);

            promise.then(function (resp) {
                viewModel.uploader = UploaderFactory.create(viewModel, resp.data);
                if (!IS_NEW_REGISTER && (ITEM_DATA.attachments_count || ITEM_DATA.attachmentsCount)) {
                    _initializeUploaderQueue(ITEM_DATA);
                }
            });
        }

        function _initializeUploaderQueue(item) {
            if (IS_COPY_REGISTER) {
                return;
            }

            item.complement.attachments.each(function (file) {
                var item = {
                    file: {
                        id: file.id,
                        /* jshint camelcase: false */
                        human_type: file.fileHumanType,
                        fileName: file.fileFileName,
                        url: file.fileFileUrl
                    },
                    destroyed: false,
                    progress: 100,
                    isUploaded: true,
                    isSuccess: true
                };

                viewModel.uploader.queue.push(item);
            });

            viewModel.uploader.progress = 100;
        }

        function _setAttachmentsAttributes() {
            var files = viewModel.uploader.queue;

            for (var i = 0, len = files.length; i < len; i++) {
                /* jshint camelcase: false */

                viewModel.data.transaction.attachments_attributes[i] = {
                    id: files[i].file.id,
                    _destroy: files[i].destroyed ? 1 : 0,
                    file_file_url: files[i].file.url,
                    file_file_name: files[i].file.name,
                    file_human_type: files[i].file.human_type
                };
            }
        }

        function _createSelectizeCategories() {
            var categories;

            if (CategoriesService.isLegacyCategories()) {
                categories = CATEGORIES;
            } else {
                var categoryKind = IS_EXPENSES ? 'expenses' : 'earnings';
                categories = _.filter(CATEGORIES, function (category) {
                    return category.kind === categoryKind;
                });
            }
            viewModel.selectize.categories = CategoriesService.getSelectizeConfig(categories, { includeChildren: true });
        }

        function _createSelectizeTimes() {
            var times = [];

            for (var i = 2; i <= 480; i++) {
                times.push({
                    value: i,
                    description: i
                });
            }

            var configSelectize = {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'value',
                labelField: 'description',
                searchField: ['description'],
                options: times,
                disabledField: true
            };

            return configSelectize;
        }

        function _createSelectizeRecurrency(type) {
            var configSelectize = {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'value',
                labelField: 'description',
                searchField: ['description'],
                options: TransactionFactory.getOptionsRecurrence(type),
                disabledField: true
            };

            return configSelectize;
        }

        function _createSelectizeTags() {
            var configSelectize = {
                plugins: ['remove_button'],
                persist: false,
                valueField: 'name',
                labelField: 'name',
                searchField: ['name'],
                options: TransactionFactory.availableTags(TAGS, $scope),
                create: function (input) {
                    return {
                        name: input
                    };
                },
                render: {
                    /* jshint camelcase:false */
                    option_create: function (data, escape) {
                        return '<div class="create">Adicionar <strong>' + escape(data.input) + '</strong>&hellip;</div>';
                    }
                },
                onOptionAdd: function () {
                    return true;
                },
                onOptionRemove: function () {
                    return true;
                }
            };

            viewModel.selectize.tags = configSelectize;
        }

        function _checkAndResetSelectize() {
            var selectizes = [
                'account_uuid',
                'finite_periodicity',
                'infinite_periodicity',
                'tag_uuid',
                'times'
            ];

            for (var i = 0, len = selectizes.length; i < len; i++) {
                var modelKey = selectizes[i];

                if (!viewModel.data.transaction[modelKey]) {
                    viewModel.data.transaction[modelKey] = null;
                }
            }

            /* jshint camelcase:false */
            if (!viewModel.joined_tags) {
                viewModel.joined_tags = null;
            }
        }

        function _resetRecurrence() {
            /* jshint camelcase:false */
            viewModel.data.transaction.times = 2;
            viewModel.data.transaction.finite_periodicity = 'monthly';
            viewModel.data.transaction.infinite_periodicity = 'monthly';
            viewModel.data.recurrence = undefined;

            _isShowRecurrence = true;
            viewModel.status.showRecurrence = false;
        }

        function _invalidSelectizeItem(item) {
            return IS_EDIT_REGISTER && item.archived && item.id !== ITEM_DATA.accountId ||
                (IS_NEW_REGISTER || IS_COPY_REGISTER) && item.archived ||
                (IS_NEW_REGISTER || IS_COPY_REGISTER) && item.automatic ||
                IS_EDIT_REGISTER && !isAutomatic() && item.automatic;
        }

        function _createSelectizeAccounts() {
            var dataSelectize = [];

            for (var i = 0, len = ACCOUNTS.length; i < len; i++) {
                var dataAccounts = angular.copy(ACCOUNTS[i]);

                if (_invalidSelectizeItem(dataAccounts)) {
                    continue;
                }

                // Class to group items.
                dataAccounts.class = 'accounts';

                dataSelectize.push(dataAccounts);
            }

            for (var j = 0, lenj = CREDIT_CARDS.length; j < lenj; j++) {
                var dataCards = angular.copy(CREDIT_CARDS[j]);

                if (_invalidSelectizeItem(dataCards)) {
                    continue;
                }

                // Class to group items.
                dataCards.class = 'cards';

                dataSelectize.push(dataCards);
            }

            var configSelectize = {
                plugins: ['clear_button'],
                persist: false,
                valueField: 'uuid',
                disabledField: true,
                labelField: 'name',
                searchField: ['name'],
                maxItems: 1,
                options: dataSelectize,
                optgroups: [{
                    value: 'cards',
                    label: 'Cartões'
                }, {
                    value: 'accounts',
                    label: 'Contas'
                }],
                optgroupField: 'class',
                placeholder: $filter('translate')('transactions.placeholders.enter_account_card'),
                render: {
                    /* jshint camelcase:false */
                    optgroup_header: function (item, escape) {
                        return '<div class="optgroup-header zze-optgroup-header">' +
                            escape(item.label) +
                            '</div>';
                    },
                    item: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, false);
                    },
                    option: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, true);
                    }
                },
                onItemAdd: function () {
                    setTimeout(function () {
                        $scope.$apply(function () {
                            getCreditCardInvoice();
                        });
                    }, 100);

                    if (ACTIVE_NEXT_FOCUS_ACCOUNT) {
                        FocusFactory.setFocus('#showCategories');
                    }
                }
            };

            viewModel.selectize.accountIn = configSelectize;
            viewModel.selectize.accountOut = configSelectize;
        }

        function _createItemSelectizeAccounts(item, escape, showComplement) {
            /* jshint camelcase:false */
            var str = '',
                isAccount = item.class === 'accounts',
                classComplement = showComplement ? ' zze-text-complement' : '',
                classComplementHidden = isAccount ? '' : ' zze-text-complement-hidden';

            str += '<div class="zze-image-left zze-truncate' + classComplementHidden + classComplement + ' option">';

            str += FinhubInstitutionIcon.buildRawHTML(item);

            str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';

            // if (isAccount && showComplement) {
            //     var humanKind = ENUMS_TYPE_ACCOUNTS[item.kind].description;
            //     str += '<span class="zze-selectize-complement">' + escape(humanKind) + '</span>';
            // }

            str += '</div>';

            return str;
        }

        function _isFormValid() {
            return viewModel.form && viewModel.form.$valid;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.NewTransferCtrl', NewTransferCtrl);

    NewTransferCtrl.$inject = ['$injector', '$scope'];

    function NewTransferCtrl($injector, $scope) {
        var viewModel = this,

            $q = $injector.get('$q'),
            $state = $injector.get('$state'),
            $filter = $injector.get('$filter'),
            $timeout = $injector.get('$timeout'),

            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            UploaderFactory = $injector.get('zze.fileUpload.UploaderFactory'),
            TransactionFactory = $injector.get('zze.transactions.transactionFactory'),
            FinhubInstitutionIcon = $injector.get('zze.finhub.finhubInstitutionIcon'),
            CategoriesService = $injector.get('zze.categories.categoriesService'),

            CATEGORIES = [],
            // ENUMS_TYPE_ACCOUNTS = $injector.get('ENUMS_TYPE_ACCOUNTS'),
            IS_NEW_REGISTER = !($scope.ngDialogData.item || $scope.ngDialogData.copy),
            IS_EDIT_REGISTER = !!$scope.ngDialogData.item,
            SET_FOCUS_ENABLED = false,
            IS_COPY_REGISTER = !!$scope.ngDialogData.copy,

            ITEM_DATA = $scope.ngDialogData.item || $scope.ngDialogData.copy,

            TAGS = $scope.ngDialogData.tags,
            ACCOUNTS = $scope.ngDialogData.accounts,
            FILTER_ACCOUNT = $scope.ngDialogData.filterAccount,

            _isShowRecurrence = false,
            oldValues = {
                status: null,
                observation: '',
                tags: [],
                recurrence: {
                    time: 2,
                    finitePeriodicity: 'monthly',
                    infinitePeriodicity: 'monthly'
                }
            },

            publicMethods = {
                save: save,
                isAutomatic: isAutomatic,
                isNewRegister: isNewRegister,
                isShowRecurrence: isShowRecurrence,
                setInstallmentValue: setInstallmentValue,
                getTitle: getTitle,
                contaisAttachments: contaisAttachments,
                getUrlImage: getUrlImage,
                hasAccounts: hasAccounts,
                setStatus: setStatus,
                redirectPremium: redirectPremium,
                closeDialog: closeDialog
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.data = {
                transference: {},
                installmentValue: _getCurrencyInCentsMasked(0, true)
            };

            viewModel.status = {
                showTags: false,
                showObservation: false,
                showRecurrence: false,
                showAttachment: true,
                showCategories: false,
                isFixedCategories: $scope.main.contextSource.currentEntity.fixedCategories
            };

            viewModel.tracker = PromiseTrackerService.create([
                'loadPage',
                'loadSave',
                'loadSelectizeCategories',
                'loadSelectizeAccounts',
                'loadS3'
            ]);

            viewModel.selectize = {
                accountIn: [],
                accountOut: [],
                categories: [],
                tags: [],
                time: _createSelectizeTimes(),
                recurrenceFinite: _createSelectizeRecurrency('finite'),
                recurrenceInfinite: _createSelectizeRecurrency('infinite')
            };

            _getS3UploadOptions();
            _getDatasServer();
            _getCategories();

            if (!IS_NEW_REGISTER) {

                /* jshint camelcase:false */
                viewModel.data.transference = {
                    date: ITEM_DATA.date,
                    description: ITEM_DATA.description,
                    observation: ITEM_DATA.complement.observation,
                    amount: ITEM_DATA.amountInCents / 100.0,
                    credit_account_uuid: ITEM_DATA.creditAccountUuid,
                    debit_account_uuid: ITEM_DATA.debitAccountUuid,
                    category_uuid: ITEM_DATA.categoryUuid,
                    attachments_attributes: {}
                };

                if (!viewModel.status.isFixedCategories) {
                    viewModel.data.transference.category_uuid = ITEM_DATA.categoryUuid;
                    viewModel.status.showCategories = ITEM_DATA.categoryUuid;
                }

                if (ITEM_DATA.hasInfiniteRecurrence || ITEM_DATA.hasLimitedRecurrence) {
                    /* jshint camelcase:false */
                    viewModel.data.transference.recurrence_update = 'update_only_this';
                } else {
                    viewModel.data.transference.times = 2;
                    viewModel.data.transference.finite_periodicity = 'monthly';
                    viewModel.data.transference.infinite_periodicity = 'monthly';
                }

                setInstallmentValue();

                /* jshint camelcase:false */
                viewModel.joined_tags = TransactionFactory.getTagsArray(ITEM_DATA.complement.tags, 'name');

                viewModel.status.showTags = ITEM_DATA.complement.tags.length;
                viewModel.status.showObservation = ITEM_DATA.complement.observation;
                viewModel.status.showRecurrence = ITEM_DATA.hasInfiniteRecurrence || ITEM_DATA.hasLimitedRecurrence;
                viewModel.status.showAttachment = ITEM_DATA.attachments_count || ITEM_DATA.attachmentsCount;

                _isShowRecurrence = !viewModel.status.showRecurrence;

                // Reset recurrence.
                if (IS_COPY_REGISTER) {
                    _resetRecurrence();
                }

            } else {
                _formStartDefault();
            }
        }

        function isNewRegister() {
            return IS_NEW_REGISTER;
        }

        function isShowRecurrence() {
            return _isShowRecurrence;
        }

        function contaisAttachments() {
            var count = 0;

            for (var i = 0, len = viewModel.uploader.queue.length; i < len; i++) {
                if (!viewModel.uploader.queue[i].destroyed) {
                    count++;
                }
            }

            return count > 0;
        }

        function setInstallmentValue() {
            var installmentValue = TransactionFactory.getInstallmentValue(viewModel.data.transference.amount, viewModel.data.transference.times);
            viewModel.data.installmentValue = _getCurrencyInCentsMasked(installmentValue, true);
        }

        function isAutomatic() {
            if (IS_EDIT_REGISTER) {
                return $scope.ngDialogData.item.isAutomatic;
            }
        }

        function save(type) {
            if (!_isFormValid()) {
                return;
            }

            /* jshint camelcase:false */
            if (viewModel.data.transference.debit_account_uuid === viewModel.data.transference.credit_account_uuid) {
                MessageFactory.setFlash($filter('translate')('transactions.details.transference.sameAccount'), 'warn');
                return;
            }

            var url = '',
                promise;

            _setAttachmentsAttributes();

            /* jshint camelcase:false */
            viewModel.data.transference.joined_tags = TransactionFactory.getTagsString(viewModel.joined_tags);

            if (IS_NEW_REGISTER || IS_COPY_REGISTER) {
                viewModel.data.transference.finite = viewModel.data.recurrence === 'finite';
                viewModel.data.transference.infinite = viewModel.data.recurrence === 'infinite';

                if (FILTER_ACCOUNT) {
                    viewModel.data.filterAccount = FILTER_ACCOUNT.uuid;
                }

                url = ContextFactory.getEndPoint('create', 'transferences');
                promise = CrudFactory.post(url, viewModel.data);
            } else {
                viewModel.data.transference.finite = viewModel.data.recurrence === 'finite';
                viewModel.data.transference.infinite = viewModel.data.recurrence === 'infinite';

                url = ContextFactory.getEndPointProccess({
                    method: 'update',
                    replace: ':id',
                    enums: 'transactions',
                    value: ITEM_DATA.id
                });

                promise = CrudFactory.put(url, viewModel.data);
            }

            viewModel.tracker.loadSave.addPromise(promise);

            promise.then(function (resp) {
                var callback = $scope.ngDialogData.options || false;

                if (IS_NEW_REGISTER && callback || IS_COPY_REGISTER && callback) {
                    $scope.$parent[callback.ctrl][callback.save](resp.data, callback.transactionList);
                }

                if (!IS_NEW_REGISTER && callback) {
                    $scope.$parent[callback.ctrl][callback.edit](resp.data, callback.transactionList);
                    $scope.$parent.barFooter.toogleControlBar(false);
                }

                if (type === 'saveAndNew') {
                    SET_FOCUS_ENABLED = false;

                    viewModel.uploader.queue = [];

                    _formStartDefault();

                    viewModel.form.$setPristine();

                    MessageFactory.setFlash($filter('translate')('transactions.actions.add.success'), 'success');
                    FocusFactory.setFocus('#accountOut');

                    _getTags();

                } else {
                    $scope.closeThisDialog();
                }
            }).catch(function () {
                MessageFactory.setFlash($filter('translate')('transactions.actions.add.error'), 'error');
            });
        }

        function setStatus(element, status, focus) {
            viewModel.status[element] = status;

            if (element === 'showRecurrence') {
                /* jshint camelcase:false */
                if (status) {
                    viewModel.data.recurrence = oldValues.recurrence.status;
                    viewModel.data.transference.times = oldValues.recurrence.time;
                    viewModel.data.transference.finite_periodicity = oldValues.recurrence.finitePeriodicity;
                    viewModel.data.transference.infinite_periodicity = oldValues.recurrence.infinitePeriodicity;
                } else {
                    oldValues.recurrence = {
                        status: viewModel.data.recurrence,
                        time: viewModel.data.transference.times,
                        finitePeriodicity: viewModel.data.transference.finite_periodicity,
                        infinitePeriodicity: viewModel.data.transference.infinite_periodicity
                    };

                    viewModel.data.recurrence = false;
                }
            }

            if (element === 'showObservation') {
                if (status) {
                    viewModel.data.transference.observation = oldValues.observation;
                } else {
                    oldValues.observation = viewModel.data.transference.observation;
                    viewModel.data.transference.observation = '';
                }
            }

            /* jshint camelcase:false */
            if (element === 'showTags') {
                if (status) {
                    viewModel.joined_tags = oldValues.tags;
                } else {
                    oldValues.tags = viewModel.joined_tags;
                    viewModel.joined_tags = [];
                }
            }

            if (focus && viewModel.status[element] && element !== 'showRecurrence') {
                // Required to end only to end as animations.
                setTimeout(function () {
                    FocusFactory.setFocus('#' + element);
                }, 300);
            }
        }

        function getTitle() {
            return IS_NEW_REGISTER ? $filter('translate')('transactions.details.transference.title') :
                IS_COPY_REGISTER ? $filter('translate')('transactions.details.transference.copyTitle') :
                    $filter('translate')('transactions.details.transference.editTitle');
        }

        function getUrlImage() {
            return $filter('assetPath')('images/application/transferencias.png');
        }

        function hasAccounts() {
            return !IS_NEW_REGISTER ||
                _.filter(ACCOUNTS, function () {
                    return true;
                }).length > 1;
        }

        function redirectPremium() {
            $state.go($scope.main.isControlle ? 'premium/controlle' : 'premium/organizze');

            closeDialog();
        }

        function _createSelectizeCategories() {
            var categories = CATEGORIES;

            viewModel.selectize.categories = CategoriesService.getSelectizeConfig(categories, { includeChildren: true });
        }

        function closeDialog() {
            $scope.closeThisDialog();
        }

        function _getS3UploadOptions() {
            /* jshint camelcase:false */
            var url = ContextFactory.getEndPoint('s3_upload_options', 'enums');

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadS3.addPromise(promise);

            promise.then(function (resp) {
                viewModel.uploader = UploaderFactory.create(viewModel, resp.data);

                if (!IS_NEW_REGISTER && (ITEM_DATA.attachments_count || ITEM_DATA.attachmentsCount)) {
                    _initializeUploaderQueue(ITEM_DATA);
                }
            });
        }

        function _initializeUploaderQueue(item) {
            if (IS_COPY_REGISTER) {
                return;
            }

            item.complement.attachments.each(function (file) {
                var item = {
                    file: {
                        id: file.id,
                        /* jshint camelcase: false */
                        human_type: file.fileHumanType,
                        fileName: file.fileFileName,
                        url: file.fileFileUrl
                    },
                    destroyed: false,
                    progress: 100,
                    isUploaded: true,
                    isSuccess: true
                };

                viewModel.uploader.queue.push(item);
            });

            viewModel.uploader.progress = 100;
        }

        function _setAttachmentsAttributes() {
            var files = viewModel.uploader.queue;

            for (var i = 0, len = files.length; i < len; i++) {
                /* jshint camelcase: false */

                viewModel.data.transference.attachments_attributes[i] = {
                    id: files[i].file.id,
                    _destroy: files[i].destroyed ? 1 : 0,
                    file_file_url: files[i].file.url,
                    file_file_name: files[i].file.name,
                    file_human_type: files[i].file.human_type
                };
            }
        }

        function _getCurrencyInCentsMasked(valueInCents, symbol) {
            return CurrencyFactory.getCurrencyInCentsMasked(valueInCents, $scope.main.contextSource.currency, symbol);
        }

        function _formStartDefault() {
            var dateDefault = sessionStorage.getItem('transactionsStartDate') === sessionStorage.getItem('transactionsEndDate') ? sessionStorage.getItem('transactionsStartDate') : $scope.main.contextSource.today;

            //console - fazer o contextSource ser carregado qdo cai na dashboard, senão a data dos novos lançamentos não
            // é devidamente carregado

            /* jshint camelcase:false */
            viewModel.data.transference = {
                amount: 0,
                times: 2,
                activityType: 1,
                description: 'Transferência',
                date: dateDefault,
                finite_periodicity: 'monthly',
                infinite_periodicity: 'monthly',
                category_uuid: 'c36edba086cef6578c6efb0070b74fd6484e9248',
                attachments_attributes: {}
            };

            viewModel.data.installmentValue = _getCurrencyInCentsMasked(0, true);

            /* jshint camelcase:false */
            viewModel.joined_tags = [];

            viewModel.status.howTags = false;
            viewModel.status.showObservation = false;
            viewModel.status.showRecurrence = false;
            viewModel.status.showCategories = false;
            viewModel.status.showAttachment = false;

            _isShowRecurrence = true;
        }

        function _getAccounts() {
            var prmAccounts = TransactionFactory.getAccountsApi(),
                prmTime = $timeout(1000),
                prmAll = $q.all([prmAccounts, prmTime]);

            viewModel.tracker.loadSelectizeAccounts.addPromise(prmAll);

            prmAll.then(function (resp) {
                ACCOUNTS = resp[0].data;

                _createSelectizeAccounts();
            });
        }

        function _getCategories() {
            TransactionFactory.setIsLegacyCategories(!$scope.main.contextSource.currentEntity.fixedCategories);

            var prmCategories = TransactionFactory.getCategoriesApi(),
                prmTime = $timeout(1000),
                prmAll = $q.all([prmCategories, prmTime]);

            viewModel.tracker.loadSelectizeCategories.addPromise(prmAll);

            prmAll.then(function (resp) {
                CATEGORIES = resp[0];
                _createSelectizeCategories();
            });
        }

        function _getTags() {
            TransactionFactory.getTagsApi().then(function (resp) {
                TAGS = resp.data;

                _createSelectizeTags();
            });
        }

        function _getDatasServer() {

            if (!ACCOUNTS) {
                _getAccounts();
            } else {
                _createSelectizeAccounts();
            }

            if (!TAGS) {
                _getTags();
            } else {
                _createSelectizeTags();
            }

            ACCOUNTS = _.filter(ACCOUNTS, function (account) {
                if (account.default) {
                    return true;
                }

                if (!account.archived) {
                    return true;
                }

                /*jshint camelcase:false*/
                if (account.uuid === viewModel.data.transference.credit_account_uuid) {
                    return true;
                }

                if (account.uuid === viewModel.data.transference.debit_account_uuid) {
                    return true;
                }

                return false;
            });
        }

        function _createSelectizeTimes() {
            var times = [];

            for (var i = 2; i <= 480; i++) {
                times.push({
                    value: i,
                    description: i
                });
            }

            var configSelectize = {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'value',
                labelField: 'description',
                searchField: ['description'],
                options: times,
                disabledField: true
            };

            return configSelectize;
        }

        function _createSelectizeRecurrency(type) {
            var configSelectize = {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'value',
                labelField: 'description',
                searchField: ['description'],
                options: TransactionFactory.getOptionsRecurrence(type),
                disabledField: true
            };

            return configSelectize;
        }

        function _createSelectizeTags() {
            var configSelectize = {
                plugins: ['remove_button'],
                persist: false,
                valueField: 'name',
                labelField: 'name',
                searchField: ['name'],
                options: TransactionFactory.availableTags(TAGS, $scope),
                create: function (input) {
                    return {
                        name: input
                    };
                },
                render: {
                    /* jshint camelcase:false */
                    option_create: function (data, escape) {
                        return '<div class="create">Adicionar <strong>' + escape(data.input) + '</strong>&hellip;</div>';
                    }
                },
                onOptionAdd: function () {
                    return true;
                },
                onOptionRemove: function () {
                    return true;
                }
            };

            viewModel.selectize.tags = configSelectize;
        }

        function _resetRecurrence() {
            /* jshint camelcase:false */
            viewModel.data.transference.times = 2;
            viewModel.data.transference.finite_periodicity = 'monthly';
            viewModel.data.transference.infinite_periodicity = 'monthly';

            _isShowRecurrence = true;
            viewModel.status.showRecurrence = false;
        }


        function _createSelectizeAccounts() {
            var dataSelectize = [];

            for (var i = 0, len = ACCOUNTS.length; i < len; i++) {
                var dataAccounts = angular.copy(ACCOUNTS[i]);

                if (!IS_NEW_REGISTER && dataAccounts.archived && !_.includes([ITEM_DATA.creditAccountUuid, ITEM_DATA.debitAccountUuid], dataAccounts.uuid) ||
                    (IS_NEW_REGISTER || IS_COPY_REGISTER) && dataAccounts.archived ||
                    (IS_NEW_REGISTER || IS_COPY_REGISTER) && dataAccounts.automatic ||
                    IS_EDIT_REGISTER && !isAutomatic() && dataAccounts.automatic) {
                    continue;
                }

                dataSelectize.push(dataAccounts);
            }

            const configSelectizeAccountOut = {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'uuid',
                searchField: ['name', 'human_kind'],
                options: dataSelectize,
                placeholder: $filter('translate')('transactions.placeholders.enter_account'),
                onItemAdd: function () { FocusFactory.setFocus('#accountIn'); },
                render: {
                    item: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, false);
                    },
                    option: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, true);
                    }
                }
            };

            const configSelectizeAccountIn = {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'uuid',
                searchField: ['name', 'human_kind'],
                options: dataSelectize,
                placeholder: $filter('translate')('transactions.placeholders.enter_account'),
                onItemAdd: function () { FocusFactory.setFocus('#amountValue'); },
                render: {
                    item: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, false);
                    },
                    option: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, true);
                    }
                }
            };

            viewModel.selectize.accountOut = configSelectizeAccountOut;
            viewModel.selectize.accountIn = configSelectizeAccountIn;

        }

        function _createItemSelectizeAccounts(item, escape, showComplement) {
            /* jshint camelcase:false */
            var str = '',
                classComplement = showComplement ? ' zze-text-complement' : '';

            str += '<div class="zze-image-left zze-truncate' + classComplement + ' option">';

            str += FinhubInstitutionIcon.buildRawHTML(item);

            str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';

            // if (showComplement) {
            //     var humanKind = ENUMS_TYPE_ACCOUNTS[item.kind].description;
            //     str += '<span class="zze-selectize-complement">' + escape(humanKind) + '</span>';
            // }

            str += '</div>';

            return str;
        }

        function _isFormValid() {
            return viewModel.form && viewModel.form.$valid;
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.OverdueCtrl', OverdueCtrl);

    OverdueCtrl.$inject = ['$injector', '$scope'];

    function OverdueCtrl ($injector, $scope) {
        var viewModel = this,

            $filter = $injector.get('$filter'),

            Dialog = $injector.get('ngDialog'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            PermissionFactory = $injector.get('zze.permissions.permissionsFactory'),
            PromiseTracker = $injector.get('promiseTracker'),
            TransactionFactory = $injector.get('zze.transactions.transactionFactory'),
            TransactionItemFactory = $injector.get('zze.transactions.transactionItemFactory'),
            MainFactory = $injector.get('zze.mainFactory'),

            publicMethods = {
                callbackPayCreditCard: callbackPayCreditCard,
                callbackDialogEdit: callbackDialogEdit,
                showCadTransaction: showCadTransaction,
                showCadTransference: showCadTransference,
                showPayCreditCard: showPayCreditCard,
                deleteTransaction: deleteTransaction,
                deleteTransactionConfirm: deleteTransactionConfirm,
                setPaymentTransaction: setPaymentTransaction
            },

            ACCOUNTS = $scope.ngDialogData.accounts;

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.tracker = {
                loadPage: PromiseTracker()
            };

            _getTransactionsOverdue();
        }

        function callbackPayCreditCard (item) {

            var id = item.paidCreditCardId + '-' + item.paidCreditCardInvoiceId;

            var index = CollectionsFactory.findIndex(viewModel.data, {
                    id: id
                }),
                newItem = viewModel.data[index];

            newItem.done = true;

            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.data.splice(index, 1);

                    if (!viewModel.data.length) {
                        $scope.closeThisDialog();
                    }

                    _calcTotalExpensesAndRevenue();
                });
            }, 250);
        }

        function callbackDialogEdit (item, transactionList) {

            var index = CollectionsFactory.findIndex(viewModel.data, {
                    id: item.id
                }),
                order = MainFactory.entityPreferences('transactionsOrder');

            $scope.$parent[$scope.ngDialogData.ctrl].callbackDialogEdit(item, transactionList);

            if (item.done) {
                _removeItemPayment(index);

                return;
            }

            if (moment(item.date).isBefore($scope.main.contextSource.today)) {
                // setTimeout(function () {
                //     $scope.$apply(function () {
                        viewModel.data[index] = _reBuildTransactionsItem(item);
                        viewModel.data = TransactionFactory.sortTransactionCollection(angular.copy(viewModel.data), order);
                    // });

                    TransactionFactory.setHighlight(item.id + '-overdue');
                // }, 500);
            }

        }

        function showPayCreditCard (item) {
            if (!PermissionFactory.checkAccessAction('transaction', ['edit'])) {
                $scope.main.showAccessDanied();
                return;
            }

            Dialog.open({
                template: $filter('assetPath')('templates/modules/transactions/templates/transactions-pay-credit-card-cad.dialog.html'),
                controller: 'zze.transactions.PayCreditCardCtrl',
                controllerAs: 'pay',
                className: 'theme-organizze transactions-dialog-theme',
                scope: $scope,
                width: 490,
                data: {
                    item: item,
                    options: {
                        ctrl: 'overdue',
                        save: 'callbackPayCreditCard'
                    }
                },
                closeByDocument: false
            });
        }

        function showCadTransaction (type, item, transactionList) {
            if (!PermissionFactory.checkAccessAction('transaction', ['edit'])) {
                $scope.main.showAccessDanied();
                return;
            }

            var _item = item,
                opts = {
                    scope: $scope,
                    data: {
                        type: type,
                        item: _item,
                        options: {
                            ctrl: 'overdue',
                            edit: 'callbackDialogEdit',
                            transactionList: transactionList || 'transactions'
                        },
                        accounts: $scope.ngDialogData.accounts,
                        categories: $scope.ngDialogData.categories,
                        creditCards: $scope.ngDialogData.creditCards,
                        tags: $scope.ngDialogData.tags
                    },
                    resolve: {
                        s3Upload: function () {
                            var url = ContextFactory.getEndPoint('s3_upload_options', 'enums');

                            return CrudFactory.getAll(url);
                        }
                    }
                };

            TransactionFactory.getTransactionComplementApi(_item).then(function (resp) {

                _item.complement = resp.data;

                TransactionFactory.showCadTransaction(opts);
            });
        }

        function showCadTransference (item, transactionList) {
            if (!PermissionFactory.checkAccessAction('transaction', ['edit'])) {
                $scope.main.showAccessDanied();
                return;
            }

            var _item = item,
                opts = {
                    scope: $scope,
                    data: {
                        item: _item,
                        options: {
                            ctrl: 'overdue',
                            edit: 'callbackDialogEdit',
                            transactionList: transactionList || 'transactions'
                        },
                        accounts: $scope.ngDialogData.accounts,
                        categories: $scope.ngDialogData.categories,
                        tags: $scope.ngDialogData.tags
                    }
                };

            TransactionFactory.getTransactionComplementApi(_item).then(function (resp) {

                _item.complement = resp.data;

                TransactionFactory.showCadTransference(opts);
            });
        }

        function setPaymentTransaction (item) {
            if (!PermissionFactory.checkAccessAction('transaction', ['edit'])) {
                $scope.main.showAccessDanied();
                return;
            }

            var index = CollectionsFactory.findIndex(viewModel.data, {
                    id: item.id
                }),
                itemView = viewModel.data[index];

            itemView.done = true;

            TransactionFactory.setPaymentTransaction(item).then(function () {
                _removeItemPayment(index);
            }).catch(function () {
                itemView.done = false;
                MessageFactory.setFlash('Desculpe, tivemos problemas em alterar o status desta conta.', 'error');
            });
        }

        function deleteTransaction (item, deleteRecursive) {

            var promise = TransactionFactory.destroy(item, deleteRecursive);

            $scope.main.tracker.loadHeader.addPromise(promise);

            viewModel.data = _.filter(angular.copy(viewModel.data), function (transaction) {

                var isRecurrence = item.recurrenceUuid !== null;

                if (isRecurrence && deleteRecursive) {
                    var isAfter = moment(item.date).isAfter(transaction.date, null, null, '[]'),
                        isSameRecurrence = transaction.recurrenceUuid === item.recurrenceUuid;

                    return !isSameRecurrence || isSameRecurrence && isAfter;
                } else {
                    return transaction.id !== item.id;
                }
            });
        }

        function deleteTransactionConfirm (item, transactionList) {
            if (!PermissionFactory.checkAccessAction('transaction', ['delete'])) {
                $scope.main.showAccessDanied();
                return;
            }

            TransactionFactory.showDeleteTransactionConfirm({
                scope: $scope,
                data: {
                    ctrl: 'overdue',
                    item: item,
                    delete: 'deleteTransaction',
                    transactionList: transactionList
                }
            });
        }

        function _calcTotalExpensesAndRevenue () {

            var revenue = 0,
                expenses = 0;

            for (var i = 0, len = viewModel.data.length; i < len; i++) {

                var transaction = viewModel.data[i];

                if (transaction.amountInCents > 0) {
                    revenue = revenue + transaction.amountInCents;
                } else {
                    expenses = expenses + transaction.amountInCents;
                }
            }

            viewModel.revenue = _getCurrencyInCentsMasked(revenue);
            viewModel.expenses = _getCurrencyInCentsMasked(expenses);
        }

        function _getTransactionsOverdue () {
            var promise = TransactionFactory.getTransactionsOverdueApi();

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = _reBuildTransactions(resp.data);

                _calcTotalExpensesAndRevenue();
            });
        }

        function _removeItemPayment (index) {
            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.data.splice(index, 1);

                    if (!viewModel.data.length) {
                        $scope.closeThisDialog();
                    }

                    _calcTotalExpensesAndRevenue();
                });
            }, 250);
        }

        function _reBuildTransactions (collection) {
            var newCollection = collection;

            for (var i = 0, len = collection.length; i < len; i++) {
                var item = newCollection[i];

                item = _reBuildTransactionsItem(item);
            }

            return newCollection;
        }

        function _reBuildTransactionsItem (item) {
            var newItem = item;

            newItem.category = TransactionItemFactory.checkTransactionCategory($scope.ngDialogData.categories, item.categoryId);
            newItem.categoryStyle = TransactionItemFactory.checkCategoryColor(newItem.category);

            newItem.isTransaction = TransactionItemFactory.isTransaction(item);
            newItem.isTransference = TransactionItemFactory.isTransference(item);
            newItem.isCreditCard = TransactionItemFactory.isCreditCard(item);
            newItem.isCreditCardInvoice = TransactionItemFactory.isCreditCardInvoice(item);
            newItem.typeTransactionClass = TransactionItemFactory.checkTransactionClass(item);
            newItem.amountInCentsMasked = _getCurrencyInCentsMasked(item.amountInCents, false);
            newItem.dateFormated = TransactionItemFactory.dateFormated(item.date);

            newItem.icon = {
                style: TransactionItemFactory.checkIconStyle(item),
                classe: TransactionItemFactory.checkIconClass(item),
                title: TransactionItemFactory.checkIconTitle(item, $scope.ngDialogData.creditCards)
            };

            /* jshint camelcase:false */
            if (item.type === 'Transference') {
                newItem.account = TransactionItemFactory.checkTransactionAccountUuid(ACCOUNTS, item.creditAccountUuid);
                newItem.account_debit = TransactionItemFactory.checkTransactionAccountUuid(ACCOUNTS, item.debitAccountUuid);
            } else {
                newItem.account = TransactionItemFactory.checkTransactionAccountId(ACCOUNTS, item.accountId);
            }

            newItem.isAutomatic = TransactionItemFactory.isAutomatic(item);

            return newItem;
        }

        function _getCurrencyInCentsMasked(valueInCents, symbol) {
            return CurrencyFactory.getCurrencyInCentsMasked(valueInCents, $scope.main.contextSource.currency, symbol);
        }

    }

})();

(function () {
    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.PayCreditCardCtrl', PayCreditCardCtrl);

    PayCreditCardCtrl.$inject = ['$injector', '$scope'];

    function PayCreditCardCtrl($injector, $scope) {
        var viewModel = this,

            $q = $injector.get('$q'),
            $timeout = $injector.get('$timeout'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            FocusFactory = $injector.get('zze.utils.focusFactory'),
            TransactionFactory = $injector.get('zze.transactions.transactionFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            UploaderFactory = $injector.get('zze.fileUpload.UploaderFactory'),
            StringProcessFactory = $injector.get('zze.utils.stringProcessFactory'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            FinhubInstitutionIcon = $injector.get('zze.finhub.finhubInstitutionIcon'),
            CategoriesService = $injector.get('zze.categories.categoriesService'),

            CATEGORIES = [],
            // ENUMS_TYPE_ACCOUNTS = $injector.get('ENUMS_TYPE_ACCOUNTS'),
            IS_NEW_REGISTER = true,
            oldValues = {
                tags: []
            },

            tags = [],
            accounts = [],
            creditCards = [],

            publicMethods = {
                save: save,
                closeDialog: closeDialog,
                isFixedCategory: isFixedCategory,

                setStatus: setStatus
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            _getS3UploadOptions();

            viewModel.data = {
                payment: {},
                creditCardInvoices: undefined
            };

            viewModel.status = {
                showTags: false,
                // FIXME: This can be removed since credit card payments don't use observation
                showObservation: false,
                showAttachment: false
            };

            viewModel.tracker = PromiseTrackerService.create([
                'loadPage',
                'loadSelectizeCategories',
                'loadSave'
            ]);


            viewModel.selectize = {
                paymentAccount: [],
                categories: [],
                tags: []
            };

            _getDatasAccounts();
            _getCategories();
            _getTags();

            var item = $scope.ngDialogData.item;

            /* jshint camelcase:false */
            viewModel.data.payment = {
                date: item.date,
                credit_card_invoice_id: item.creditCardInvoiceId,
                amount: item.amountInCents / 100.0,
                attachments_attributes: {}
            };

            // FIXME: This can be removed since credit card payments don't use recurrence
            if (item.hasInfiniteRecurrence || item.hasLimitedRecurrence) {
                /* jshint camelcase:false */
                viewModel.data.payment.recurrence_update = 'update_only_this';
            }

            /* jshint camelcase:false */
            viewModel.joined_tags = TransactionFactory.getTagsArray(item.tags, 'name');

            viewModel.status.showTags = item.tags ? item.tags.length : 0;
            viewModel.status.showAttachment = item.attachmentsCount;
            // FIXME: This can be removed since credit card payments don't use recurrence or observation
            viewModel.status.showObservation = item.observation !== '';
            viewModel.status.showRecurrence = item.hasInfiniteRecurrence || item.hasLimitedRecurrence;

            if (!IS_NEW_REGISTER && $scope.ngDialogData.item.attachmentsCount) {
                _initializeUploaderQueue($scope.ngDialogData.item);
            }
        }

        function save() {
            if (!_isFormValid()) {
                return;
            }

            /* jshint camelcase:false */
            viewModel.data.payment.joined_tags = TransactionFactory.getTagsString(viewModel.joined_tags);

            _setAttachmentsAttributes();

            var item = $scope.ngDialogData.item;

            var urlEndPoint = ContextFactory.getEndPointProccess({
                method: 'create',
                enums: 'invoice_payment',
                replace: ':credit_card_id',
                value: item.creditCardId
            }),
                url = StringProcessFactory.stringReplace(urlEndPoint, ':invoice_id', item.creditCardInvoiceId),
                promise = CrudFactory.post(url, viewModel.data);

            viewModel.tracker.loadSave.addPromise(promise);

            promise.then(function (resp) {
                var callback = $scope.ngDialogData.options || false;
                if (!callback.skipCallback) {
                    $scope.$parent[callback.ctrl][callback.save](resp.data, callback.transactionList);
                    $scope.$parent.barFooter.toogleControlBar(false);
                } else {
                    $scope.ngDialogData.options.scope.billToPay.getBills();
                }

                $scope.closeThisDialog();
            }).catch(function () {
                MessageFactory.setFlash('Tivemos um problema ao salvar seu pagamento, por favor, tente novamente!', 'error');
            });
        }

        function setStatus(element, status, focus) {
            viewModel.status[element] = status;

            /* jshint camelcase:false */
            if (element === 'showTags') {
                if (status) {
                    viewModel.joined_tags = oldValues.tags;
                } else {
                    oldValues.tags = viewModel.joined_tags;
                    viewModel.joined_tags = [];
                }
            }

            if (focus && viewModel.status[element] && element !== 'showRecurrence') {
                // Required to end only to end as animations.
                setTimeout(function () {
                    FocusFactory.setFocus('#' + element);
                }, 300);
            }
        }

        function isFixedCategory() {
            return $scope.main.contextSource.currentEntity.fixedCategories;
        }

        function closeDialog() {
            $scope.closeThisDialog();
        }

        function _createSelectizeCategories() {
            var categories = CATEGORIES;

            viewModel.selectize.categories = CategoriesService.getSelectizeConfig(categories, { includeChildren: true });
        }

        function _initializeUploaderQueue(item) {
            item.attachments.each(function (file) {
                var item = {
                    file: {
                        id: file.id,
                        /* jshint camelcase: false */
                        human_type: file.fileHumanType,
                        fileName: file.fileFileName,
                        url: file.fileFileUrl
                    },
                    destroyed: false,
                    progress: 100,
                    isUploaded: true,
                    isSuccess: true
                };

                viewModel.uploader.queue.push(item);
            });

            viewModel.uploader.progress = 100;
        }

        function _getDatasAccounts() {
            var prmAccounts = _getAccounts(),
                prmCrediCards = _getCreditCards(),
                prmAll = $q.all([prmAccounts, prmCrediCards]);

            viewModel.tracker.loadPage.addPromise(prmAll);

            prmAll.then(function (resp) {
                accounts = resp[0].data;
                creditCards = _.filter(resp[1].data, function (cc) {
                    return cc.id !== $scope.ngDialogData.item.creditCardId;
                });

                var _dataAccounts = _createSelectizeAccounts();

                viewModel.selectize.paymentAccount = _dataAccounts;

                setTimeout(function () {
                    FocusFactory.setFocus('#showDescription');
                }, 500);

                var creditCard = CollectionsFactory.findBy(resp[1].data, {
                    id: $scope.ngDialogData.item.creditCardId
                });

                /* jshint camelcase:false */
                var account = CollectionsFactory.findBy(accounts, {
                    id: creditCard.payment_account_id
                });

                if (account) {
                    viewModel.data.payment.account_uuid = account.uuid;
                }
            });
        }

        function _getAccounts() {
            var url = ContextFactory.getEndPoint('index', 'accounts');

            return CrudFactory.getAll(url, {
                params: {
                    status: 'active'
                }
            });
        }

        function _getCreditCards() {
            var url = ContextFactory.getEndPoint('index', 'credit_cards');

            return CrudFactory.getAll(url, {
                params: {
                    status: 'active'
                }
            });
        }

        function _getCategories() {
            TransactionFactory.setIsLegacyCategories(!$scope.main.contextSource.currentEntity.fixedCategories);

            var prmCategories = TransactionFactory.getCategoriesApi(),
                prmTime = $timeout(1000),
                prmAll = $q.all([prmCategories, prmTime]);

            viewModel.tracker.loadSelectizeCategories.addPromise(prmAll);

            prmAll.then(function (resp) {
                CATEGORIES = resp[0];
                _createSelectizeCategories();
            });
        }

        function _getTags() {
            var url = ContextFactory.getEndPoint('index', 'tags'),
                promise = CrudFactory.getAll(url);

            viewModel.tracker.loadPage.addPromise(promise);

            promise.then(function (resp) {
                tags = resp.data;

                viewModel.selectize.tags = _createSelectizeTags();
            });
        }

        function _getS3UploadOptions() {
            var url = ContextFactory.getEndPoint('s3_upload_options', 'enums');

            CrudFactory.getAll(url).then(function (resp) {
                viewModel.uploader = UploaderFactory.create(viewModel, resp.data);
            });
        }

        function _setAttachmentsAttributes() {
            var files = viewModel.uploader.queue;

            for (var i = 0, len = files.length; i < len; i++) {
                /* jshint camelcase: false */

                viewModel.data.payment.attachments_attributes[i] = {
                    id: files[i].file.id,
                    _destroy: files[i].destroyed ? 1 : 0,
                    file_file_url: files[i].file.url,
                    file_file_name: files[i].file.name,
                    file_human_type: files[i].file.human_type
                };
            }
        }

        function _createSelectizeTags() {
            var configSelectize = {
                plugins: ['remove_button'],
                persist: false,
                valueField: 'name',
                labelField: 'name',
                searchField: ['name'],
                options: TransactionFactory.availableTags(tags, $scope),
                create: function (input) {
                    return {
                        name: input
                    };
                },
                render: {
                    /* jshint camelcase:false */
                    option_create: function (data, escape) {
                        return '<div class="create">Adicionar <strong>' + escape(data.input) + '</strong>&hellip;</div>';
                    }
                },
                onOptionAdd: function () {
                    return true;
                },
                onOptionRemove: function () {
                    return true;
                }
            };

            return configSelectize;
        }

        function _createSelectizeAccounts() {
            var dataSelectize = [];

            for (var i = 0, len = accounts.length; i < len; i++) {
                if (accounts[i].archived || accounts[i].automatic) {
                    continue;
                }

                var dataAccounts = angular.copy(accounts[i]);

                // Class to group items.
                dataAccounts.class = 'accounts';

                dataSelectize.push(dataAccounts);
            }

            for (var j = 0, lenj = creditCards.length; j < lenj; j++) {
                if (creditCards[j].automatic) {
                    continue;
                }

                var dataCards = angular.copy(creditCards[j]);

                // Class to group items.
                dataCards.class = 'cards';

                dataSelectize.push(dataCards);
            }

            var configSelectize = {
                plugins: ['clear_button'],
                persist: false,
                valueField: 'uuid',
                disabledField: true,
                options: dataSelectize,
                labelField: 'name',
                searchField: ['name'],
                placeholder: 'Digite a conta.',
                maxItems: 1,
                optgroups: [{
                    value: 'cards',
                    label: 'Cartões'
                }, {
                    value: 'accounts',
                    label: 'Contas'
                }],
                optgroupField: 'class',
                render: {
                    /* jshint camelcase:false */
                    optgroup_header: function (item, escape) {
                        return '<div class="optgroup-header zze-optgroup-header">' +
                            escape(item.label) +
                            '</div>';
                    },
                    item: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, false);
                    },
                    option: function (item, escape) {
                        return _createItemSelectizeAccounts(item, escape, true);
                    }
                }
            };

            return configSelectize;
        }

        function _createItemSelectizeAccounts(item, escape, showComplement) {

            /* jshint camelcase:false */
            var str = '',
                classComplement = showComplement ? ' zze-text-complement' : '';

            str += '<div class="zze-image-left zze-truncate zze-truncate-bigger' + classComplement + ' option">';

            str += FinhubInstitutionIcon.buildRawHTML(item);

            str += '<span class="zze-selectize-label">' + escape(item.name) + '</span>';

            // if (showComplement) {
            //     var humanKind = ENUMS_TYPE_ACCOUNTS[item.kind].description;
            //     str += '<span class="zze-selectize-complement">' + escape(humanKind) + '</span>';
            // }

            str += '</div>';

            return str;
        }

        function _isFormValid() {
            return viewModel.form && viewModel.form.$valid;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .controller('zze.transactions.TransactionCtrl', TransactionCtrl);

    TransactionCtrl.$inject = ['$injector', '$rootScope', '$scope', '$sce'];

    function TransactionCtrl($injector, $rootScope, $scope, $sce) {

        $scope.main.setContentClass('zze-reset-width-transaction');

        var viewModel = this,

            $q = $injector.get('$q'),
            $filter = $injector.get('$filter'),
            $state = $injector.get('$state'),
            $timeout = $injector.get('$timeout'),

            CrudFactory = $injector.get('zze.commons.crudFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            TransactionFactory = $injector.get('zze.transactions.transactionFactory'),
            TransactionItemFactory = $injector.get('zze.transactions.transactionItemFactory'),
            MainFactory = $injector.get('zze.mainFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            StringProcessFactory = $injector.get('zze.utils.stringProcessFactory'),
            GeneralFactory = $injector.get('zze.utils.generalFactory'),
            StorageFactory = $injector.get('zze.utils.storageFactory'),
            FinhubInstitutions = $injector.get('zze.finhub.finhubInstitutions'),

            PREVIEWM_MODE_TAB = 'transactionsPreviewMode_' + $scope.main.contextSource.currentEntity.id,
            ENUMS_PRESENTS = $injector.get('ENUMS_PRESENTS'),

            publicMethods = {
                closeMessagePagination: closeMessagePagination,

                callbackDialogEdit: callbackDialogEdit,
                callbackDialogSave: callbackDialogSave,
                callbackDialogSavePreferences: callbackDialogSavePreferences,

                checkCategorySelected: checkCategorySelected,
                checkDuplicate: checkDuplicate,
                checkTagSelected: checkTagSelected,

                clearTransactionsFilter: clearTransactionsFilter,

                delete: deleteTransactionConfirm,
                deleteTransaction: deleteTransaction,

                getAccountsForFilter: getAccountsForFilter,
                getToExternalCreditCards: getToExternalCreditCards,
                getCategorySelected: getCategorySelected,
                getPaginationData: getPaginationData,
                getTagSelected: getTagSelected,
                getTextBalanceDisplay: getTextBalanceDisplay,
                getToExternalAccounts: getToExternalAccounts,
                getToExternalCategories: getToExternalCategories,
                getCreditCardsForFilter: getCreditCardsForFilter,
                getToExternalTags: getToExternalTags,
                getToExternalTransactions: getToExternalTransactions,
                getTransactionsOverdueCount: getTransactionsOverdueCount,
                getTransactionComplement: getTransactionComplement,
                getTransactionsSearch: getTransactionsSearch,
                getType: getType,

                setTabActivePreviewMode: setTabActivePreviewMode,
                savePreviewMode: savePreviewMode,

                getExpensesCategories: getExpensesCategories,
                getEarningsCategories: getEarningsCategories,

                redirectPrintTransactions: redirectPrintTransactions,

                setAccount: setAccount,
                setCategory: setCategory,
                setPaymentTransaction: setPaymentTransaction,
                setTag: setTag,
                setType: setType,
                setWarningAccountsOverdue: setWarningAccountsOverdue,
                isFixedCategories: isFixedCategories,

                showAccrualBasisDialog: showAccrualBasisDialog,
                showCadTransaction: showCadTransaction,
                showCadTransference: showCadTransference,
                showEditDialog: showEditDialog,
                showReceipt: showReceipt,
                showExport: showExport,
                showPayCreditCard: showPayCreditCard,
                transactionDetailsRedirect: transactionDetailsRedirect,
                showTransactionDetails: showTransactionDetails,
                showTransactionsOverdue: showTransactionsOverdue,
                showChangePreviewMode: showChangePreviewMode,

                stopPropagation: stopPropagation,

                toogleBalanceDay: toogleBalanceDay,
                toogleLineTotal: toogleLineTotal,
                isFilteredApplied: isFilteredApplied,
                toggleOpenFinanceMoreInfo: toggleOpenFinanceMoreInfo
            },

            availableResources = {},

            ACCOUNTS = [],
            CATEGORIES = [],
            CREDIT_CARDS = [],
            TAGS = [];

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            TransactionFactory.setIsLegacyCategories(!$scope.main.fixedCategories);

            viewModel.configs = TransactionFactory.getConfigsCtrl($scope.main.contextSource.today);

            // TODO: Rename to reference an filter bar.
            viewModel.model = {
                type: ENUMS_PRESENTS['default'],
                account: {
                    uuid: 0
                },
                categories: [],
                tags: [],
                transactionsOverdueQuant: 0
            };

            // Never execute it before an variable viewModel.model and viewModel.configs.
            _checkSessionStorage();

            viewModel.tracker = PromiseTrackerService.create([
                'loadFilter',
                'loadContent',
                'loadBalanceDay',
                'loadPagination',
                'loadOverdueTransactions',
                'loadComplement'
            ]);

            viewModel.data = {
                search: StorageFactory.getSession('transactionsSearch') || undefined,

                transactions: [],
                transactionResults: [],
                transactionsBalanceDay: {},
                transactionsBalanceDayDetails: {},
                transactionsTotal: {
                    revenue: 0,
                    expense: 0
                },

                transactionsPaginations: [],

                transactionsPreviewModeDefault: TransactionFactory.isPreviewModeDefault(),
                transactionsPreviewModeAllTransactions: TransactionFactory.isPreviewModeAllTransactions(),

                transactionsOverdue: [],
                transactionsOverdueTotal: {
                    revenue: 0,
                    expense: 0
                },

                details: {},

                attachments: {
                    id: 0,
                    data: []
                },

                observation: {
                    id: 0,
                    text: ''
                },

                currentEntity: $scope.main.contextSource.currentEntity
            };

            /* jshint camelcase:false */
            viewModel.status = {
                detailsOpen: false,
                transactionsOverdue: false,
                transactionsOverdueList: false,
                lineTotal: false,
                showMessageFilterZero: false,
                showMessageTransactionsZero: false,
                showTextFiltersBalanceDisplay: false,
                showDailyBalance: $scope.main.contextSource.currentEntity.preferences.transactionsDailyBalance,
                showLimitPagination: false
            };

            viewModel.pagination = {
                offset: 0,
                pageSize: 100,
                hasMoreItems: false
            };

            viewModel.previewModeContext = {
                image: '',
                description: '',
                previewModeDefaultIndex: TransactionFactory.PREVIEW_MODE_DEFAULT,
                previewModeAllTransactionsIndex: TransactionFactory.PREVIEW_MODE_ALL_TRANSACTIONS,
                previewModeModalActive: false
            };

            setTabActivePreviewMode(StorageFactory.getLocal(PREVIEWM_MODE_TAB, true));

            viewModel.urlsLegacy = TransactionFactory.getUrlsLegacy();

            // It should only be executed at the start of the controller, after that, use _getTransactions().
            _getDatasServer('transactions', 'loadContent');

            $(document).mouseup(function (e) {
                viewModel.previewModeContext.previewModeModalActive = false;
                var previewModeForm = $("#zze-context_transactions-view-mode-dialog:first");
                if (!$('#open-preview-mode').is(e.target) && !previewModeForm.is(e.target) && previewModeForm.has(e.target).length === 0) {
                    previewModeForm.fadeOut(157);
                }
            });

            document.title = "Organizze | Lançamentos";
        }

        function setTabActivePreviewMode(index) {
            viewModel.tabActive = index;

            _loadPreviewModeContext(index);
        }

        function savePreviewMode() {
            var formPreviewMode = $("#zze-context_transactions-view-mode-dialog:first");

            viewModel.previewModeContext.previewModeModalActive = false;


            formPreviewMode.fadeToggle(10);
            localStorage.setItem(PREVIEWM_MODE_TAB, viewModel.tabActive);

            getTransactionsSearch();

            $timeout(function() {
                viewModel.data.transactionsPreviewModeDefault = viewModel.tabActive === viewModel.previewModeContext.previewModeDefaultIndex;
                viewModel.data.transactionsPreviewModeAllTransactions = viewModel.tabActive === viewModel.previewModeContext.previewModeAllTransactionsIndex;

                var color;

                if (viewModel.tabActive === 0) {
                    color = '#EFEFFF';
                } else {
                    color = '#CEFAE3';
                }
                $('#open-preview-mode').parent().effect('highlight', {color: color, easing: 'easeInCirc'}, 500);

            }, 300);
        }

        function closeMessagePagination() {
            StorageFactory.setSession('transactionsShowMessagePagination', false);
            viewModel.status.showLimitPagination = false;

            TransactionFactory.updatePositionBarFixed();
        }

        function clearTransactionsFilter() {

            viewModel.model.type = ENUMS_PRESENTS['default'];
            viewModel.model.categories = [];
            viewModel.model.tags = [];
            viewModel.model.account = {
                uuid: 0
            };

            StorageFactory.removeSession('transactionsFilterType');
            StorageFactory.removeSession('transactionsFilterCategories');
            StorageFactory.removeSession('transactionsFilterTags');
            StorageFactory.removeSession('transactionsFilterAccount');

            _resetPaginationOffset();

            _getTransactions('transactions', 'loadFilter');
        }

        function stopPropagation($event) {
            $event.stopPropagation();
        }

        function callbackDialogSave(item, transactionList) {
            // Checks if it is to display the posting screen.
            TransactionFactory.checkShowIntroductionPage($scope);

            var startDate = TransactionFactory.startDate(),
                endDate = TransactionFactory.endDate(),
                collection = viewModel.data[transactionList],
                order = MainFactory.entityPreferences('transactionsOrder'),
                index,
                invoice,
                invoiceIndex,
                payment,
                paramsFilters = {
                    item: item,
                    startDate: startDate,
                    endDate: endDate,
                    filters: viewModel.model,
                    accounts: ACCOUNTS,
                    creditCards: CREDIT_CARDS,
                    search: StorageFactory.getSession('transactionsSearch')
                };

            if (TransactionFactory.isOutOfScope(paramsFilters)) {

                /* In current period scope */
                if (TransactionItemFactory.isInvoicePayment(item)) {

                    /* Invoice payment flow */
                    index = TransactionFactory.getIndexCreditCard(collection, item);

                    collection.splice(index, 1);
                    collection.push(_reBuildTransactionsItem(item));
                } else if (TransactionItemFactory.isCreditCard(item) && viewModel.data.transactionsPreviewModeDefault) {

                    payment = TransactionFactory.getInvoicePaymentFor(item, collection);
                    invoice = TransactionFactory.getCreditCardInvoiceFor(item, collection);

                    /* Credit card transaction flow */
                    if (payment) {

                        /* Invoice payment path */
                        MessageFactory.setFlash('Lançamento adicionado.', 'success');

                        // item = undefined;
                    } else if (invoice) {

                        /* Invoice record is already listed */
                        invoice.amountInCents += item.amountInCents;
                        invoiceIndex = CollectionsFactory.findIndex(collection, {
                            id: invoice.id
                        });

                        collection.splice(invoiceIndex, 1);
                        collection.push(_reBuildTransactionsItem(invoice));

                        item = invoice;
                    } else {

                        /* Invoice record is not listed yet */
                        var urlInvoices = TransactionFactory.getUrlInvoices(item);

                        CrudFactory.getAll(urlInvoices).then(function (response) {

                            if (moment(response.data.date).isBetween(startDate, endDate, null, '[]')) {
                                collection.push(_reBuildTransactionsItem(response.data));
                                viewModel.data[transactionList] = TransactionFactory.sortTransactionCollection(collection, order);
                                item = response.data;
                                _checkMessageFilterZero();
                                _checkMessageTransactionsZero();
                            } else {
                                MessageFactory.setFlash('Lançamento adicionado na ' + response.data.description, 'success');
                                // item = undefined;
                            }
                        });
                    }
                } else {
                    /* Regular transaction */
                    collection.push(_reBuildTransactionsItem(item));
                }

                viewModel.data[transactionList] = TransactionFactory.sortTransactionCollection(collection, order);
            } else {
                if (TransactionItemFactory.isCreditCard(item) && viewModel.data.transactionsPreviewModeDefault) {

                    payment = TransactionFactory.getInvoicePaymentFor(item, collection);
                    invoice = TransactionFactory.getCreditCardInvoiceFor(item, collection);

                    /* Credit card transaction flow */
                    if (!payment && !invoice) {

                        /* Invoice record is not listed yet */
                        var urlInvoicesMessage = TransactionFactory.getUrlInvoices(item);

                        CrudFactory.getAll(urlInvoicesMessage).then(function (response) {

                            if (!moment(response.data.date).isBetween(startDate, endDate, null, '[]')) {
                                MessageFactory.setFlash('Lançamento adicionado na ' + response.data.description, 'success');
                            }
                        });
                    }
                } else {
                    MessageFactory.setFlash($filter('translate')('transactions.actions.add.success'), 'success');
                }
            }
            _afterSave(transactionList, item, startDate, endDate);
        }

        function callbackDialogEdit(item, transactionList, dataSaved) {

            // Checks if it is to display the posting screen.
            TransactionFactory.checkShowIntroductionPage($scope);

            var startDate = TransactionFactory.startDate(),
                endDate = TransactionFactory.endDate(),
                collection = angular.copy(viewModel.data[transactionList]),
                order = MainFactory.entityPreferences('transactionsOrder'),
                index,
                invoice,
                invoiceIndex,
                payment,
                url = null,
                paramsFilters = {
                    item: item,
                    startDate: startDate,
                    endDate: endDate,
                    filters: viewModel.model,
                    accounts: ACCOUNTS,
                    creditCards: CREDIT_CARDS,
                    search: StorageFactory.getSession('transactionsSearch')
                };

            /* Updating a transaction is a simple process since there is no way
               of updating credit card transactions or invoice payments. */
            index = CollectionsFactory.findIndex(collection, {
                id: item.id
            });

            if (transactionList === 'transactionsOverdue' || TransactionFactory.isOutOfScope(paramsFilters)) {

                /* Transaction date is inside current date scope */
                if (TransactionItemFactory.isCreditCard(item) && viewModel.data.transactionsPreviewModeDefault) {

                    /* Invoice record is not listed yet */
                    payment = TransactionFactory.getInvoicePaymentFor(item, collection);
                    invoice = TransactionFactory.getCreditCardInvoiceFor(item, collection);

                    if (payment) {

                        /* Invoice payment path */
                        MessageFactory.setFlash('Lançamento adicionado.', 'success');
                    } else if (invoice) {

                        /* Invoice record is already listed */
                        invoice.amountInCents += item.amountInCents;
                        invoiceIndex = CollectionsFactory.findIndex(collection, {
                            id: invoice.id
                        });

                        viewModel.data.transactions[invoiceIndex] = _reBuildTransactionsItem(invoice);
                        viewModel.data[transactionList].splice(index, 1);
                        item = invoice;

                        MessageFactory.setFlash('Lançamento adicionado na ' + item.description, 'success');
                    } else {

                        url = ContextFactory.getEndPointProccess({
                            method: 'show',
                            enums: 'credit_card_invoices',
                            replace: ':id',
                            value: item.creditCardInvoiceId
                        }).replace('%3Acredit_card_id', item.creditCardId);

                        CrudFactory.getAll(url).then(function (response) {

                            if (moment(response.data.date).isBetween(startDate, endDate, null, '[]')) {

                                collection.push(_reBuildTransactionsItem(response.data));
                                viewModel.data[transactionList] = TransactionFactory.sortTransactionCollection(collection, order);

                                item = response.data;
                            }

                            viewModel.data[transactionList].splice(index, 1);

                            MessageFactory.setFlash('Lançamento adicionado na ' + response.data.description, 'success');
                        });
                    }
                } else {
                    collection[index] = _reBuildTransactionsItem(item);
                    viewModel.data[transactionList] = TransactionFactory.sortTransactionCollection(collection, order);
                }
            } else {

                viewModel.data[transactionList].splice(index, 1);

                // Only to show a message.
                if (TransactionItemFactory.isCreditCard(item) && viewModel.data.transactionsPreviewModeDefault) {

                    payment = TransactionFactory.getInvoicePaymentFor(item, collection);
                    invoice = TransactionFactory.getCreditCardInvoiceFor(item, collection);

                    /* Credit card transaction flow */
                    if (!payment && !invoice) {

                        /* Invoice record is not listed yet */
                        var urlInvoices = TransactionFactory.getUrlInvoices(item);

                        CrudFactory.getAll(urlInvoices).then(function (response) {

                            if (!moment(response.data.date).isBetween(startDate, endDate, null, '[]')) {
                                MessageFactory.setFlash('Lançamento atualizado na ' + response.data.description, 'success');
                            }
                        });
                    }
                } else {
                    MessageFactory.setFlash($filter('translate')('transactions.actions.edit.success'), 'success');
                }
            }

            if (dataSaved) {
                _checkUpdateFuture(item, dataSaved);
            }

            _afterSave(transactionList, item, startDate, endDate);
        }

        function callbackDialogSavePreferences() {

            _getTransactions('transactions', 'loadContent');
            getTransactionsOverdueCount();
        }

        // WARNING: It is repeat in dialog overdue, mindi one option ever.
        function deleteTransaction(item, deleteRecursive, transactionList) {

            var promise = TransactionFactory.destroy(item, deleteRecursive);

            $scope.main.tracker.loadHeader.addPromise(promise);

            viewModel.data[transactionList] = _.filter(angular.copy(viewModel.data[transactionList]), function (transaction) {

                var isRecurrence = item.recurrenceUuid !== null;

                if (isRecurrence && deleteRecursive) {
                    var isAfter = moment(item.date).isAfter(transaction.date, null, null, '[]'),
                        isSameRecurrence = transaction.recurrenceUuid === item.recurrenceUuid;

                    return !isSameRecurrence || isSameRecurrence && isAfter;
                } else {
                    return transaction.id !== item.id;
                }
            });

            $scope.barFooter.toogleControlBar(false);

            _checkDayTransaction(transactionList);

            if (transactionList === 'transactionsOverdue') {
                viewModel.model.transactionsOverdueQuant--;

                if (viewModel.model.transactionsOverdueQuant === 0) {
                    viewModel.status.transactionsOverdue = false;
                }
            }

            promise.then(function () {
                MessageFactory.setFlash($filter('translate')('transactions.actions.delete.success'), 'success');
                _getBalance();
                _calcTotalExpensesAndRevenue(transactionList);
                _afterSave(transactionList, item, StorageFactory.getSession('transactionsStartDate'), StorageFactory.getSession('transactionsEndDate'));
            }).catch(function () {
                MessageFactory.setFlash($filter('translate')('transactions.actions.delete.error'), 'error');
            });
        }

        function deleteTransactionConfirm(item, transactionList) {
            TransactionFactory.showDeleteTransactionConfirm({
                scope: $scope,
                data: {
                    ctrl: 'transactions',
                    item: item,
                    delete: 'deleteTransaction',
                    transactionList: transactionList
                }
            });
        }

        function redirectPrintTransactions() {
            return TransactionFactory.getUrlPrintTransactions(viewModel.model);
        }

        function toogleBalanceDay(item, $event) {
            stopPropagation($event);

            viewModel.data.transactionsBalanceDayDetails[item.date].status = angular.copy(!viewModel.data.transactionsBalanceDayDetails[item.date].status);

            if (viewModel.data.transactionsBalanceDayDetails[item.date].status) {
                _getBalanceDay(item);
            }
        }

        function toogleLineTotal() {

            viewModel.status.lineTotal = !viewModel.status.lineTotal;

            TransactionFactory.updatePositionBarFixed();
        }

        function showAccrualBasisDialog(event) {

            stopPropagation(event);

            TransactionFactory.closePopover();

            TransactionFactory.showAccrualBasisDialog($scope);
        }

        function showCadTransaction(type, item, transactionList, copy) {
            /* jshint camelcase:false */
            TransactionFactory.closePopover();

            availableResources = angular.copy($rootScope.availableResources);

            var _item = item || copy,
                opts = {
                    scope: $scope,
                    automaticDialog: item ? _item.isAutomatic : false,
                    data: {
                        type: type,
                        item: item ? _item : undefined,
                        copy: copy ? _item : undefined,
                        options: {
                            ctrl: 'transactions',
                            save: 'callbackDialogSave',
                            edit: 'callbackDialogEdit',
                            transactionList: transactionList || 'transactions'
                        },
                        accounts: ACCOUNTS,
                        categories: CATEGORIES,
                        creditCards: CREDIT_CARDS,
                        tags: TAGS
                    },
                    preCloseCallback: function (param) {
                        if (param !== 'saved') {
                            $rootScope.availableResources.tags = availableResources.tags;
                            $rootScope.availableResources.attachments = availableResources.attachments;
                        }
                    }
                };

            if (_item) {
                TransactionFactory.getTransactionComplementApi(_item).then(function (resp) {

                    _item.complement = resp.data;

                    TransactionFactory.showCadTransaction(opts);
                });
            } else {
                TransactionFactory.showCadTransaction(opts);
            }
        }

        function showEditDialog(item, transactionList) {
            if (item.isTransference) {
                showCadTransference(item, transactionList);
            } else {
                var activityTypeText = item.activityType === 0 ? 'expense' : 'revenue';
                showCadTransaction(activityTypeText, item, transactionList);
            }
        }

        function showReceipt() {
            TransactionFactory.closePopover();

            TransactionFactory.showReceipt();

            // if (!item) {
            //     return;
            // }
            //
            // if (GeneralFactory.isEmptyObj(item.contact)) {
            //     var str = item.activityType === 0 ? 'fornecedor' : 'cliente';
            //
            //     MessageFactory.setFlash('Você precisa adicionar um ' + str + ' antes de emitir seu recibo.', 'warn');
            //
            //     showCadTransaction(item.activityTypeText, item, transactionList);
            //
            //     return;
            // }
            //
            // $scope.main.visit(TransactionFactory.getUrlRedirectReceipt(item), $event);
        }

        function showExport() {
            TransactionFactory.closePopover();

            TransactionFactory.showExport({
                data: {
                    accounts: ACCOUNTS,
                    creditCards: CREDIT_CARDS
                }
            });
        }

        function showCadTransference(item, transactionList, copy) {

            TransactionFactory.closePopover();

            var _item = item || copy,
                opts = {
                    scope: $scope,
                    data: {
                        item: item ? _item : undefined,
                        copy: copy ? _item : undefined,
                        options: {
                            ctrl: 'transactions',
                            save: 'callbackDialogSave',
                            edit: 'callbackDialogEdit',
                            transactionList: transactionList || 'transactions'
                        },
                        filterAccount: viewModel.model.account,
                        accounts: ACCOUNTS,
                        categories: CATEGORIES,
                        tags: TAGS
                    }
                };

            if (_item) {
                TransactionFactory.getTransactionComplementApi(_item).then(function (resp) {

                    _item.complement = resp.data;

                    TransactionFactory.showCadTransference(opts);
                });
            } else {
                TransactionFactory.showCadTransference(opts);
            }
        }

        function showTransactionsOverdue() {

            TransactionFactory.showTransactionsOverdue({
                scope: $scope,
                data: {
                    ctrl: 'transactions',
                    accounts: ACCOUNTS,
                    categories: CATEGORIES,
                    creditCards: CREDIT_CARDS,
                    tags: TAGS
                },
                preCloseCallback: function () {
                    getTransactionsOverdueCount();
                }
            });
        }

        function showChangePreviewMode() {
            var previewModeForm = $("#zze-context_transactions-view-mode-dialog:first");

            if (previewModeForm.is(':visible')) {
                previewModeForm.fadeToggle(157);
                viewModel.previewModeContext.previewModeModalActive = false;
            } else {
                viewModel.previewModeContext.previewModeModalActive = true;
                setTabActivePreviewMode(StorageFactory.getLocal(PREVIEWM_MODE_TAB, true));
                previewModeForm.fadeIn(220);
            }
        }

        function showPayCreditCard(item, event, transactionList) {

            stopPropagation(event);

            TransactionFactory.showPayCreditCard($scope, item, transactionList);
        }

        /**
         * @description Redirect the transaction item to invoice or account details.
         */
        function transactionDetailsRedirect(item) {

            if (item.isCreditCard) {
                TransactionFactory.redirectCreditCardBillsPayment(item);
                return;
            }

            if (item.isTransaction) {
                $state.go('accounts/show', {
                    id: item.account.id
                });
            }
        }

        function showTransactionDetails(item, transactionList, redirect, event) {

            if (item.isCreditCardInvoice || (item.isCreditCardBillsPayment && redirect)) {
                TransactionFactory.redirectCreditCardBillsPayment(item);
            } else {
                _setDataBar(item, transactionList, event);
            }
        }

        function checkCategorySelected(uuid) {
            return _.contains(viewModel.model.categories, uuid);
        }

        function checkDuplicate(item) {

            TransactionFactory.closePopover();

            if (item.isTransaction) {
                showCadTransaction(item.activityTypeText, null, item.transactionList, item);
            }

            if (item.isTransference) {
                showCadTransference(null, item.transactionList, item);
            }
        }

        /**
         * @description Gets the expenses categories.
         */
        function getExpensesCategories() {

            var expensesCategories = CATEGORIES.filter((category) => {
                return category.kind === 'expenses' && category.available;
            });

            return expensesCategories;
        }

        /**
         * @description Gets the earnings categories.
         */
        function getEarningsCategories() {

            var earningsCategories = CATEGORIES.filter((category) => {
                return category.kind === 'earnings' && category.available;
            });

            return earningsCategories;
        }

        /**
         * @description Check if the tag is in the list of selected by the user.
         */
        function checkTagSelected(name) {
            return _.contains(viewModel.model.tags, name);
        }

        /**
         * @description Provides the listing of accounts for filter
         */
        function getAccountsForFilter() {
            return TransactionFactory.getAccountsForFilter(ACCOUNTS);
        }

        /**
         * @description Category verification to be displayed without category filter.
         */
        function getCategorySelected() {

            var len = viewModel.model.categories.length,
                categoriesI18nText = $filter('translate')('transactions.filters.category');

            if (len === 0) {
                return categoriesI18nText;
            }

            var category = len > 1 ? (len + ' ' + categoriesI18nText.toLowerCase()) : TransactionFactory.checkNameCategoryInFilter(CATEGORIES, viewModel.model.categories[0]);

            return len === 1 ? category.name : category;
        }

        function getPaginationData() {
            _getTransactions('transactions', 'loadPagination');
        }

        /**
         * @description Tag verification to be displayed without tag filter.
         */
        function getTagSelected() {
            return TransactionFactory.getTagSelected(viewModel.model.tags);
        }

        function getTextBalanceDisplay() {
            return $sce.trustAsHtml(viewModel.data.transactionResults.filteredText);
        }

        /**
         * @description Get the count of transactions overdue
         *
         * @private
         */
        function getTransactionsOverdueCount() {
            var promise = TransactionFactory.getTransactionsOverdueCountApi();

            if (StorageFactory.getSession('transactionsOverdue') === 'false') {
                if (viewModel && viewModel.status) {
                    viewModel.status.transactionsOverdue = false;
                }
                return;
            }

            promise.then(function (resp) {

                if (viewModel && viewModel.model) {
                    viewModel.model.transactionsOverdueQuant = resp.data.totals;
                    viewModel.status.transactionsOverdue = viewModel.model.transactionsOverdueQuant > 0;
                }
            });
        }

        /**
         * @description Filters the postings according to the text entered by the user.
         */
        function getTransactionsSearch() {
            _resetPaginationOffset();

            _getTransactions('transactions', 'loadFilter');
        }

        function getTransactionComplement(item) {
            if (item.complement || viewModel.tracker.loadComplement.active()) {
                return;
            }

            var promise = TransactionFactory.getTransactionComplementApi(item);

            viewModel.tracker.loadComplement.addPromise(promise);

            promise.then(function (resp) {
                item.complement = resp.data;

                if (resp.data.recurrenceInfo !== null) {
                    item.complement.recurrenceInfo.paidAmountInCentsMasked = _getCurrencyInCentsMasked(resp.data.recurrenceInfo.paidAmountInCents);
                    item.complement.recurrenceInfo.pendingAmountInCentsMasked = _getCurrencyInCentsMasked(resp.data.recurrenceInfo.pendingAmountInCents);
                }
            });
        }

        /**
         * @description Provides the listing of accounts for external access.
         */
        function getToExternalAccounts() {
            return ACCOUNTS;
        }

        function getToExternalCreditCards() {
            return CREDIT_CARDS;
        }

        /**
         * @description Provides the listing of categories for external access.
         */
        function getToExternalCategories() {
            return CATEGORIES;
        }

        /**
         * @description Provides the listing of credit cards for external access.
         */
        function getCreditCardsForFilter() {
            return TransactionFactory.getCreditCardsForFilter(CREDIT_CARDS);
        }

        /**
         * @description Provides the listing of tags for external access.
         */
        function getToExternalTags() {
            return TAGS;
        }

        function getToExternalTransactions(startDate, endDate) {
            StorageFactory.setSession('transactionsStartDate', startDate);
            StorageFactory.setSession('transactionsEndDate', endDate);

            _resetPaginationOffset();

            _getTransactions('transactions', 'loadFilter');
        }

        /**
         * @description Get list enum with presents transaction.
         */
        function getType() {
            return ENUMS_PRESENTS;
        }

        /**
         * @description Set value account selected to user.
         */
        function setAccount(item) {
            viewModel.model.account = item;

            // Receive zero (0).
            if (!item.uuid) {
                StorageFactory.removeSession('transactionsFilterAccount');
            } else {
                StorageFactory.setSession('transactionsFilterAccount', JSON.stringify(item));
            }

            _resetPaginationOffset();

            _getTransactions('transactions', 'loadFilter');
        }

        /**
         * @description Set value category selected to user.
         */
        function setCategory(item) {

            if (!item) {

                viewModel.model.categories = [];
                StorageFactory.removeSession('transactionsFilterCategories');

                _resetPaginationOffset();

                _getTransactions('transactions', 'loadFilter');

                return;
            }

            var arr;

            if (checkCategorySelected(item.uuid)) {
                arr = _.filter(angular.copy(viewModel.model.categories), function (data) {
                    return data !== item.uuid;
                });
            } else {

                var items = [];

                items.push(item.uuid);

                if (item.children) {
                    for (var i = 0, len = item.children.length; i < len; i++) {
                        items.push(item.children[i].uuid);
                    }
                }

                arr = _.union(angular.copy(viewModel.model.categories), items);
            }

            viewModel.model.categories = arr;
            StorageFactory.setSession('transactionsFilterCategories', JSON.stringify(arr));

            _resetPaginationOffset();

            _getTransactions('transactions', 'loadFilter');
        }

        /**
         * @description Controls the payment status of the posting by saving to an endpoint.
         *
         * @param {object} item Transaction data.
         * @param {object} $event Event to click for cancel propagation event.
         * @param {boolean} setBar If show bar with details.
         * @param {string} transactionList Name collection with the  list transactions.
         */
        function setPaymentTransaction(item, $event, setBar, transactionList) {

            stopPropagation($event);

            var statusOld = angular.copy(item.done),
                index = CollectionsFactory.findIndex(viewModel.data[transactionList], {
                    id: item.id
                }),
                itemView = viewModel.data[transactionList][index];

            itemView.done = !item.done;
            itemView.transactionUnsuccessful = TransactionItemFactory.checkTransactionUnsuccessful(itemView, $scope.main.contextSource.today);

            _closeBalanceDayDetails(item);

            TransactionFactory.setPaymentTransaction(item).then(function () {

                if (transactionList === 'transactionsOverdue' && statusOld) {
                    viewModel.model.transactionsOverdueQuant--;

                    setTimeout(function () {
                        $scope.$apply(function () {
                            if (viewModel.model.transactionsOverdueQuant === 0) {
                                viewModel.status.transactionsOverdue = false;
                            }

                            viewModel.data[transactionList].splice(index, 1);

                            _calcTotalExpensesAndRevenue(transactionList);
                        });
                    }, 1000);
                } else {
                    _getBalance();
                    _getBalanceDay(item);
                    _getBalanceResult();
                    _calcTotalExpensesAndRevenue(transactionList);
                }

                if (setBar) {
                    _setDataBar(item, transactionList, $event);
                }
            }).catch(function () {
                MessageFactory.setFlash('Desculpe, tivemos problemas em alterar o status desta conta.', 'error');
                itemView.done = statusOld;
                itemView.transactionUnsuccessful = TransactionItemFactory.checkTransactionUnsuccessful(itemView, $scope.main.contextSource.today);
            });
        }

        /**
         * @description Set value tag selected to user.
         */
        function setTag(item) {
            if (!item) {
                viewModel.model.tags = [];
                StorageFactory.removeSession('transactionsFilterTags');
            } else {
                var isChecked = checkTagSelected(item.name);

                var arr = isChecked ? _.filter(angular.copy(viewModel.model.tags), function (data) {
                    return data !== item.name;
                }) : _.union(angular.copy(viewModel.model.tags), [item.name]);

                viewModel.model.tags = arr;
                StorageFactory.setSession('transactionsFilterTags', JSON.stringify(arr));
            }

            _resetPaginationOffset();
            _getTransactions('transactions', 'loadFilter');
        }

        /**
         * @description Set value presents selected to user.
         */
        function setType(item) {

            viewModel.model.type = item;

            if (item.value === 'default') {
                StorageFactory.removeSession('transactionsFilterType');
            } else {
                StorageFactory.setSession('transactionsFilterType', JSON.stringify(item));
            }

            _resetPaginationOffset();

            _getTransactions('transactions', 'loadFilter');
        }

        function isFixedCategories() {
            return $scope.main.contextSource.currentEntity.fixedCategories;
        }

        function setWarningAccountsOverdue(status) {

            StorageFactory.setSession('transactionsOverdue', false);
            viewModel.status.transactionsOverdue = status;

            TransactionFactory.updatePositionBarFixed();
        }

        function isFilteredApplied() {
            return viewModel.model.categories.length ||
                viewModel.model.tags.length ||
                viewModel.model.type.value !== 'default' ||
                $scope.barFilters.data.search;
        }

        function _afterSave(transactionList, item, startDate, endDate) {

            _getBalance();
            _getBalanceResult();
            _checkDayTransaction(transactionList);
            _calcTotalExpensesAndRevenue(transactionList);

            _checkMessageFilterZero();
            _checkMessageTransactionsZero();

            if (item && moment(item.date).isBetween(startDate, endDate, null, '[]')) {
                TransactionFactory.setLineAnchor(item.id);

                setTimeout(function () {
                    TransactionFactory.setHighlight(item.id);
                }, 1000);
            }

            viewModel.data.attachments.id = 0;
            viewModel.data.observation.id = 0;

            TransactionFactory.updatePositionBarFixed();

            if (window.PrimeirosPassos && window.PrimeirosPassos.Callout) {
                window.PrimeirosPassos.Callout.refreshProgress();
            }
        }

        function _resetPaginationOffset() {
            viewModel.pagination.offset = 0;
        }

        function _calcTotalExpensesAndRevenue(transactionList) {

            var transactions = viewModel.data[transactionList],
                _transactionsList = transactionList + 'Total',
                total;

            viewModel.data[_transactionsList].revenue = 0;
            viewModel.data[_transactionsList].expense = 0;

            for (var i = 0, len = transactions.length; i < len; i++) {

                var transaction = transactions[i];

                if (_.isBlank(sessionStorage.getItem('transactionsFilterAccount')) && transaction.isTransference) {
                    continue;
                }

                if (transaction.amountInCents > 0) {
                    viewModel.data[_transactionsList].revenue = viewModel.data[_transactionsList].revenue + transaction.amountInCents;
                } else {
                    viewModel.data[_transactionsList].expense = viewModel.data[_transactionsList].expense + transaction.amountInCents;
                }
            }

            total = viewModel.data[_transactionsList].revenue - (viewModel.data[_transactionsList].expense * (-1));

            viewModel.data[_transactionsList].revenueMasked = _getCurrencyInCentsMasked(viewModel.data[_transactionsList].revenue, false);
            viewModel.data[_transactionsList].expenseMasked = _getCurrencyInCentsMasked(viewModel.data[_transactionsList].expense, false);
            viewModel.data[_transactionsList].totalMasked = _getCurrencyInCentsMasked(total, false);
        }

        function _closeBalanceDayDetails(item) {
            for (var key in viewModel.data.transactionsBalanceDayDetails) {
                if (item.date !== key) {
                    viewModel.data.transactionsBalanceDayDetails[key].status = false;
                }
            }
        }

        /**
         * @description You receive a collection of postings and process all items, listing all your dependencies and
         *              validations by adding them to the collection.
         *
         * @param collection Collection with all transactions receive in request.
         *
         * @private
         */
        function _reBuildTransactions(collection) {

            var newCollection = collection;

            for (var i = 0, len = collection.length; i < len; i++) {
                var item = newCollection[i];

                item = _reBuildTransactionsItem(item, 'transactions');
            }

            if (viewModel.data.transactionsPreviewModeDefault) {
                _calcTotalExpensesAndRevenue('transactions');
                _getBalance();
            }

            return newCollection;
        }

        /**
         * @description Mounts the launch with all data already processed and available for use in the view.
         *              This increases the performance of the listing.
         *
         * @param item Data coming from the server.
         * @param transactionList Collection name to update the release.
         * @returns {object} Release data processed for view.
         * @private
         */
        function _reBuildTransactionsItem(item, transactionList) {
            var newItem = item;

            newItem.transactionUnsuccessful = TransactionItemFactory.checkTransactionUnsuccessful(item, $scope.main.contextSource.today);

            newItem.category = TransactionItemFactory.checkTransactionCategory(CATEGORIES, item.categoryId);
            newItem.categoryStyle = TransactionItemFactory.checkCategoryColor(newItem.category);

            newItem.isCreditCard = TransactionItemFactory.isCreditCard(item);
            newItem.isCreditCardInvoice = TransactionItemFactory.isCreditCardInvoice(item);
            newItem.isInvoicePayment = TransactionItemFactory.isInvoicePayment(item);
            newItem.isTransference = TransactionItemFactory.isTransference(item);
            newItem.isTransaction = TransactionItemFactory.isTransaction(item);
            newItem.isCreditCardBillsPayment = TransactionItemFactory.isCreditCardBillsPayment(item);
            newItem.hasContact = !GeneralFactory.isEmptyObj(item.contact);
            newItem.typeTransactionClass = TransactionItemFactory.checkTransactionClass(item, $scope.main.isControlle);
            newItem.numberRecurrence = TransactionItemFactory.checkNumberRecurrence(item);
            newItem.invoiceDetails = TransactionFactory.getInvoiceDetails(item);
            newItem.creditCardUuid = item.isCreditCard ? TransactionItemFactory.getCreditCardUuid(item, CREDIT_CARDS) : null;
            newItem.creditCardBillsPaymentName = TransactionItemFactory.checkCreditCardBillsPaymentName(item, CREDIT_CARDS);
            newItem.amountInCentsMasked = _getCurrencyInCentsMasked(item.amountInCents, false);
            newItem.amountInCentsMaskedWithSymbol = _getCurrencyInCentsMasked(item.amountInCents, true);
            newItem.dateFormated = TransactionItemFactory.dateFormated(item.date);
            newItem.dateAbreviated = TransactionFactory.getMonthAbreviated(item.date);
            newItem.isDateMonthCurrent = TransactionFactory.checkDateMonthCurrent();
            newItem.activityTypeText = item.activityType === 0 ? 'expense' : 'revenue';
            newItem.transactionList = transactionList;
            newItem.nameOfType = TransactionFactory.getNameOfType(item);
            newItem.balanceDayDetails = {
                balanceMasked: _getCurrencyInCentsMasked(0, true),
                earningsMasked: _getCurrencyInCentsMasked(0, true),
                expensesMasked: _getCurrencyInCentsMasked(0, true),
                filteredByAccountMasked: _getCurrencyInCentsMasked(0, true),
                predictedBalanceMasked: _getCurrencyInCentsMasked(0, true),
                predictedEarningsMasked: _getCurrencyInCentsMasked(0, true),
                predictedExpensesMasked: _getCurrencyInCentsMasked(0, true),
                previousBalanceMasked: _getCurrencyInCentsMasked(0, true)
            };
            newItem.classLineOptions = _checkClassLineOptions(item);

            newItem.icon = {
                style: TransactionItemFactory.checkIconStyle(item),
                classe: TransactionItemFactory.checkIconClass(item),
                title: TransactionItemFactory.checkIconTitle(item, CREDIT_CARDS)
            };

            /* jshint camelcase:false */
            if (item.type === 'Transference') {
                newItem.account = TransactionItemFactory.checkTransactionAccountUuid(ACCOUNTS, item.creditAccountUuid);
                newItem.account_debit = TransactionItemFactory.checkTransactionAccountUuid(ACCOUNTS, item.debitAccountUuid);
            } else {
                newItem.account = TransactionItemFactory.checkTransactionAccountId(ACCOUNTS, item.accountId);
            }

            viewModel.data.transactionsBalanceDayDetails[item.date] = {
                status: false
            };

            newItem.isAutomatic = TransactionItemFactory.isAutomatic(item);

            return newItem;
        }

        function _checkClassLineOptions(item) {

            var countOptions = 0;

            if (item.conciliation) {
                countOptions++;
            }

            if (item.hasInfiniteRecurrence) {
                countOptions++;
            }

            if (item.attachmentsCount) {
                countOptions++;
            }

            if (item.hasObservation) {
                countOptions++;
            }

            return countOptions ? 'zze-options-' + countOptions : '';
        }

        function _checkDayTransaction(transactionList) {

            if (!viewModel.data[transactionList].length) {
                return;
            }

            var datePrev = '',
                collectionLen = viewModel.data[transactionList].length;

            for (var i = 0, len = collectionLen; i < len; i++) {

                // Reset all show balance day.
                viewModel.data[transactionList][i].isLastItem = false;

                var _date;

                if ($scope.main.contextSource.currentEntity.preferences.accrualBasis) {
                    _date = $scope.main.contextSource.currentEntity.preferences.accrualBasis === 'deadline' ?
                        viewModel.data[transactionList][i].date : viewModel.data[transactionList][i].billingDate;
                }

                var indexBefore = 0;

                if (_date !== datePrev) {

                    datePrev = _date;

                    if (_date) {
                        var arr = _date.split('-');

                        viewModel.data[transactionList][i].dateInfo = arr[2];
                        viewModel.data[transactionList][i].dateInfoDetails = moment(_date).format("[de] MMMM [de] YYYY");
                    }

                    // Show balance day in last item to day.
                    indexBefore = i === 0 ? 0 : (i - 1);

                    viewModel.data[transactionList][indexBefore].isLastItem = true;
                } else {
                    indexBefore = i === 1 ? 0 : i;

                    viewModel.data[transactionList][indexBefore].isLastItem = false;

                    delete viewModel.data[transactionList][i].dateInfo;
                }
            }

            // Show balance day in last item collection.
            viewModel.data[transactionList][(collectionLen - 1)].isLastItem = true;

            _checkShowDayBalance(transactionList);
        }

        function _checkShowDayBalance(transactionList) {
            for (var i = 0, len = viewModel.data[transactionList].length; i < len; i++) {
                viewModel.data[transactionList][i].showBalanceDay = viewModel.data[transactionList][i].isLastItem;
            }
        }

        function _checkAccountInUrl() {
            var accountUUID = StringProcessFactory.checkParamUrl('accountUUID');

            if (accountUUID) {
                let _account;

                if (ACCOUNTS.length > 0) {
                    _account = _.findWhere(ACCOUNTS, {
                        uuid: accountUUID
                    });
                } else {
                    _account = {
                        uuid: accountUUID
                    };
                }

                viewModel.model.account = _account;

                StorageFactory.removeSession('transactionsFilterType');
                StorageFactory.removeSession('transactionsFilterCategories');
                StorageFactory.removeSession('transactionsFilterTags');

                StorageFactory.setSession('transactionsFilterAccount', JSON.stringify(_account));

                if ($scope.barFilters) {
                    $scope.barFilters.status.filterOpen = true;
                }
                // StringProcessFactory.cleanParamsUrl();
            }
        }

        function _loadPreviewModeContext(index) {
            viewModel.previewModeContext.image = index === viewModel.previewModeContext.previewModeDefaultIndex ?
                $filter('assetPath')('images/application/im-preview-mode-default.png') :
                $filter('assetPath')('images/application/im-preview-mode-all-transactions.png');

            viewModel.previewModeContext.description = index === viewModel.previewModeContext.previewModeDefaultIndex ?
                $filter('translate')('transactions.changePreviewMode.default.description') :
                $filter('translate')('transactions.changePreviewMode.allTransactions.description');
        }

        function _checkMessageFilterZero() {

            var filterOpen = $scope.barFilters ? $scope.barFilters.status.filterOpen : false,
                searchOpen = $scope.barFilters ? $scope.barFilters.status.searchOpen : false;

            viewModel.status.showMessageFilterZero = viewModel.data.transactions.length === 0 &&
                filterOpen && !$scope.main.contextSource.currentEntity.showIntro ||

                viewModel.data.transactions.length === 0 &&
                searchOpen && !$scope.main.contextSource.currentEntity.showIntro;
        }

        function _checkMessageTransactionsZero() {

            var filterOpen = $scope.barFilters ? $scope.barFilters.status.filterOpen : false,
                searchOpen = $scope.barFilters ? $scope.barFilters.status.searchOpen : false;

            viewModel.status.showMessageTransactionsZero = viewModel.data.transactions.length === 0 &&
                !filterOpen && !searchOpen &&
                !$scope.main.contextSource.currentEntity.showIntro;
        }

        function _checkStatusFilter() {

            if (!$scope.barFilters) {
                return false;
            }

            $scope.barFilters.status.filterOpen = false;

            if (sessionStorage.getItem('transactionsFilterType') ||
                sessionStorage.getItem('transactionsFilterAccount') ||
                (sessionStorage.getItem('transactionsFilterCategories') && sessionStorage.getItem('transactionsFilterCategories') !== '[]') ||
                (sessionStorage.getItem('transactionsFilterTags') && sessionStorage.getItem('transactionsFilterTags') !== '[]') ||
                sessionStorage.getItem('transactionsSearch')) {

                $scope.barFilters.status.filterOpen = true;
            }
        }

        /**
         * @description It checks all the settings set in sessionStorage by the user and activates
         *              the application settings.
         *
         * @private
         */
        function _checkSessionStorage() {

            var _date = moment($scope.main.contextSource.today),
                surferRange = $scope.main.contextSource.currentEntity.preferences.transactionsSurferRange;

            if (StorageFactory.getSession('currentEntityId', true) !== $scope.main.contextSource.currentEntity.id) {
                var firstTransactionsFilterAccountValue;

                if ($scope.main.contextSource.currentUser.firstTransactionsFilterAccount) {
                    firstTransactionsFilterAccountValue = StorageFactory.getSession('transactionsFilterAccount');
                }

                TransactionFactory.cleanEntitySpecificSessionStorage();

                if (firstTransactionsFilterAccountValue !== undefined && firstTransactionsFilterAccountValue !== null) {
                    StorageFactory.setSession('transactionsFilterAccount', firstTransactionsFilterAccountValue);
                }

                $scope.main.contextSource.currentUser.firstTransactionsFilterAccount = false;

                StorageFactory.setSession('currentEntityId', $scope.main.contextSource.currentEntity.id);
            }

            // Get today's date setted by the server to avoid problems with the wrong date on the user's machine.

            if (StorageFactory.getSession('transactionsSurferRange') !== surferRange) {
                StorageFactory.setSession('transactionsSurferRange', surferRange);
                StorageFactory.setSession('transactionsStartDate', _date.startOf(surferRange).format('YYYY-MM-DD'));
                StorageFactory.setSession('transactionsEndDate', _date.endOf(surferRange).format('YYYY-MM-DD'));
            }

            if (!StorageFactory.getSession('transactionsStartDate')) {
                StorageFactory.setSession('transactionsStartDate', _date.startOf(surferRange).format('YYYY-MM-DD'));
            }

            viewModel.configs.periods.startDate = StorageFactory.getSession('transactionsStartDate');

            if (!StorageFactory.getSession('transactionsEndDate')) {
                StorageFactory.setSession('transactionsEndDate', _date.endOf(surferRange).format('YYYY-MM-DD'));
            }

            viewModel.configs.periods.endDate = StorageFactory.getSession('transactionsEndDate');

            if (StorageFactory.getSession('transactionsFilterType')) {
                viewModel.model.type = JSON.parse(StorageFactory.getSession('transactionsFilterType'));
            }

            if (StorageFactory.getSession('transactionsFilterAccount')) {
                viewModel.model.account = JSON.parse(StorageFactory.getSession('transactionsFilterAccount'));
            }

            if (StorageFactory.getSession('transactionsFilterCategories')) {
                viewModel.model.categories = JSON.parse(StorageFactory.getSession('transactionsFilterCategories'));
            }

            if (StorageFactory.getSession('transactionsFilterTags')) {
                viewModel.model.tags = JSON.parse(StorageFactory.getSession('transactionsFilterTags'));
            }
        }

        function _checkUpdateFuture(item, dataSaved) {
            /* jshint camelcase:false */
            if (dataSaved.transaction.recurrence_update === 'update_future') {
                _updateRecurrenceFuture(item);
            }

            if (dataSaved.transaction.recurrence_update === 'update_all') {
                _updateRecurrenceAll(item);
            }
        }

        /**
         * @description Check if the category is in the list of selected by the user.
         */
        function _checkTypeBalanceDisplay() {

            if (!$scope.barFilters) {
                viewModel.status.showTextFiltersBalanceDisplay = false;
            }
            viewModel.status.showTextFiltersBalanceDisplay = TransactionFactory.checkTypeBalanceDisplay($scope.barFilters.status);
        }

        /**
         * @description Retrieves an endpoint of the total results from the listing of current releases.
         *
         * @private
         */
        function _getBalance() {

            TransactionFactory.getTransactionsBalanceApi({
                filters: {
                    presets: viewModel.model.type.value === 'default' ? [] : [viewModel.model.type.value],
                    accounts: viewModel.model.account.uuid === 0 ? [] : [viewModel.model.account.uuid],
                    tags: viewModel.model.tags,
                    categories: viewModel.model.categories
                }
            }).then(function (resp) {
                var newData = resp.data;

                newData.balance = _getCurrencyInCentsMasked(resp.data.balance);
                newData.earnings = _getCurrencyInCentsMasked(resp.data.earnings);
                newData.expenses = _getCurrencyInCentsMasked(resp.data.expenses);
                newData.predictedBalance = _getCurrencyInCentsMasked(resp.data.predictedBalance);
                newData.predictedEarnings = _getCurrencyInCentsMasked(resp.data.predictedEarnings);
                newData.predictedExpenses = _getCurrencyInCentsMasked(resp.data.predictedExpenses);
                newData.previousBalance = _getCurrencyInCentsMasked(resp.data.previousBalance);
                newData.totalFilteredInCents = _getCurrencyInCentsMasked(resp.data.totalFilteredInCents);

                viewModel.data.transactionResults = newData;
            });
        }

        /**
         * @description View the total balance of the day.
         */
        function _getBalanceDay(item) {

            /* jshint camelcase:false */
            TransactionFactory.getTransactionsBalanceApi({
                filters: {
                    presets: viewModel.model.type.value === 'default' ? [] : [viewModel.model.type.value],
                    accounts: viewModel.model.account.uuid === 0 ? [] : [viewModel.model.account.uuid],
                    tags: viewModel.model.tags,
                    categories: viewModel.model.categories
                },
                start_date: item.date,
                end_date: item.date
            }).then(function (resp) {

                var _dateBalance = resp.data;

                _dateBalance.balanceMasked = _getCurrencyInCentsMasked(resp.data.balance, true);
                _dateBalance.earningsMasked = _getCurrencyInCentsMasked(resp.data.earnings, true);
                _dateBalance.expensesMasked = _getCurrencyInCentsMasked(resp.data.expenses, true);

                _dateBalance.predictedBalanceMasked = _getCurrencyInCentsMasked(resp.data.predictedBalance, true);
                _dateBalance.predictedEarningsMasked = _getCurrencyInCentsMasked(resp.data.predictedEarnings, true);
                _dateBalance.predictedExpensesMasked = _getCurrencyInCentsMasked(resp.data.predictedExpenses, true);
                _dateBalance.previousBalanceMasked = _getCurrencyInCentsMasked(resp.data.previousBalance, true);

                var predictedBalanceDay = resp.data.earnings + resp.data.expenses;

                _dateBalance.predictedBalanceIsNegative = predictedBalanceDay < 0;
                _dateBalance.balanceDayMasked = _getCurrencyInCentsMasked(predictedBalanceDay, true);

                viewModel.data.transactionsBalanceDayDetails[item.date].balance = _dateBalance;
            });
        }

        function _getBalanceResult() {

            /* jshint camelcase:false */
            TransactionFactory.getTransactionsBalanceResultApi({
                filters: {
                    presets: viewModel.model.type.value === 'default' ? [] : [viewModel.model.type.value],
                    accounts: viewModel.model.account.uuid === 0 ? [] : [viewModel.model.account.uuid],
                    tags: viewModel.model.tags,
                    categories: viewModel.model.categories
                }
            }).then(function (resp) {
                viewModel.data.transactionsBalanceDay = resp.data;
            });
        }

        /**
         * @description Controls the payment status of the posting by saving to an endpoint.
         *
         * @param {number} value Money format in cents to mask.
         * @param {boolean} symbol If show symbol money.
         *
         * @returns {string}

            Obs by Esdras: I really hate this, we are using floats to store monetary
            values. Not the best use case of floats.

         */
        function _getCurrencyInCentsMasked(valueInCents, symbol) {
            return CurrencyFactory.getCurrencyInCentsMasked(valueInCents, $scope.main.contextSource.currency, symbol);
        }

        function _getTransactions(transactionList, loadingType) {

            var promise = TransactionFactory.getTransactionsApi({
                /* jshint camelcase:false */
                filters: {
                    presets: viewModel.model.type.value === 'default' ? [] : [viewModel.model.type.value],
                    accounts: viewModel.model.account.uuid === 0 ? [] : [viewModel.model.account.uuid],
                    tags: viewModel.model.tags,
                    categories: viewModel.model.categories
                },
                offset: viewModel.pagination.offset,
                page_size: viewModel.pagination.pageSize
            });

            viewModel.tracker[loadingType].addPromise(promise);

            promise.then(function (resp) {

                if (loadingType === 'loadPagination') {
                    for (var i = 0, len = resp.data.transactions.length; i < len; i++) {
                        var _item = resp.data.transactions[i],
                            _itemFull = _reBuildTransactionsItem(_item, transactionList),
                            index = CollectionsFactory.findIndex(viewModel.data[transactionList], {
                                id: _item.id
                            });

                        // Necessario para não duplicar item na view e evitar erro de track by.
                        if (index === -1) {
                            viewModel.data[transactionList].push(_itemFull);
                        }
                    }

                    viewModel.data[transactionList] = TransactionFactory.sortTransactionCollection(viewModel.data[transactionList], MainFactory.entityPreferences('transactionsOrder'));

                    if (viewModel.pagination.offset === 500 && !StorageFactory.getSession('transactionsShowMessagePagination')) {
                        viewModel.status.showLimitPagination = true;
                    }
                } else {
                    viewModel.status.showLimitPagination = false;
                    viewModel.data[transactionList] = _reBuildTransactions(resp.data.transactions);
                }

                if (viewModel.data.transactionsPreviewModeAllTransactions) {
                    _calcTotalExpensesAndRevenue("transactions");
                }

                viewModel.pagination.offset = angular.copy(viewModel.pagination.offset) + resp.data.transactions.length;
                viewModel.pagination.hasMoreItems = resp.data.hasMoreItems;


                _getBalanceResult();
                _checkTypeBalanceDisplay();
                _checkMessageFilterZero();
                _checkMessageTransactionsZero();
                _checkDayTransaction(transactionList);

                TransactionFactory.updatePositionBarFixed();
            });
        }

        // Get datas in Start Controller.
        function _getDatasServer() {

            /* jshint camelcase:false */
            var prmAccounts = TransactionFactory.getAccountsApi(),
                prmCategories = TransactionFactory.getCategoriesApi(),
                prmCreditCards = TransactionFactory.getCreditCardsApi(),
                prmTags = TransactionFactory.getTagsApi(),
                prmInstitutions = FinhubInstitutions.getInstitutions(),
                prmAll = [];

            if (!$scope.main.contextSource.currentEntity.showIntro) {
                _checkAccountInUrl();

                var prmTransactions = TransactionFactory.getTransactionsApi({
                    filters: {
                        presets: viewModel.model.type.value === 'default' ? [] : [viewModel.model.type.value],
                        accounts: viewModel.model.account.uuid === 0 ? [] : [viewModel.model.account.uuid],
                        tags: viewModel.model.tags,
                        categories: viewModel.model.categories
                    },
                    offset: viewModel.pagination.offset,
                    page_size: viewModel.pagination.pageSize
                }),
                    prmTransactionsBalance = TransactionFactory.getTransactionsBalanceApi({
                        filters: {
                            presets: viewModel.model.type.value === 'default' ? [] : [viewModel.model.type.value],
                            accounts: viewModel.model.account.uuid === 0 ? [] : [viewModel.model.account.uuid],
                            tags: viewModel.model.tags,
                            categories: viewModel.model.categories
                        }
                    }),
                    prmTransactionsBalanceResult = TransactionFactory.getTransactionsBalanceResultApi({
                        filters: {
                            presets: viewModel.model.type.value === 'default' ? [] : [viewModel.model.type.value],
                            accounts: viewModel.model.account.uuid === 0 ? [] : [viewModel.model.account.uuid],
                            tags: viewModel.model.tags,
                            categories: viewModel.model.categories
                        }
                    });

                prmAll = $q.all([
                    prmAccounts,
                    prmCategories,
                    prmCreditCards,
                    prmTags,
                    prmInstitutions,

                    prmTransactions,
                    prmTransactionsBalance,
                    prmTransactionsBalanceResult
                ]);
            } else {
                prmAll = $q.all([
                    prmAccounts,
                    prmCategories,
                    prmCreditCards,
                    prmTags,
                    prmInstitutions
                ]);
            }

            viewModel.tracker.loadContent.addPromise(prmAll);

            prmAll.then(function (resp) {
                ACCOUNTS = resp[0].data;

                CATEGORIES = resp[1];

                CREDIT_CARDS = resp[2].data;

                TAGS = resp[3].data;

                if (!$scope.main.contextSource.currentEntity.showIntro) {
                    viewModel.pagination.offset = angular.copy(viewModel.pagination.offset) + resp[5].data.transactions.length;
                    viewModel.pagination.hasMoreItems = resp[5].data.hasMoreItems;

                    viewModel.data.transactions = _reBuildTransactions(resp[5].data.transactions);
                    viewModel.data.transactionResults = resp[6].data;
                    viewModel.data.transactionsBalanceDay = resp[7].data;

                    if (viewModel.data.transactionsPreviewModeAllTransactions) {
                        _calcTotalExpensesAndRevenue('transactions');
                    }

                    _checkStatusFilter();

                    _checkTypeBalanceDisplay();
                    _checkMessageFilterZero();
                    _checkMessageTransactionsZero();

                    _checkDayTransaction('transactions');

                    _checkAccountInUrl();
                }

                // Check open dialog new transaction or new tranfer. No alteration position this run.
                switch (StringProcessFactory.checkParamUrl('dialog')) {
                    case 'cadExpense':
                        showCadTransaction('expense');
                        break;
                    case 'cadRevenue':
                        showCadTransaction('revenue');
                        break;
                    case 'cadTransference':
                        showCadTransference();
                        break;
                }

                if (!$scope.main.contextSource.currentEntity.showIntro) {
                    setTimeout(function () {
                        getTransactionsOverdueCount();
                        TransactionFactory.updatePositionBarFixed();
                    }, 3000);
                }
            });
        }

        function _updateRecurrenceAll(item) {
            for (var i = 0, len = viewModel.data.transactions.length; i < len; i++) {

                var itemView = viewModel.data.transactions[i],
                    isSameRecurrence = itemView.recurrenceUuid === item.recurrenceUuid;

                if (isSameRecurrence) {

                    var itemViewOld = angular.copy(itemView),
                        newItem = angular.copy(item);

                    newItem.id = itemViewOld.id;
                    newItem.date = itemViewOld.date;
                    newItem.done = itemViewOld.done;
                    newItem.repeatIndex = itemViewOld.repeatIndex;

                    viewModel.data.transactions[i] = _reBuildTransactionsItem(newItem, 'transactions');
                }
            }
        }

        function _updateRecurrenceFuture(item) {

            for (var i = 0, len = viewModel.data.transactions.length; i < len; i++) {

                var itemView = viewModel.data.transactions[i],
                    isAfter = moment(itemView.date).isAfter(item.date, null, null, '[]'),
                    isSameRecurrence = itemView.recurrenceUuid === item.recurrenceUuid;

                if (isAfter && isSameRecurrence) {

                    var itemViewOld = angular.copy(itemView),
                        newItem = angular.copy(item);

                    newItem.id = itemViewOld.id;
                    newItem.date = itemViewOld.date;
                    newItem.done = itemViewOld.done;
                    newItem.repeatIndex = itemViewOld.repeatIndex;

                    viewModel.data.transactions[i] = _reBuildTransactionsItem(newItem, 'transactions');
                }
            }
        }

        /**
         * @description Set transaction data in the details bar and fire the $scope.barFooter.toogleControlBar
         *              method to open it
         */
        function _setDataBar(item, transactionList) {

            item.transactionList = transactionList;

            viewModel.data.details = item;

            TransactionFactory.getTransactionComplementApi(item).then(function (resp) {
                viewModel.data.details.observation = resp.data.observation;
                viewModel.data.details.attachments = resp.data.attachments;
                viewModel.data.details.recurrenceInfo = resp.data.recurrenceInfo;
                viewModel.data.details.infiniteRecurrenceRule = resp.data.infiniteRecurrenceRule;
                viewModel.data.details.bankConnBelvoTransaction = resp.data.bankConnBelvoTransaction;
                viewModel.data.details.tagsView = TransactionItemFactory.tagsSeparator(resp.data.tags, ',');

                if (viewModel.data.details.bankConnBelvoTransaction) {
                    viewModel.data.details.bankConnBelvoTransaction.openFinanceTagHTML = $sce.trustAsHtml(viewModel.data.details.bankConnBelvoTransaction.ofTag);
                }

                if (viewModel.data.details.recurrenceInfo) {
                    viewModel.data.details.recurrenceInfo = {
                        paidAmountInCentsMasked: _getCurrencyInCentsMasked(Math.abs(resp.data.recurrenceInfo.paidAmountInCents)),
                        pendingAmountInCentsMasked: _getCurrencyInCentsMasked(Math.abs(resp.data.recurrenceInfo.pendingAmountInCents))
                    };
                }

                // console.warn("BankConnBelvoTransaction ID", viewModel.data.details.bankConnBelvoTransaction.id);
                // console.warn("BankConnBelvoTransaction Counterparty", viewModel.data.details.bankConnBelvoTransaction.counterparty);
                // console.warn("BankConnBelvoTransaction Merchant", viewModel.data.details.bankConnBelvoTransaction.merchant);
                // console.warn("BankConnBelvoTransaction CreditCardData", viewModel.data.details.bankConnBelvoTransaction.creditCardData);
            });

            $scope.barFooter.toogleControlBar(true);
        }

        function toggleOpenFinanceMoreInfo() {
            if (viewModel.data.details.bankConnBelvoTransaction.moreInfoIsVisible) {
                viewModel.data.details.bankConnBelvoTransaction.moreInfoIsVisible = false;
            } else {
                viewModel.data.details.bankConnBelvoTransaction.moreInfoIsVisible = true;
            }
            return false;
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.WidgetAccountsCtrl', WidgetAccountsCtrl);

    WidgetAccountsCtrl.$inject = ['$injector', '$scope'];

    function WidgetAccountsCtrl($injector, $scope) {
        var viewModel = this,
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory');

        init();

        function init() {

            viewModel.data = {
                activeAccounts: [],
                archivedAccounts: [],
                generalBalance: CurrencyFactory.getCurrencyMasked(0.0, $scope.main.contextSource.currency, false),
                balanceIsNegative: false
            };

            viewModel.settingsAccountsPath = ContextFactory.getLegacyRoute('settings_accounts');

            $scope.$watch('dash.accounts', function (newValue) {
                let generalBalanceInFloat = 0.0,
                    accounts;

                if (newValue && newValue.ACCOUNTS) {
                    accounts = newValue.ACCOUNTS;

                    viewModel.data.activeAccounts = [];
                    viewModel.data.archivedAccounts = [];

                    for (var i = 0, len = accounts.length; i < len; i++) {
                        /* jshint camelcase:false */
                        if (!accounts[i].hide_balance) {
                            if (!accounts[i].archived || accounts[i].balance !== 0.0) {
                                generalBalanceInFloat += accounts[i].balance;
                                accounts[i].balanceFormatted = CurrencyFactory.getCurrencyMasked(accounts[i].balance, $scope.main.contextSource.currency, true);
                                if (accounts[i].archived) {
                                    viewModel.data.archivedAccounts.push(accounts[i]);
                                } else {
                                    viewModel.data.activeAccounts.push(accounts[i]);
                                }

                            }
                        }
                    }

                    viewModel.data.generalBalance = CurrencyFactory.getCurrencyMasked(generalBalanceInFloat, $scope.main.contextSource.currency, false);
                    viewModel.data.balanceIsNegative = generalBalanceInFloat < 0;
                }
            });
        }
    }
})();
(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.WidgetBillsToPayCtrl', WidgetBillsToPayCtrl);

    WidgetBillsToPayCtrl.$inject = ['$injector', '$scope'];

    function WidgetBillsToPayCtrl($injector, $scope) {
        var viewModel = this,
            $filter = $injector.get('$filter'),

            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            InvoicesFactory = $injector.get('zze.creditCard.CreditCardInvoices'),
            TransactionFactory = $injector.get('zze.transactions.transactionFactory'),

            publicMethods = {
                showCadTransaction: showCadTransaction,
                setPaymentTransaction: setPaymentTransaction,
                setCurrencyToAmount: setCurrencyToAmount,
                showTransactionDetails: showTransactionDetails,
                isEmptyState: isEmptyState,
                showMoreOverdue: showMoreOverdue,
                showLessOverdue: showLessOverdue,
                showMoreToday: showMoreToday,
                showLessToday: showLessToday,
                showMoreUpcoming: showMoreUpcoming,
                showLessUpcoming: showLessUpcoming,
                showPayCreditCard: showPayCreditCard,
                getBills: _getBillsToPay
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            /* jshint camelcase:false */
            viewModel.tracker = PromiseTrackerService.create([
                'loadBillsToPay'
            ]);
            viewModel.limitToShowOverdue = 4;
            viewModel.limitToShowToday = 4;
            viewModel.limitToShowUpcoming = 4;
            _getBillsToPay();
        }

        function showPayCreditCard(item, event, transactionList) {
            /* jshint camelcase:false */
            item.creditCardId = item.credit_card_id;
            item.amountInCents = item.amount_cents;
            item.creditCardInvoiceId = item.id;

            event.stopPropagation();

            TransactionFactory.showPayCreditCard($scope, item, transactionList, true);
        }

        function showCadTransaction(item) {
            $scope.dash.showCadTransaction('expense', item);
        }

        function showMoreOverdue() {
            viewModel.limitToShowOverdue = viewModel.limitToShowOverdue + 4;
        }

        function showMoreToday() {
            viewModel.limitToShowToday = viewModel.limitToShowToday + 4;
        }

        function showMoreUpcoming() {
            viewModel.limitToShowUpcoming = viewModel.limitToShowUpcoming + 4;
        }

        function showLessOverdue() {
            viewModel.limitToShowOverdue = 4;
        }

        function showLessToday() {
            viewModel.limitToShowToday = 4;
        }

        function showLessUpcoming() {
            viewModel.limitToShowUpcoming = 4;
        }

        function setCurrencyToAmount(amount) {
            return CurrencyFactory.getCurrencyMasked((amount / 100), $scope.main.contextSource.currency, true);
        }

        function setPaymentTransaction(item, listType) {
            var index = CollectionsFactory.findIndex(viewModel.data[listType], {
                id: item.id
            }),
                itemView = viewModel.data[listType][index];

            itemView.done = true;
            $scope.dash.setPaymentTransaction(itemView).then(function () {
                MessageFactory.setFlash($filter('translate')('dashboard.widget.billToPay.paymentStatus.success'), 'success');
                viewModel.data[listType].splice(index, 1);
                $scope.dash.updateStatus();
            }).catch(function () {
                itemView.done = false;
                MessageFactory.setFlash($filter('translate')('dashboard.widget.billToPay.paymentStatus.error'), 'error');
            });
        }

        function isEmptyState() {
            return viewModel.data.overdue.length === 0 &&
                viewModel.data.today.length === 0 &&
                viewModel.data.upcoming.length === 0;
        }

        function getInvoiceDetails(invoice) {
            return moment(InvoicesFactory.getInvoiceMonth(invoice.id)).format("MMMM YYYY");
        }

        function showTransactionDetails(item) {
            //console - fazer a chamada para a dash.controller, assim como o de baixo, showCadTransference(), que chama na dash.controller
            // a abertura de uma transfer;


            /*   Dialog.open({
                   scope: $scope,
                   template: $filter('assetPath')('templates/modules/dashboard/widgets/bills-to-pay/templates/transaction-item-details.template.html'),
                   controller: 'zze.dashboard.TransactionDetailsCtrl',
                   controllerAs: 'transactionDetails',
                   width: 470
               });
           }*/
            /* jshint camelcase:false */
            var type = item.activity_type === 0 ? 'expense' : 'earning';
            // console - quase funcionando... precisamos mudar o retorno para camelcase para funcionar e validar certinho o que está errado
            $scope.dash.showCadTransaction(type, item);


            /* var _item = item,
                 opts = {
                     scope: $scope,
                     data: {
                         type: type,
                         item: _item,
                         /*options: {
                             ctrl: 'overdue',
                             edit: 'callbackDialogEdit',
                             transactionList: transactionList || 'transactions'
                         },*/
            /*    accounts: $scope.ngDialogData.accounts,
                categories: $scope.ngDialogData.categories,
                creditCards: $scope.ngDialogData.creditCards,
                tags: $scope.ngDialogData.tags
            }//,
            /*resolve: {
                s3Upload: function () {
                    var url = ContextFactory.getEndPoint('s3_upload_options', 'enums');

                    return CrudFactory.getAll(url);
                }
            }*/
            //};


            //$scope.dash.showCadTransaction('expense');



            /*TransactionFactory.getTransactionComplementApi(_item).then(function (resp) {

                _item.complement = resp.data;

                TransactionFactory.showCadTransaction(opts);
            });*/
        }

        function _getBillsToPay() {
            var url = ContextFactory.getEndPointProccess({
                method: 'bills_to_pay',
                enums: 'widgets',
                replace: '',
                value: ''
            });

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadBillsToPay.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = {
                    overdue: _sanitizeTransactionList(resp.data.overdue, "overdue"),
                    today: _sanitizeTransactionList(resp.data.today, "today"),
                    upcoming: _sanitizeTransactionList(resp.data.upcoming, "upcoming")
                };
            });

        }

        function _sanitizeTransactionList(list) {
            /* jshint camelcase:false */
            var newList = angular.copy(list);

            for (var i = 0, len = newList.length; i < len; i++) {
                newList[i].masked_amount_in_cents = CurrencyFactory.getCurrencyMasked((newList[i].credit_card ? newList[i].amount_cents : newList[i].amount_in_cents) / 100, $scope.main.contextSource.currency, true);
                newList[i].formatedDate = moment(newList[i].date).format('DD/MM/YYYY');
                if (newList[i].credit_card) {
                    newList[i].invoiceDetails = getInvoiceDetails(newList[i]);
                }
            }

            return newList;
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.WidgetBillsToReceiveCtrl', WidgetBillsToReceiveCtrl);

    WidgetBillsToReceiveCtrl.$inject = ['$injector', '$scope'];

    function WidgetBillsToReceiveCtrl($injector, $scope) {
        var viewModel = this,
            $filter = $injector.get('$filter'),

            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MessageFactory = $injector.get('zze.commons.messagesFactory'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            publicMethods = {
                showCadTransaction: showCadTransaction,
                setPaymentTransaction: setPaymentTransaction,
                setCurrencyToAmount: setCurrencyToAmount,
                showTransactionDetails: showTransactionDetails,
                isEmptyState: isEmptyState,
                showMoreOverdue: showMoreOverdue,
                showLessOverdue: showLessOverdue,
                showMoreToday: showMoreToday,
                showLessToday: showLessToday,
                showMoreUpcoming: showMoreUpcoming,
                showLessUpcoming: showLessUpcoming,
                getBills: _getBillsToReceive
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            /* jshint camelcase:false */
            viewModel.tracker = PromiseTrackerService.create([
                'loadBillsToReceive'
            ]);
            viewModel.limitToShowOverdue = 4;
            viewModel.limitToShowToday = 4;
            viewModel.limitToShowUpcoming = 4;
            _getBillsToReceive();
        }

        function showCadTransaction() {
            $scope.dash.showCadTransaction('earning');
        }

        function showMoreOverdue() {
            viewModel.limitToShowOverdue = viewModel.limitToShowOverdue + 4;
        }

        function showMoreToday() {
            viewModel.limitToShowToday = viewModel.limitToShowToday + 4;
        }

        function showMoreUpcoming() {
            viewModel.limitToShowUpcoming = viewModel.limitToShowUpcoming + 4;
        }

        function showLessOverdue() {
            viewModel.limitToShowOverdue = 4;
        }

        function showLessToday() {
            viewModel.limitToShowToday = 4;
        }

        function showLessUpcoming() {
            viewModel.limitToShowUpcoming = 4;
        }

        function setCurrencyToAmount(amount) {
            return CurrencyFactory.getCurrencyMasked((amount / 100), $scope.main.contextSource.currency, true);
        }

        function setPaymentTransaction(item, listType) {
            var index = CollectionsFactory.findIndex(viewModel.data[listType], {
                id: item.id
            }),
                itemView = viewModel.data[listType][index];

            itemView.done = true;
            $scope.dash.setPaymentTransaction(itemView).then(function () {
                MessageFactory.setFlash($filter('translate')('dashboard.widget.billToReceive.paymentStatus.success'), 'success');
                viewModel.data[listType].splice(index, 1);
                $scope.dash.updateStatus();
            }).catch(function () {
                itemView.done = false;
                MessageFactory.setFlash($filter('translate')('dashboard.widget.billToReceive.paymentStatus.error'), 'error');
            });
        }

        function isEmptyState() {
            return viewModel.data.overdue.length === 0 &&
                viewModel.data.today.length === 0 &&
                viewModel.data.upcoming.length === 0;
        }

        function showTransactionDetails(item) {
            //console - fazer a chamada para a dash.controller, assim como o de baixo, showCadTransference(), que chama na dash.controller
            // a abertura de uma transfer;


            /*   Dialog.open({
                   scope: $scope,
                   template: $filter('assetPath')('templates/modules/dashboard/widgets/bills-to-pay/templates/transaction-item-details.template.html'),
                   controller: 'zze.dashboard.TransactionDetailsCtrl',
                   controllerAs: 'transactionDetails',
                   width: 470
               });
           }*/
            /* jshint camelcase:false */
            var type = item.activity_type === 0 ? 'expense' : 'revenue';

            // console - quase funcionando... precisamos mudar o retorno para camelcase para funcionar e validar certinho o que está errado
            $scope.dash.showCadTransaction(type, item);


            /* var _item = item,
                 opts = {
                     scope: $scope,
                     data: {
                         type: type,
                         item: _item,
                         /*options: {
                             ctrl: 'overdue',
                             edit: 'callbackDialogEdit',
                             transactionList: transactionList || 'transactions'
                         },*/
            /*    accounts: $scope.ngDialogData.accounts,
                categories: $scope.ngDialogData.categories,
                creditCards: $scope.ngDialogData.creditCards,
                tags: $scope.ngDialogData.tags
            }//,
            /*resolve: {
                s3Upload: function () {
                    var url = ContextFactory.getEndPoint('s3_upload_options', 'enums');

                    return CrudFactory.getAll(url);
                }
            }*/
            //};


            //$scope.dash.showCadTransaction('expense');



            /*TransactionFactory.getTransactionComplementApi(_item).then(function (resp) {

                _item.complement = resp.data;

                TransactionFactory.showCadTransaction(opts);
            });*/
        }

        function _getBillsToReceive() {
            var url = ContextFactory.getEndPointProccess({
                method: 'bills_to_receive',
                enums: 'widgets',
                replace: '',
                value: ''
            });

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadBillsToReceive.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = {
                    overdue: _sanitizeTransactionList(resp.data.overdue, "overdue"),
                    today: _sanitizeTransactionList(resp.data.today, "today"),
                    upcoming: _sanitizeTransactionList(resp.data.upcoming, "upcoming")
                };
            });

            //console - importante, tráz todos os lançamentos atrasados/de hoje/próximos, MAS exibe só 6 em 6, porque senão é muito elemento em tela,
            // assim, o "ver mais" pode ter uma função que carrega os demais itens da lista em tela, ao ponto que o usuário clica ou ao ponto em que a
            // lista fica vazia;
        }

        function _sanitizeTransactionList(list) {
            /* jshint camelcase:false */
            var newList = angular.copy(list);

            for (var i = 0, len = newList.length; i < len; i++) {
                newList[i].masked_amount_in_cents = CurrencyFactory.getCurrencyMasked(newList[i].amount_in_cents / 100, $scope.main.contextSource.currency, true);
                newList[i].formatedDate = moment(newList[i].date).format('DD/MM/YYYY');
            }

            return newList;
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.WidgetBudgetsCtrl', WidgetBudgetsCtrl);

    WidgetBudgetsCtrl.$inject = ['$injector', '$scope'];

    function WidgetBudgetsCtrl ($injector, $scope) {
        var viewModel = this,
            $filter = $injector.get('$filter'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),

            publicMethods = {
                getBudgetCurrencyMask: getBudgetCurrencyMask
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            /* jshint camelcase:false */
            viewModel.tracker = PromiseTrackerService.create([
                'loadBudgetsContent'
            ]);

            viewModel.config = {
                today: $scope.main.contextSource.today
            };

            viewModel.titleBar = _createTitleBar();

            _getBudgets();
        }

        function getBudgetCurrencyMask (value) {
            /* jshint camelcase:false */
            return CurrencyFactory.getCurrencyMasked(value/100, $scope.main.contextSource.currency, true);
        }

        function _getBudgets() {
            var url = ContextFactory.getEndPointProccess({
                method: 'budgets',
                enums: 'widgets',
                replace: '',
                value: ''
            });

            var promise = CrudFactory.getAll(url);

            viewModel.tracker.loadBudgetsContent.addPromise(promise);

            promise.then(function (resp) {
                viewModel.data = {
                    budgets: _setBudgetPercentual(resp.data.budgets)
                };
            });

            //console - Trazer id/UUID da categoria, isso para poder encontrar o item na lista e atualizar apenas o item.
            // Entendeu? jogar o id da categoria na linha do item, e quando for necessário atualizar, atualizar apenas aquela linha
            // porém, atentar-se se isso vai performar bem, acredito que sim.
        }

        function _setBudgetPercentual (budgets) {
            /* jshint camelcase:false */
            var newBudgetList = angular.copy(budgets);

            for (var i = 0, len = newBudgetList.length; i < len; i++) {
                var percentual = ((newBudgetList[i].value*100)/newBudgetList[i].budget).toFixed(0);
                newBudgetList[i].percentual = percentual;
                newBudgetList[i].graphic_percentual = (100 * 6) - ((24 * 6) * percentual) / 100;
            }

            return newBudgetList;
        }

        function _createTitleBar () {
            return $filter('translate')('dashboard.widget.budgets.titleBar', { month: moment(viewModel.config.today).format('MMMM') });
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.WidgetBlogCtrl', WidgetBlogCtrl);

    WidgetBlogCtrl.$inject = ['$injector'];

    function WidgetBlogCtrl ($injector) {
        var viewModel = this,
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            publicMethods = { };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            viewModel.tracker = PromiseTrackerService.create([
                'loadBlogContent'
            ]);

            viewModel.data = {
                posts: []
            };

            _getBlogPosts();
        }


        function _getBlogPosts() {
            var promise = CrudFactory.getAll("https://www.organizze.com.br/blog/wp-json/wp/v2/posts?_embed&per_page=3&page=1");

            viewModel.tracker.loadBlogContent.addPromise(promise);

            viewModel.data.posts = [];

            promise.then(function (resp) {
                for (var i = 0, len = resp.data.length; i < len; i++) {
                    var post = resp.data[i];

                    /* jshint camelcase:false */
                    viewModel.data.posts.push({
                        id: post.id,
                        url: post.link,
                        title: post.title.rendered,
                        date: post.date,
                        thumbnail: post._embedded['wp:featuredmedia']['0'].source_url
                    });
                }
            });
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.WidgetCreditCardsCtrl', WidgetCreditCardsCtrl);

    WidgetCreditCardsCtrl.$inject = ['$injector', '$scope'];

    function WidgetCreditCardsCtrl ($injector, $scope) {
        var viewModel = this,
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            MainFactory = $injector.get('zze.mainFactory'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory');

        init();

        function init () {

            viewModel.data = {
                visibleCreditCards: [],
                sumOfAllInvoices: CurrencyFactory.getCurrencyMasked(0.0, $scope.main.contextSource.currency, false),
                sumOfAllInvoicesIsNegative: false
            };

            viewModel.settingsCreditCardsPath = ContextFactory.getLegacyRoute('settings_credit_cards');

            viewModel.headingTitleText = "Faturas";
            viewModel.monthOfCalculation = "";
            viewModel.yearOfCalculation = "";
            viewModel.isAnyOverdue = false;

            $scope.$watch('dash.credit_cards', function (newValue) {
                /* jshint camelcase:false */
                let currentMonthInvoicesInCents = 0,
                    nextMonthInvoicesInCents = 0,
                    credit_cards,
                    today = MainFactory.today(),
                    nextMonth = moment(today).add(1, 'month');

                if (newValue && newValue.CREDIT_CARDS) {
                    credit_cards = newValue.CREDIT_CARDS;

                    viewModel.data.visibleCreditCards = [];

                    for (var i = 0, len = credit_cards.length; i < len; i++) {
                        if (!credit_cards[i].archived || credit_cards[i].current_invoice_value_in_cents !== 0) {

                            let invoiceDate = moment(credit_cards[i].current_invoice_date);

                            credit_cards[i].amountAvailableFormatted = CurrencyFactory.getCurrencyMasked(credit_cards[i].amount_available, $scope.main.contextSource.currency, false);
                            credit_cards[i].currentInvoiceValueFormatted = CurrencyFactory.getCurrencyMasked(credit_cards[i].current_invoice_value_in_cents / 100, $scope.main.contextSource.currency, false);
                            credit_cards[i].dueDateFormatted = invoiceDate.format('D [/] M');
                            viewModel.data.visibleCreditCards.push(credit_cards[i]);

                            if (credit_cards[i].current_invoice_is_overdue) {
                                viewModel.isAnyOverdue = true;
                            }

                            if (credit_cards[i].current_invoice_is_paid === false) {
                                if (invoiceDate.month() === today.month()) {
                                    currentMonthInvoicesInCents += credit_cards[i].current_invoice_value_in_cents;
                                } else {
                                    if (invoiceDate.month() === nextMonth.month()) {
                                        nextMonthInvoicesInCents += credit_cards[i].current_invoice_value_in_cents;
                                    }
                                }
                            }
                        }
                    }

                    if ((currentMonthInvoicesInCents === 0) && (nextMonthInvoicesInCents !== 0)) {
                        viewModel.data.sumOfAllInvoices = CurrencyFactory.getCurrencyMasked(nextMonthInvoicesInCents / 100, $scope.main.contextSource.currency, false);
                        viewModel.data.sumOfAllInvoicesIsNegative = nextMonthInvoicesInCents < 0;
                        viewModel.monthOfCalculation = nextMonth.format("MMMM");
                        viewModel.yearOfCalculation = nextMonth.format("YY");
                    } else {
                        viewModel.data.sumOfAllInvoices = CurrencyFactory.getCurrencyMasked(currentMonthInvoicesInCents / 100, $scope.main.contextSource.currency, false);
                        viewModel.data.sumOfAllInvoicesIsNegative = currentMonthInvoicesInCents < 0;
                        viewModel.monthOfCalculation = today.format("MMMM");
                        viewModel.yearOfCalculation = today.format("YY");
                    }

                    viewModel.headingTitleText = "Faturas de "+viewModel.monthOfCalculation;
                }
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .controller('zze.dashboard.WidgetTopExpensesCtrl', WidgetTopExpensesCtrl);

    WidgetTopExpensesCtrl.$inject = ['$injector', '$scope', '$window'];

    function WidgetTopExpensesCtrl ($injector, $scope, $window) {
        var viewModel = this,
            $filter = $injector.get('$filter'),
            PromiseTrackerService = $injector.get('zze.commons.promiseTrackerService'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            publicMethods = {
                goToReports: goToReports,
                changePreset: changePreset,
                showCadTransaction: showCadTransaction,
                getPopoverConfig: getPopoverConfig,
                getGraphicExpensesPercents: getGraphicExpensesPercents
            };

        _.extend(viewModel, publicMethods);

        init();

        function init() {
            /* jshint camelcase:false */
            viewModel.tracker = PromiseTrackerService.create([
                'loadTopExpenses'
            ]);

            viewModel.buttonReportClass = false;

            //console - conferir se o default está vindo e se está sendo salvo no viewModel.userPeriodPreset,
            // então não esquecer de fazer o caminho reverso: quando o usuário clicar em umperído, mandar salvar
            // no backend o período, recarregando o widget e salvando um novo viewModel.userPeriodPreset
            //CRIAR O DEFAULT AQUI, QUE VAI VIR DA DASHBOARD PROVAVELMENTE, EM WIDGETS CONFIG
            viewModel.userPeriodPreset = 'current_month';

            viewModel.graphic = {
                config: {
                    currency: $scope.main.contextSource.currency,
                    id: 'expenses',
                    total: 0
                },
                data: [],
                presets: {
                    currentMonth: 'current_month',
                    last15days: 'last_15_days',
                    last30days: 'last_30_days',
                    last3months: 'last_3_months',
                    last6months: 'last_6_months'
                }
            };

            _buildPresetConfig(viewModel.userPeriodPreset);
            _loadExpenses();
        }

        function getGraphicExpensesPercents(value) {
            var calc = (value / viewModel.graphic.config.total) * 100;

            return calc.toFixed(2);
        }

        function goToReports() {
            let categoriesReportURL = "/"+$scope.main.contextSource.currentEntity.id+ "/relatorios/categorias/pizza";

            $window.location.href = categoriesReportURL;
        }

        function getPopoverConfig() {
            return {
                width: 182,
                template: $filter('assetPath')('templates/modules/dashboard/widgets/top-expenses/templates/top-expenses-config-popover.template.html')
            };
        }

        function showCadTransaction() {
            $scope.dash.showCadTransaction('expense');
        }

        function changePreset(newPreset) {
            /* jshint camelcase:false */
            viewModel.buttonReportClass = false;
            _buildPresetConfig(newPreset);
            _getTopExpenses(newPreset);

            _showItemDelay(1900);
        }

        function _buildPresetConfig(newPreset) {
            viewModel.selectedPreset = newPreset;

            var newPeriod = $filter('translate')('dashboard.widget.topExpenses.preset.'+newPreset);
            viewModel.titleBar = $filter('translate')('dashboard.widget.topExpenses.titleBar', { period: newPeriod });
        }

        function _loadExpenses() {
            _getTopExpenses(viewModel.userPeriodPreset);
            _showItemDelay(3500);
        }

        function _getTopExpenses(newPreset) {
            /* jshint camelcase:false */
            var url = ContextFactory.getEndPointProccess({
                enums: 'widgets',
                method: 'top_expenses_update',
                replace: '',
                value: ''
            }),
            promise = CrudFactory.put(url, {periods_preset: newPreset});

            viewModel.tracker.loadTopExpenses.addPromise(promise);

            promise.then(function (resp) {
                viewModel.graphic.data = resp.data;
                viewModel.graphic.config.total = _sumValueGraphicExpenses(viewModel.graphic.data);
            });
        }

        function _sumValueGraphicExpenses(graphicData) {
            var total = 0;

            for (var i = 0, len = graphicData.length; i < len; i++) {
                total = total + graphicData[i].value;
            }

            return total;
        }

        function _showItemDelay(time) {
            setTimeout(function () {
                $scope.$apply(function () {
                    viewModel.buttonReportClass = true;
                });
            }, time);
        }
    }

})();

/**
 * Created by selinger on 08/09/17.
 */
(function () {

    'use strict';

    angular.module('asset-path')
        .directive('assetPath', function () {
            return {
                restrict: 'A',
                compile: function (el, attrs) {
                    el.attr('src', AssetPath.get(attrs.assetPath));
                }
            };
        });
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeCharts', zzeCharts);

    function zzeCharts () {
        var directive = {
            restrict: 'E',
            scope: {
                config: '=',
                data: '='
            },
            template: '<div zze-loading="chart.tracker.chart{{chart.data.id}}" zze-loading-type="pageSmall" class="chart {{chart.config.class}}" id="chart-{{chart.data.id}}"></div>',
            link: link,
            controller: 'zze.commons.ChartCtrl',
            controllerAs: 'chart',
            bindToController: true
        };

        return directive;

        function link (scope) {
            scope.chart.getChart();
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @module zze.commons
     * @name zze.commons:zzeMaskCurrency
     * @restrict A
     *
     * @description Resource responsible in mask and format monetary value according to the saved configuraçãoes
     *              in window.Currency.
     *
     * @param {expression} zzeMaskCurrency Value of the element to be processed by the directive.
     *
     * @example:
     *      <example module="zze.commons">
     *          <file name="index.html">
     *              <div class="row">
     *                  <div class="span12">
     *                      <input type="text" zze-mask-currency placeholder="Informe um valor R$" />
     *                  </div>
     *              </div>
     *          </file>
     *      </example>
     */
    angular.module('zze.commons')
        .directive('zzeMaskCurrency', zzeMoney);

    zzeMoney.$inject = ['$injector'];

    function zzeMoney($injector) {
        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: link
        };

        return directive;

        function link(scope, element, attrs, ctrl) {
            var CurrencyFactory = $injector.get('zze.commons.currencyFactory');
            var currencySettings = scope.main ? scope.main.contextSource.currency : attrs.zzeMaskCurrency,
                maskSettings = {
                    symbol: false,

                    /* jshint camelcase:false */
                    thousands: currencySettings.thousands_separator,

                    /* jshint camelcase:false */
                    decimal: currencySettings.decimal_mark,
                    precision: currencySettings.subunit_to_unit === 1 ? 0 : 2,
                    defaultZero: true,
                    allowZero: true,
                    allowNegative: attrs.allowNegative === 'true'
                };

            element
                .before('<small>' + currencySettings.symbol + '</small>')
                .attr('maxlength', 25)

                .maskMoney(maskSettings)
                .maskMoney('mask')

                /* In some cases it's necessary to force the change event :( Do NOT REMOVE ever! */
                .on('keyup.money', function () {
                    element.triggerHandler('input');
                    element.triggerHandler('change');
                });

            // MODEL -> $formatters -> VIEW.
            ctrl.$formatters.push(function (value) {
                var _value = value < 0 && !maskSettings.allowNegative ? value * -1 : value;

                return CurrencyFactory.getCurrencyMasked(_value, currencySettings, false);
            });

            // VIEW -> $parsers -> MODEL.
            ctrl.$parsers.unshift(function (value) {
                return CurrencyFactory.getCurrencyParse(value, currencySettings.decimal_mark);
            });
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @module zze.commons
     * @name zze.commons:zzeDatepicker
     * @restrict A
     * @element input
     *
     * @description Add a calendar in the field.
     *
     * @param {object} zzeDatepicker Accepts the settings available in the component's official doc. See the
     *                 settings available <a href="http://api.jqueryui.com/datepicker" target="_blank">here</a>.
     *
     * @example:
     *      <pre>
     *          <input type="text" zze-datepicker />
     *      </pre>
     */
    angular.module('zze.commons')
        .directive('zzeDatepicker', zzeDatepicker);

    zzeDatepicker.$inject = ['$injector'];

    function zzeDatepicker ($injector) {
        var MessageFactory = $injector.get('zze.commons.messagesFactory');

        var directive = {
                restrict: "A",
                require: "ngModel",
                link: link
            },

            $filter = $injector.get('$filter');

        return directive;

        function link (scope, element, attrs, ctrl) {

            // Extend object with settings to plugin zzeDatePicker.
            var options = _.extend({
                buttonImage: $filter('assetPath')('images/application/icon-calendar-zze.png'),

                onSelect: function (dateText) {
                    _setViewValue(dateText);
                },

            }, scope.$eval(attrs.zzeDatepicker));

            element
                .mask('00/00/0000')
                .zzeDatePicker(options)
                .parent()
                .addClass('zze-datepicker');

            // VIEW -> $parsers -> MODEL.
            ctrl.$parsers.unshift(function (viewValue) {
                if (!viewValue) {
                    return;
                }

                return moment(viewValue, 'DD/MM/YYYY').format('YYYY-MM-DD');
            });

            // MODEL -> $formatters -> VIEW.
            ctrl.$formatters.push(function (modelValue) {
                if (!modelValue) {
                    return;
                }

                return moment(modelValue).format('DD/MM/YYYY');
            });

            ctrl.$validators.date = function () {
                var m = moment(ctrl.$viewValue, 'DD/MM/YYYY');

                if (options.minDate) {
                    var dateUser = moment(ctrl.$viewValue, 'DD/MM/YYYY'),
                        dateMin  = moment(options.minDate, 'DD/MM/YYYY');

                    if (dateUser.isBefore(dateMin, 'day') && dateUser.isValid()) {
                        return false;
                    }
                }

                return m.isValid();
            };

            MessageFactory.checkOnBlur(element, ctrl.$error);

            function _setViewValue (dateText) {
                scope.$apply(function () {
                    ctrl.$setViewValue(dateText);
                    ctrl.$render();
                });
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeDialogOpen', zzeDialogOpen);

    // zzeDialogOpen.$inject = ['$injector'];

    function zzeDialogOpen () {

        function linkFunction(scope, element, attrs) {
            var zzeDialogName = attrs.zzeDialogOpen;

            element.off('click.zzeDialogOpen').on('click.zzeDialogOpen', function(e) {

                e.preventDefault();

                var selector = '*[zze-dialog-name="'+zzeDialogName+'"]:first';

                var $dialog = $(selector);

                openDialog($dialog);

                return false;

            });
        }

        return {
            restrict: 'A',
            link: linkFunction
        };
    }


    function openDialog($dialog) {
        var $content = $('*[zze-dialog-content]:first', $dialog);

        $dialog.fadeIn(200);

        $content.fadeIn(400);

        $('*[zze-dialog-close]', $dialog).off('click.zzeDialogClose').on('click.zzeDialogClose', function() {
            $content.fadeOut(200);
            $dialog.fadeOut(200);
        });
    }

})();
(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeDialog', zzeDialog);

    zzeDialog.$inject = ['$injector'];

    function zzeDialog ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: function(element, attrs) {
                return $filter('assetPath')('templates/'+attrs.templatePath);
            }
        };
    }

})();

(function () {

    'use strict';

    angular.module('independent-loader')
        .directive('independentLoading', loading);

    loading.$inject = ['$injector'];

    function loading ($injector) {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            var $compile = $injector.get('$compile'),
                $parse = $injector.get('$parse'),
                $templateCache = $injector.get('$templateCache'),
                LOADING_TEMPLATE = $injector.get('independent-loader.LOADING_TEMPLATES'),

                trackerName = attrs.independentLoading,
                loadingType = attrs.independentLoadingType || 'pageMedium',
                templateName = attrs.independentLoadingTemplate,

                loadingElement;

            if (angular.isUndefined(trackerName) || !angular.isString(trackerName) || trackerName === '') {
                throw new Error('Deve ser informado um Tracker para a diretiva loading!');
            }

            if (!templateName) {
                templateName = LOADING_TEMPLATE[loadingType];
            } else {
                var templateEvaluated = $parse(templateName)(scope);

                if (templateEvaluated) {
                    templateName = templateEvaluated;
                }
            }

            var template = $templateCache.get(templateName),
                tracker = $parse(trackerName)(scope),

                bindingConfigForValidTacker = function (tracker) {

                    /* jshint unused:false */
                    var unWatch = scope.$watch(tracker.active, function (active) {

                        if (active === true) {
                            _startLoading();

                        } else {
                            _stopLoading();

                        }
                    });
                };

            loadingElement = $compile(template)(scope);

            if (tracker) {
                bindingConfigForValidTacker(tracker);

            } else {

                scope.$watch(attrs.loading, function (newTracker) {

                    if (newTracker) {
                        bindingConfigForValidTacker(newTracker);
                    }

                });
            }

            function _removeLoadingIcon () {
                loadingElement.remove();
            }

            function _startLoading () {
                if (element.data('loading')) {
                    return;
                }

                element
                    .data('loading', true)
                    .prepend(loadingElement);

                loadingElement.addClass('hide-next-elements');
            }

            function _stopLoading () {
                if (!element.data('loading')) {
                    return;
                }

                element.removeData('loading');

                _removeLoadingIcon();
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeBarFixed', zzeBarFixed);

    zzeBarFixed.$injector = ['$injector'];

    function zzeBarFixed () {
        return {
            scope: {},
            restrict: 'A',
            link: zzeBarFixedLink
        };

        function zzeBarFixedLink (scope, element, attrs) {
            var settings = {
                    areaScroll: $(window),
                    isFixedBottom: attrs.zzeFixedBottom ? true : false,
                    fixedClass: attrs.zzeBarFixed,
                    windowHeight: null,
                    elementWidth: element.parent().width(),
                    elementHeight: element.innerHeight(),
                    elementTopPosition: _getTopPosition(element),
                    elementStart: document.body
                },
                pos = {
                    lastHeight: 0,
                    lastElemHeight: 0,
                    newHeight: 0,
                    newElemHeight: 0
                };

            setTimeout(function () {
                settings.windowHeight = settings.areaScroll.innerHeight();
                settings.elementTopPosition = _getTopPosition(element);

                $(window)
                    .off('scroll.' + settings.fixedClass)
                    .on('scroll.' + settings.fixedClass, function () {
                        _checkElementClass(element, settings);
                    })
                    .on('resize', function () {
                        run(settings.elementStart);
                    });

                element.parent().innerHeight(settings.elementHeight + 1);

                _checkElementClass(element, settings);

                _onElementHeightChange(settings.elementStart);
            }, 1500);

            function _onElementHeightChange (elm) {
                pos.lastHeight = elm.clientHeight;
                pos.lastElemHeight = settings.elementHeight;

                run(elm);
            }

            function run (elm) {
                pos.newHeight = elm.clientHeight;
                pos.newElemHeight = element.innerHeight();
                settings.elementWidth = element.parent().width();

                if (pos.lastHeight !== pos.newHeight || pos.lastElemHeight !== pos.newElemHeight) {
                    settings.elementHeight = element.innerHeight();

                    settings.windowHeight = settings.areaScroll.innerHeight();

                    var elemParent = element.parent();

                    elemParent.innerHeight(settings.elementHeight + 1);
                    settings.elementTopPosition = _getTopPosition(elemParent);

                    _checkElementClass(element, settings);
                }

                pos.lastHeight = pos.newHeight;
                pos.lastElemHeight = pos.newElemHeight;
            }

            scope.$on(settings.fixedClass, function () {
                setTimeout(function () {
                    run(settings.elementStart);
                }, 50);
            });
        }

        function _checkElementClass (element, settings) {
            if (!settings.isFixedBottom && settings.areaScroll.scrollTop() > settings.elementTopPosition) {

                element
                    .addClass(settings.fixedClass)
                    .css({
                        width: settings.elementWidth + 'px'
                    });
            } else if (settings.isFixedBottom && (settings.areaScroll.scrollTop() + settings.windowHeight - settings.elementHeight < settings.elementTopPosition)) {

                element
                    .addClass(settings.fixedClass)
                    .css({
                        width: settings.elementWidth + 'px'
                    });
            } else {
                element.removeClass(settings.fixedClass);
            }
        }

        function _getTopPosition (element) {
            var offset = element.offset();

            if (!offset) {
                return 0;
            }

            return element.offset().top;
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeCheckEsc', zzeCheckEsc);

    /**
     * @ngdoc directive
     * @name zze.commons.directive:zzeCheckEsc
     * @restrict A
     *
     * @description When selecting an element, the ESC is monitored in order to run some action.
     *
     * @param {string} zzeCheckEsc It should be informed what you want to run when you tap ESC.
     *
     * @example:
     *      <example module="zze.commons">
     *          <file name="index.html">
     *              <div ng-controller="zze.commons.TestEsc as esc" class="row">
     *                  <div class="span2">
     *                      <button zze-check-esc="esc.testEsc()" ng-click="esc.setMessage()" class="button button-green">Click me ;)</button>
     *                  </div>
     *                  <div class="span6">
     *                      <p ng-if="esc.msg">Want to see a cool magic? Press ESC and I sumirei right under your eyes.</p>
     *                  </div>
     *              </div>
     *          </file>
     *
     *          <file name="controller.js">
     *              (function () {
     *
     *                  'use strict';
     *
     *                  angular.module('zze.commons')
     *                      .controller('zze.commons.TestEsc', TestEsc);
     *
     *                  function TestEsc () {
     *                      var viewModel = this,
     *
     *                          publicMethods = {
     *                              setMessage: setMessage,
     *                              testEsc: testEsc
     *                          };
     *
     *                      _.extend(viewModel, publicMethods);
     *
     *                      viewModel.msg = false;
     *
     *                      function testEsc () {
     *                          viewModel.msg = false;
     *                      }
     *
     *                      function setMessage () {
     *                          viewModel.msg = true;
     *                      }
     *                  }
     *              })();
     *          </file>
     *      </example>
     */
    function zzeCheckEsc () {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            var bindFunction = function (event) {
                if (event.which === 27) {
                    scope.$apply(function () {
                        scope.$eval(attrs.zzeCheckEsc);
                    });

                    event.preventDefault();
                }
            };
            element.off("keydown.zze.checkEsc");
            element.off("keypress.zze.checkEsc");
            element.on("keydown.zze.checkEsc", bindFunction);
            element.on("keypress.zze.checkEsc", bindFunction);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeClickTouch', zzeClickTouch);

    /**
     * @ngdoc directive
     * @name zze.commons.directive:zzeClickTouch
     * @restrict A
     *
     * @description Required for elements that have double action, one in the click and another in any other event.
     *              Using this directive instead of ngClick, it is necessary due to mobile / iPad devices to undo the
     *              click and fire a specific event.
     *
     * @param {string} zzeClickTouch Method that should be executed on the element's onClick.
     * @param {string} zzeTriggerTouch When it is a mobile device, the event passed here will be triggered. Default
     *                 it is _mouseenter_.
     *
     * @example:
     *      <example module="zze.commons">
     *          <file name="index.html">
     *              <div class="row">
     *                  <div class="span2">
     *                      <button zze-trigger-touch="blur" zze-click-touch="myMethodClick()" ng-blur="myMethodBlur()" class="button button-green">Example</button>
     *                  </div>
     *              </div>
     *          </file>
     *      </example>
     */
    function zzeClickTouch () {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            element
                .bind('touchstart', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    var event = attrs.zzeTriggerTouch || 'mouseenter';

                    element.trigger(event);
                })
                .bind('click', function () {
                    scope.$apply(attrs.zzeClickTouch);
                });
        }
    }
})();

// (function () {

//     'use strict';

//     angular.module('zze.commons')
//         .directive('zzeColorPicker', zzeColorPicker);

//     zzeColorPicker.$injector = ['$injector'];

//     function zzeColorPicker () {
//         return {
//             restrict: 'E',
//             link: zzeColorPickerLink
//         };

//         function zzeColorPickerLink () {

//             window.cpInit = function (id) {
//                 /* jshint camelcase:false */

//                 var obj = document.getElementById(id);
//                 if (!obj) {
//                     alert('Colour picker can\'t find "' + id + '"');
//                     return;
//                 }

//                 var newobj = document.createElement('input');
//                 newobj.type = 'hidden';
//                 newobj.value = obj.value;
//                 newobj.name = obj.name;

//                 if (obj.onchange) {
//                     newobj.onchange = obj.onchange;
//                 }

//                 obj.parentNode.insertBefore(newobj, obj);
//                 obj.parentNode.removeChild(obj);
//                 newobj.id = id;
//                 obj = newobj;

//                 var box = document.createElement('span');
//                 box.style.backgroundColor = '#' + obj.value;
//                 box.label = id;

//                 /* jslint evil:true */
//                 box.onclick = new Function('cp_open(this)');
//                 obj.parentNode.insertBefore(box, obj);
//             };

//             setTimeout(function () {
//                 window.cpInit('color');
//             },200);

//         }
//     }

// })();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @name zze.directive:zzeMainNavigation
     *
     * @restrict E
     *
     * @param {String} zzeMainNavigation Menu session to be activated.
     *
     * @description Controls the activation of the current page in the navigation menu.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <div zze-main-navigation="metas">
     *              Lorem ipsum dolor sit amet, consectetur adipisicing elit.
     *          </div>
     *      </file>
     * </example>
     */

    angular.module('zze.commons')
        .directive('zzeMainNavigation', zzeMainNavigation);

    function zzeMainNavigation () {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            $('*[zze-scope=main-navigation]:first').trigger('setActive', [attrs.zzeMainNavigation]);
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @name  zze.commons.directive:zzeMaskCnpj
     * @element input
     * @description Adds the CNPJ mask and notifies the user if it is invalid.
     *
     * @restrict A
     * @requires ngModel
     *
     * @returns {String} Number with the CNPJ mask applied and validated.
     *
     * @example
     *  <example module="zze">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-4">
     *                  <label>CNPJ:</label>
     *                  <input type="text" ng-model="myCnpj" zze-mask-cnpj />
     *              <div>
     *          </div>
     *      </file>
     *  </example>
     */

    angular.module('zze.commons')
        .directive('zzeMaskCnpj', zzeMaskCnpj);

    zzeMaskCnpj.$inject = ['$injector'];

    function zzeMaskCnpj ($injector) {
        var directive = {
                restrict: 'A',
                require: 'ngModel',
                link: link
            },

            $filter = $injector.get('$filter'),
            MessagesField = $injector.get('zze.commons.messagesFactory'),
            ValidatorService = $injector.get('zze.commons.validatorsFactory');

        return directive;

        function link (scope, element, attrs, ctrl) {

            element
                .mask('00.000.000/0000-00', {
                    placeholder: "__.___.___/____-__"
                });

            ctrl.$validators.cnpj = result;

            MessagesField.checkOnBlur(element, ctrl.$error);

            // MODEL -> $formatters -> VIEW
            ctrl.$formatters.unshift(function (modelValue) {
                if (!modelValue) {
                    return;
                }

                return $filter('zzeMaskCNPJ')(modelValue);
            });

            // VIEW -> $parsers -> MODEL
            ctrl.$parsers.unshift(function (viewValue) {
                return viewValue.replace(/[^\d]/g, '');
            });

            function result (viewValue) {
                if (!viewValue || !ctrl) {
                    MessagesField.removeMessageField(element);
                    return null;
                }

                return ValidatorService.cnpj(viewValue);
            }
        }
    }
}());

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @name  zze.commons.directive:zzeMaskCpf
     * @element input
     * @description Adds the CPF mask and notifies the user if it is invalid.
     *
     * @restrict A
     * @requires ngModel
     *
     * @returns {String} Number with the CPF mask applied and validated.
     *
     * @example
     *  <example module="zze">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-4">
     *                  <label>CPF:</label>
     *                  <input type="text" ng-model="myCpf" zze-mask-cpf />
     *              <div>
     *          </div>
     *      </file>
     *  </example>
     */

    angular.module('zze.commons')
        .directive('zzeMaskCpf', zzeMaskCpf);

    zzeMaskCpf.$inject = ['$injector'];

    function zzeMaskCpf ($injector) {
        var directive = {
                restrict: 'A',
                require: 'ngModel',
                link: link
            },

            $filter = $injector.get('$filter'),
            MessagesField = $injector.get('zze.commons.messagesFactory'),
            ValidatorService = $injector.get('zze.commons.validatorsFactory');

        return directive;

        function link (scope, element, attrs, ctrl) {
            element
                .attr('maxlength', 14)
                .mask('000.000.000-00', {
                    placeholder: '___.___.___-__'
                });

            function result (viewValue) {
                if (!viewValue || !ctrl) {
                    MessagesField.removeMessageField(element);

                    return null;
                }

                return ValidatorService.cpf(viewValue);
            }

            ctrl.$validators.cpf = result;

            // MODEL -> $formatters -> VIEW
            ctrl.$formatters.unshift(function (modelValue) {
                if (!modelValue) {
                    return;
                }

                return $filter('zzeMaskCPF')(modelValue);
            });

            // VIEW -> $parsers -> MODEL
            ctrl.$parsers.unshift(function (viewValue) {
                return viewValue.replace(/[^\d]/g, '');
            });

            MessagesField.checkOnBlur(element, ctrl.$error);
        }
    }
}());

(function() {

    'use strict';

    /**
     * @ngdoc directive
     * @name  zze.commons.directive:zzeMaskPhone
     * @element input
     * @description Adds the phone mask taking into consideration the 9 digit.
     *
     * @restrict A
     * @requires ngModel
     * @returns {string} Number with phone mask applied.
     * @function
     *
     * @example
     *  <example module="zze">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-4">
     *                  <input type="text" data-ng-model="phone" zze-mask-phone placeholder="Insert you phone with DDD" />
     *              <div>
     *          </div>
     *      </file>
     *  </example>
     */
    angular.module('zze.commons')
        .directive('zzeMaskPhone', zzeMaskPhone);

    zzeMaskPhone.$inject = ['$injector'];

    function zzeMaskPhone ($injector) {

        var $filter = $injector.get('$filter'),
            MessagesField = $injector.get('zze.commons.messagesFactory'),
            GeneralFactory = $injector.get('zze.utils.generalFactory');

        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: _link
        };

        return directive;

        function _link (scope, elem, attr, ctrl) {

            var SPMaskBehavior = function (value) {
                    return value.replace(/\D/g, '').length === 11 ? '(00) 00000-0000' : '(00) 0000-00009';
                },
                spOptions = {
                    placeholder: '(__) ____-____',
                    onKeyPress: function(value, e, field, options) {
                        field.mask(SPMaskBehavior.apply({}, arguments), options);
                    }
                };

            elem.mask(SPMaskBehavior, spOptions);

            ctrl.$validators.format = result;

            MessagesField.checkOnBlur(elem, ctrl.$error);

            // MODEL -> $formatters -> VIEW
            ctrl.$formatters.unshift(function (modelValue) {
                if (!modelValue) {
                    return;
                }

                return $filter('zzeMaskPhone')(modelValue);
            });

            // VIEW -> $parsers -> MODEL
            ctrl.$parsers.unshift(function (viewValue) {
                return GeneralFactory.getOnlyNumbers(viewValue);
            });

            function result (value) {

                if (!value || !ctrl) {
                    return null;
                }

                var inputValue = value;

                if (typeof(inputValue) !== 'string') {
                    inputValue = inputValue.toString();
                }

                inputValue = GeneralFactory.getOnlyNumbers(inputValue);

                if (inputValue && inputValue.length < 10) {
                    return false;
                } else {
                    return true;
                }
            }
        }
    }
}());

(function() {

    'use strict';

    /**
     * @ngdoc directive
     * @name  zze.commons.directive:zzeMaskZipCode
     * @element input
     *
     * @description Adds the zip code mask and notifies the user if it is incomplete.
     *
     * @restrict A
     * @requires ngModel
     *
     * @returns {String} Number with zip code mask applied and validated.
     *
     * @example
     *  <example module="zze">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-4">
     *                  <label>CEP:</label>
     *                  <input type="text" data-ng-model="myCep" zze-mask-zip-code />
     *              <div>
     *          </div>
     *      </file>
     *  </example>
     */

    angular.module('zze.commons')
        .directive('zzeMaskZipCode', zzeMaskZipCode);

    zzeMaskZipCode.$inject = ['$injector'];

    function zzeMaskZipCode ($injector) {
        var directive = {
                restrict: 'A',
                require: 'ngModel',
                link: link
            },

            $filter = $injector.get('$filter'),
            MessagesField = $injector.get('zze.commons.messagesFactory');

        return directive;

        function link (scope, elem, attrs, ctrl) {

                elem
                    .mask('00000-000', {
                        placeholder: "_____-___"
                    });

                function result (viewValue) {
                    if (!viewValue || !ctrl) {
                        MessagesField.removeMessageField(elem);

                        return null;
                    }

                    if (viewValue && viewValue.length < 8) {
                        return false;
                    }

                    return true;
                }

                ctrl.$validators.zipCode = result;

                // MODEL -> $formatters -> VIEW
                ctrl.$formatters.unshift(function (modelValue) {
                    if (!modelValue) {
                        return;
                    }
                    return $filter('zzeMaskZipCode')(modelValue);
                });

                // VIEW -> $parsers -> MODEL
                ctrl.$parsers.unshift(function (viewValue) {
                    return viewValue.replace(/[^\d]/g, '');
                });

                MessagesField.checkOnBlur(elem, ctrl.$error);
            }
        }

}());

/**
 * Created by selinger on 06/09/17.
 */
(function () {

    'use strict';

    angular.module('zze.commons')

        /**
         * @ngdoc directive
         * @name  zze.commons.directive:zzeMask
         * @element input
         * @description Adds the custom mask and notifies the user if it is invalid.
         *
         * @restrict A
         * @requires ngModel
         *
         * @example
         *  <example module="zze">
         *      <file name="index.html">
         *          <div class="row">
         *              <div class="col-md-4">
         *                  <label>Mask Custom</label>
         *                  <input type="text" ng-model="myCustomMask" zze-mask="00.SS/00-AS0" />
         *              <div>
         *          </div>
         *      </file>
         *  </example>
         */
        .directive('zzeMask', zzeMask);

    function zzeMask () {
        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            var a = attrs.zzeMask;

            element
                .mask(a, {
                    reverse: true
                });
        }
    }
}());

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @module zze.commons
     * @name zze.commons:zzeRequired
     * @restrict A
     * @element input
     *
     * @description It should be applied to the required form fields. If the form is submitted and any required field is
     *              not filled, it is launching a $ error in form and notify the user with a simple warning.
     *
     * @example:
     *  <example module="zze.commons">
     *      <file name="index.html">
     *          <div ng-controller="zze.commons.RequiredCtrl as required" class="row">
     *              <div class="col-md-12">
     *                  <form name="required.form" novalidade>
     *                      <div class="input-row">
     *                          <label class="label">Nome completo</label>
     *                          <div class='group-field'>
     *                              <input zze-required ng-model="required.data.name" type="text" />
     *                          </div>
     *                      </div>
     *                      <div class="input-row">
     *                          <button ng-click="required.save()" class="button button-green">Salvar</button>
     *                      </div>
     *                  </form>
     *              </div>
     *          </div>
     *      </file>
     *      <file name="controller.js">
     *          (function () {
     *
     *              'use strict';
     *
     *              angular.module('zze.commons')
     *                  .controller('zze.commons.RequiredCtrl', RequiredCtrl);
     *
     *              RequiredCtrl.$inject= ['$injector'];
     *
     *              function RequiredCtrl ($injector) {
     *                  var viewModel = this,
     *
     *                      MessageFactory = $injector.get('zze.commons.messagesFactory'),
     *
     *                      publicMethods = {
     *                          save: save
     *                      };
     *
     *                  _.extend(viewModel, publicMethods);
     *
     *                  init();
     *
     *                  function init () {
     *
     *                  }
     *
     *                  function save () {
     *                      var hasError = MessageFactory.checkError(viewModel.form.$error);
     *
     *                      if (hasError) {
     *                          return;
     *                      }
     *
     *                      alert('Send form with success!');
     *                  }
     *              }
     *          })();
     *      </file>
     *  </example>
     */
    angular.module('zze.commons')
        .directive('zzeRequired', zzeRequired);

    zzeRequired.$inject = ['$injector'];

    function zzeRequired ($injector) {
        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: link
        },

        MessageFactory = $injector.get('zze.commons.messagesFactory');

        return directive;

        function link (scope, element, attrs, ctrl) {

            ctrl.$validators.required = validate;

            if (element.hasClass('zze-selectize')) {
                // isSelectize.
            }

            MessageFactory.checkOnChange(element, ctrl.$error);

            scope.$watch(attrs.zzeRequired, function () {
                ctrl.$validate();
            });

            function isValRequired (val) {

                /* $isEmpty does not treat Array empty, so I need to validate manually. */
                if (Array.isArray(val) && val.length === 0) {
                    return true;
                }

                return ctrl.$isEmpty(val);
            }

            function validate (value) {
                var isRequired = scope.$eval(attrs.zzeRequired);

                if (isRequired && isValRequired(value) || isRequired === undefined && isValRequired(value)) {
                    if (ctrl.$dirty) {
                        MessageFactory.setMessageField(element, {
                            type: 'required'
                        });
                    }

                    return false;
                } else {
                    MessageFactory.removeMessageField(element);
                    return true;
                }
            }
        }
    }
}());

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @module zze.commons
     * @name  zze.commons:zzeRestrictNumber
     *
     * @restrict A
     * @element input
     * @requires ngModel
     *
     * @description Locks field to receive number only.
     *
     * @example
     *  <example module="bfc">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-4">
     *                  <input type="text" ng-model="restrict" zze-restrict-number />
     *              <div>
     *          </div>
     *      </file>
     *  </example>
     */

    angular.module('zze.commons')
        .directive('zzeRestrictNumber', zzeRestrictNumber);

    function zzeRestrictNumber () {
        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: link
        };

        return directive;

        function link (scope, elem, attr, ctrl) {
            var transformedInput,

                result = function (value) {
                    var inputValue = value;

                    if (inputValue && typeof(inputValue) !== 'string') {
                        inputValue = inputValue.toString();
                    }

                    transformedInput = inputValue;

                    if (inputValue) {
                        transformedInput = transformedInput.replace(/[^\d]/g, '');
                    }

                    if (transformedInput !== inputValue) {
                        ctrl.$setViewValue(transformedInput);
                        ctrl.$render();
                    }

                    return true;
                };

            /* Because some keys are not identified in the keypress, I use the keyup to validate the not identifiable.
             * This bug is universal and all recursoso tested have the same problem, which proves not to be our
             * implementation failure. This was the best solution found until now. */
            elem.on('keyup.bfRestrictNumber', function () {
                var valView = elem.val();

                if (transformedInput !== valView && /[^\d]/g.test(valView)) {
                    ctrl.$setViewValue(transformedInput);
                    ctrl.$render();
                }
            });

            ctrl.$validators.bfRestrictNumber = result;
        }
    }
}());

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @module zze.commons
     * @name zze.commons:zzeScrollAnimate
     * @restrict A
     *
     * @description Animate a scrollbar to a position of the mapped view with an id.
     *
     * @param {string} href Pass an #id of the anchor you want to position the scroll to click. Use # in id.
     *
     * @param {number} zzeScrollAnimate To give a margin in the position of the scroll. Starts with 62px off.
     *
     * @example:
     *      <pre>
     *          <div class="row">
     *              <div class="span6">
     *                  <a zze-scroll-animate="50" href="#my-feacture">Animate scrollbar</button>
     *              </div>
     *              <div class="span6">
     *                  <a zze-scroll-animate href="#my-feacture">Animate scrollbar</button>
     *              </div>
     *          </div>
     *          <div class="row">
     *              <div id="my-feacture" class="span12"></div>
     *          </div>
     *      </pre>
     */
    angular.module('zze.commons')
        .directive('zzeScrollAnimate', zzeScrollAnimate);

    function zzeScrollAnimate () {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            element.on('click.zzeScrollAnimate', function (e) {
                e.preventDefault();
                e.stopPropagation();

                var value = attrs.href,
                    offset = attrs.zzeScrollAnimate || 62,
                    anchor;


                anchor = $(value).offset().top - offset;

                $('html, body').stop().animate({
                    scrollTop: anchor
                }, 700);
            });
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @module zze.commons
     * @name zze.commons:zzeScrollReference
     * @restrict A
     *
     * @description Add bookmark menu according to the position of the scroll and the element on the screen.
     *
     * @param {number} zzeScrollReference To give a margin in the position of the scroll. Starts with 64px off.
     *
     * @example:
     *      <pre>
     *          <div class="row">
     *              <div zze-scroll-reference class="span12">
     *                  <ul>
     *                      <li><a href="#my-feacture1">Feacture I</button></li>
     *                      <li><a href="#my-feacture2">Feacture II</button></li>
     *                      <li><a href="#my-feacture3">Feacture III</button></li>
     *                  </ul>>
     *              </div>
     *          </div>
     *          <div class="row">
     *              <div id="my-feacture1" class="span12"></div>
     *          </div>
     *          <div class="row">
     *              <div id="my-feacture2" class="span12"></div>
     *          </div>
     *          <div class="row">
     *              <div id="my-feacture3" class="span12"></div>
     *          </div>
     *      </pre>
     */
    angular.module('zze.commons')
        .directive('zzeScrollReference', zzeScrollReference);

    function zzeScrollReference () {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            var isControlMenu = attrs.zzeScrollReferenceMenu === 'true' ? true : false,
                elementTopPosition = _getTopPosition(element),
                elementWidth = element.outerWidth();

            $(window)
                .off('scroll.floatingMenu')
                .on('scroll.floatingMenu', function () {
                    var scrollTopPosition = $(window).scrollTop();

                    if (scrollTopPosition > elementTopPosition) {
                        _setNavigationFixed(element, elementWidth);
                    } else {
                        _setNavigationRelative(element);
                    }
                });

            if (isControlMenu) {
                var linksAndSections = _linksAndSectionsMaped(element, attrs);

                $(window)
                    .off('scroll.floatingMenu:activator')
                    .on('scroll.floatingMenu:activator', function () {
                        var currentItem;

                        linksAndSections.each(function () {
                            this.link.parent().removeClass('actived');

                            if ($(window).scrollTop() > this.offsetTop) {
                                if (!currentItem || this.offsetTop > currentItem.offsetTop) {
                                    currentItem = this;
                                }
                            }
                        });

                        if (currentItem) {
                            currentItem.link.parent().addClass('actived');
                        }
                    });
            }
        }

        function _getTopPosition (element) {
            var offset = element.offset();

            if (!offset) {
                return 0;
            }

            return element.offset().top;
        }

        function _setNavigationFixed (element, menuWidth) {
            if (element.css('position') !== 'fixed') {
                element
                    .css({
                        position: 'fixed',
                        top: 0,
                        width: menuWidth
                    })
                    .addClass('fixed');
            }
        }

        function _setNavigationRelative (element) {
            if (element.css('position') !== 'relative') {
                element
                    .css({
                        position: 'relative'
                    })
                    .removeClass('fixed');
            }
        }

        function _linksAndSectionsMaped (element, attrs) {
            return element.find('a').map(function () {
                var sectionId = $(this).attr('href'),
                    offSet = attrs.zzeScrollReference || 64;

                return {
                    link: $(this),
                    section: $(sectionId),
                    offsetTop: _getTopPosition($(sectionId)) - offSet
                };
            });
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @module zze.commons
     * @name zze.commons:zzeSlickSlide
     * @restrict A
     * @element div
     *
     * @description Plugin for slide show. See an <a href="https://github.com/kenwheeler/slick" target="_blank">official document</a>.
     *
     * @param {object} zzeSlickSlide If an object with the desired settings is not passed, a default is applied that is
     * transition fade without controls and position identifiers. See the options in the official plugin doc..
     *
     * @example:
     *      <pre>
     *          <div class="row">
     *              <div class="span12">
     *                  <div zze-slick-slide class="myClassStyle">
     *                      <div class="styleMyItems">Content my items</div>
     *                      <div class="styleMyItems">Content my items</div>
     *                      <div class="styleMyItems">Content my items</div>
     *                      <div class="styleMyItems">Content my items</div>
     *                  </div>
     *              </div>
     *          </div>
     *      </pre>
     */
    angular.module('zze.commons')
        .directive('zzeSlickSlide', zzeScrollAnimate);

    function zzeScrollAnimate () {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            var settings = attrs.zzeSlickSlide || {
                    dots: false,
                    infinite: true,
                    speed: 250,
                    fade: true,
                    cssEase: 'linear',
                    centerMode: true,
                    autoplay: true,
                    autoplaySpeed: 10000,
                    arrows: false,
                    pauseOnFocus: false,
                    pauseOnHover: false
                };

            element.slick(settings);
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @name zze.directive:zzeSubmitForm
     * @element form
     * @restrict A
     *
     * @param {String} zzeSubmitForm Name of the control where the _form_ is.
     * @param {String} name Name of the _form_, it should follow the pattern: _**nameControler.form**_.
     * @param {String} novalidate Disables browser default validation.
     *
     * @description This directive scans the _form_ for errors, so the _form_ can be locked when it can not be sent.
     *              By default, forms must follow the naming pattern: _**nameControler.form**_.
     *
     * **Note:** When there is a need for more than one _form_ in the view, never use _ng-if_, always use _ng-show_ if you
     *         need to hide, and the _form_ name must follow the following naming: _**nameControler.form.nameForm**_.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <div ng-controler="zze.MySimpleForm as simpleForm">
     *              <form zze-submit-form="simpleForm" name="simpleForm.form" novalidate>
     *                  <div class="action-bar">
     *                      <button ng-click="simpleForm.sendData()"
     *                              class="zze-component_button zze-button-primary">
     *                          Ok,continuar
     *                      </button>
     *                  </div>
     *              </form>
     *          </div>
     *
     *          <hr />
     *
     *          <div ng-controler="zze.MyComplexForm as complexForm">
     *              <form zze-submit-form="complexForm" name="complexForm.form.create" novalidate>
     *                  <div class="action-bar">
     *                      <button ng-click="simpleForm.sendData('create')"
     *                              class="zze-component_button zze-button-primary">
     *                          Ok,continuar
     *                      </button>
     *                  </div>
     *              </form>
     *              <form zze-submit-form="complexForm" name="complexForm.form.update" novalidate>
     *                  <div class="action-bar">
     *                      <button ng-click="simpleForm.sendData('update')"
     *                              class="zze-component_button zze-button-primary">
     *                          Ok,continuar
     *                      </button>
     *                  </div>
     *              </form>
     *          </div>
     *      </file>
     *      <file name="mySimpleForm.js">
     *          (function () {
     *
     *              'use strict';
     *
     *              angular.module('zze')
     *                  .controller('zze.MySimpleFormCtrl', MySimpleFormCtrl);
     *
     *              function MySimpleFormCtrl () {
     *                  var viewModel = this,
     *
     *                      publicMethods = {
     *                          sendData: sendData
     *                      };
     *
     *                   _.extend(viewModel, publicMethods);
     *
     *                   function sendData () {
     *
     *                       // If the form has an error,
     *                       // it does not let the rest of the method execute.
     *                       if (!_isFormValid()) {
     *                          return;
     *                       }
     *                   }
     *
     *                   function _isFormValid () {
     *                       return viewModel.form && viewModel.form.$valid;
     *                   }
     *              }
     *          })();
     *      </file>
     *      <file name="myComplexForm.js">
     *          (function () {
     *
     *              'use strict';
     *
     *              angular.module('zze')
     *                  .controller('zze.MyComplexForm', MyComplexForm);
     *
     *              function MyComplexForm () {
     *                  var viewModel = this,
     *
     *                      publicMethods = {
     *                          sendData: sendData
     *                      };
     *
     *                   _.extend(viewModel, publicMethods);
     *
     *                   function sendData (formName) {
     *
     *                       // If the form has an error,
     *                       // it does not let the rest of the method execute.
     *                       if (!_isFormValid(formName)) {
     *                          return;
     *                       }
     *                   }
     *
     *                   function _isFormValid (formName) {
     *                       return viewModel.form[formName] && viewModel.form[formName].$valid;
     *                   }
     *              }
     *          })();
     *      </file>
     * </example>
     */

    angular.module('zze.commons')
        .directive('zzeSubmitForm', zzeSubmitForm);

    zzeSubmitForm.$inject = ['$injector'];

    function zzeSubmitForm ($injector) {
        var directive = {
            restrict: 'A',
            scope: {
                zzeSubmitForm: "="
            },
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            var MessageFactory = $injector.get('zze.commons.messagesFactory');

            // Find the shape name when there is more than one.
            var formNameArr = attrs.name.split('.');

            element.on('submit', function () {
                var form = formNameArr.length === 3 ? scope.zzeSubmitForm.form[formNameArr[2]] : scope.zzeSubmitForm.form;

                if (form.$invalid) {
                    var elemsWithErros = $('.ng-invalid', element);

                    angular.forEach(elemsWithErros, function (field) {
                        MessageFactory.setMessageField($(field), {
                            type: 'required'
                        });
                    });

                    $('.zze-component_errors-field input[type="text"]:first').focus();
                }
            });
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeToggle', zzeToggle);

    function zzeToggle () {
        var directive = {
            restrict: 'A',
            link: link,
            scope: {
                zzeToggle: '&'
            }
        };

        return directive;

        function link () {
            // var elementView = $(attrs.zzeToggle);

            // console.log(scope);
            // console.log(attrs.zzeToggle);

            // elementView.show();

            // element
            //     .on('mouseenter.toggle', function () {
            //         console.log('M');
            //     })
            //     .on('mouseleave.toggle', function () {
            //         console.log('W');
            //     });
        }
    }
})();

/**
 * Created by selinger on 12/09/17.
 */
(function() {

    'use strict';

    /**
     * @ngdoc directive
     * @name  zze.commons.directive:zzeValidateEmail
     * @element input
     *
     * @description Checks if the email is in a valid format.
     *
     * @restrict A
     * @requires ngModel
     *
     * @example
     *  <example module="zze">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-4">
     *                  <label>E-mail:</label>
     *                  <input type="text" data-ng-model="myEmail" zze-validate-email />
     *              <div>
     *          </div>
     *      </file>
     *  </example>
     */
    angular.module('zze.commons')
        .directive('zzeValidateEmail', zzeValidateEmail);

    zzeValidateEmail.$inject = ['$injector'];

    function zzeValidateEmail ($injector) {

        var MessagesField =    $injector.get('zze.commons.messagesFactory'),
            ValidatorService = $injector.get('zze.commons.validatorsFactory');

        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: link
        };

        return directive;

         function link (scope, element, attrs, ctrl) {

            function result (viewValue) {
                if (!viewValue || !ctrl) {
                    MessagesField.removeMessageField(element);

                    return null;
                }

                return ValidatorService.email(viewValue);
            }

            ctrl.$validators.email = result;

            MessagesField.checkOnBlur(element, ctrl.$error);
        }
    }
}());

/**
 * Created by selinger on 12/09/17.
 */
(function() {

    'use strict';

    /**
     * @ngdoc directive
     * @name  zze.commons.directive:zzeValidateEmails
     * @element textarea
     *
     * @description Checks if the emails is in a valid format.
     *
     * @restrict A
     * @requires ngModel
     *
     * @example
     *  <example module="zze">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-4">
     *                  <label>E-mails:</label>
     *                  <textarea type="text" data-ng-model="myEmails" zze-validate-emails></textarea>
     *              <div>
     *          </div>
     *      </file>
     *  </example>
     */
    angular.module('zze.commons')
        .directive('zzeValidateEmails', zzeValidateEmails);

    zzeValidateEmails.$inject = ['$injector'];

    function zzeValidateEmails ($injector) {

        var MessagesField =    $injector.get('zze.commons.messagesFactory'),
            ValidatorService = $injector.get('zze.commons.validatorsFactory');

        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: link
        };

        return directive;

        function link (scope, element, attrs, ctrl) {

            var emailsValidate = null;

            function result (viewValue) {

                if (!viewValue || !ctrl) {
                    emailsValidate = true;

                    MessagesField.removeMessageField(element);

                    return true;
                }

                emailsValidate = ValidatorService.emails(ctrl.$viewValue);

                if (typeof emailsValidate === 'string') {
                    return false;
                }

                return true;
            }

            function checkMessage () {
                MessagesField.removeMessageField(element);

                if (typeof emailsValidate === 'string') {
                    MessagesField.setMessageField(element, {
                        type: 'custom'
                    }, emailsValidate);
                }
            }

            ctrl.$validators.custom = result;

            element
                .data('alreadyAdd', true)
                .on('blur', function () {
                    setTimeout(function () {
                        checkMessage();
                    }, 100);
                });
        }
    }
}());

/**
 * Created by selinger on 12/09/17.
 */
// (function() {
//
//     'use strict';
//
//     /**
//      * @ngdoc directive
//      * @name  bfc.directive:bfValidateUrl
//      * @element input
//      * @description Verifica se a URL está em um formato válido.
//      *
//      * @restrict A
//      * @requires ngModel
//      *
//      * @example
//      *  <example module="bfc">
//      *      <file name="index.html">
//      *          <div class="row">
//      *              <div class="col-md-4">
//      *                  <label>Url:</label>
//      *                  <input type="text" data-ng-model="myUrl" data-bf-validate-url />
//      *              <div>
//      *          </div>
//      *      </file>
//      *  </example>
//      */
//
//     angular.module('bfc')
//         .directive('bfValidateUrl', ['bfc.MessagesField', 'bfc.Validators',
//             function(MessagesField, ValidatorService) {
//                 return {
//                     restrict: 'A',
//                     require: 'ngModel',
//                     link: function(scope, element, attrs, ctrl) {
//
//                         element.attr('placeholder', 'Ex.: http://www.site.com.br');
//
//                         function checkHttp (value) {
//                             if (value.indexOf('http://') === -1 && value.indexOf('https://') === -1) {
//                                 var AI = [
//                                     'https:/','https:','https//:','https/:','https//','https/','https',
//                                     'http:/','http:','http//:','http/:','http//','http/','http',
//                                     'htts://','htts:/','htts:','htts//:','htts/:','htts//','htts/',
//                                     'htt://','htt:/','htt:','htt//:','htt/:','htt//','htt/',
//                                     'hts://','hts:/','hts:/','hts:','hts//:','hts/:','hts//','hts/',
//                                     'ht://','ht:/','ht:/','ht:','ht//:','ht/:','ht//','ht/',
//                                     'htps://','htps:/','htps:','htps//:','htps/:','htps//','htps/',
//                                     'htp://','htp:/','htp:','htp//:','htp/:','htp//','htp/',
//                                     'ttps://','ttps:/','ttps:','ttps//:','ttps/:','ttps//','ttps/','ttps',
//                                     'ttp://','ttp:/','ttp:','ttp//:','ttp/:','ttp//','ttp/','ttp',
//                                     'tps://','tps:/','tps:/','tsp:','tps//:','tps/:','tps//','tps/',
//                                     'tp://','tp:/','tp:/','tp:','tp//:','tp/:','tp//','tp/',
//                                     'tts://','tts:/','tts:/','tts:','tts//:','tts/:','tts//','tts/',
//                                     'tt://','tt:/','tt:/','tt:','tt//:','tt/:','tt//','tt/',
//                                     'hps://','hps:/','hps:/','hps:','hps//:','hps/:','hps//','hps/',
//                                     'hp://','hp:/','hp:/','hp:','hp//:','hp/:','hp//','hp/',
//                                     'hs://','hs:/','hs:/','hs:','hs//:','hs/:','hs//','hs/',
//                                     'h://','h:/','h:/','h:','h//:','h/:','h//','h/',
//                                     'ps://','ps:/','ps:/','ps:','ps//:','ps/:','ps//','ps/',
//                                     'p://','p:/','p:/','p:','p//:','p/:','p//','p/',
//                                     'ts://','ts:/','ts:/','ts:','ts//:','ts/:','ts//','ts/',
//                                     't://','t:/','t:/','t:','t//:','t/:','t//','t/',
//                                     '://',':/','//:','/:','//'
//                                 ];
//
//                                 var url;
//
//                                 for (var i = 0, len = AI.length; i < len; i++) {
//                                     if (value.indexOf(AI[i]) !== -1) {
//                                         var protocol = AI[i].indexOf('s') === -1 ? 'http://' : 'https://';
//
//                                         url = protocol + value.replace(AI[i], '');
//
//                                         break;
//                                     }
//                                 }
//
//                                 return url || ('http://' + value);
//                             }
//
//                             return value;
//                         }
//
//                         function setViewValue (value) {
//                             ctrl.$setViewValue(value);
//                             ctrl.$render();
//                         }
//
//                         function result (viewValue) {
//                             if (!viewValue || !ctrl) {
//                                 MessagesField.removeMessage(element);
//
//                                 return null;
//                             }
//
//                             return ValidatorService.url(viewValue);
//                         }
//
//                         ctrl.$validators.url = result;
//
//                         // MODEL -> $formatters -> VIEW
//                         ctrl.$formatters.unshift(function (modelValue) {
//                             if (!modelValue) {
//                                 return;
//                             }
//
//                             var _modelValue = checkHttp(modelValue),
//                                 isValid = ValidatorService.url(_modelValue);
//
//                             if (!isValid) {
//                                 MessagesField.setMessage(element, 'url');
//                             }
//
//                             setViewValue(_modelValue);
//
//                             return _modelValue;
//                         });
//
//                         element
//                             .on('focus', function () {
//                                 if (!ctrl.$viewValue) {
//                                     setViewValue('http://');
//                                 }
//                             })
//                             .on('blur', function () {
//                                 if (ctrl.$viewValue === '' || ctrl.$viewValue === 'http://' || ctrl.$viewValue === 'https://') {
//                                     setViewValue('');
//
//                                     return;
//                                 }
//
//                                 var _value = checkHttp(ctrl.$viewValue);
//
//                                 if (_value !== ctrl.$viewValue) {
//                                     setViewValue(_value);
//                                 }
//                             });
//
//                         MessagesField.checkOnBlur(element, ctrl.$error);
//                     }
//                 };
//             }
//         ]);
// }());

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeLoading', loading);

    loading.$inject = ['$injector'];

    function loading ($injector) {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        /**
         * @ngdoc directive
         *
         * @restrict A
         * @module zze.commons
         * @name   zze.commons:zzeLoading
         *
         * @description It depends on the trackerName attribute is an object and has an active property should return
         *              true when to show the loading and false if not.
         *
         * @param {expression} zzeLoading Expression for monitoring the promise. When the referenced promise is started
         *                     a loading is triggered, being monitored by the expression awaiting the promise be
         *                     resolved to remove it.
         * @param {string} zzeLoadingType Informs the type of loading to be taken. Are available:
         *     - _pageSmall_;
         *     - **_pageMedium_**: Executed by default if not passed this attribute;
         *     - _pageBig_;
         *     - _pageSmallWhite_;
         *     - _pageMediumWhite_;
         *     - _pageBigWhite_;
         *     - _headerSmall_;
         *     - _headerBig_.
         *
         * @example:
         *     <example module="zze.commons">
         *         <file name="index.html">
         *             <div ng-controller="zze.commons.LoadingCtrl as loa" class="row">
         *                 <div class="span2">
         *                     <button ng-click="loa.loading()" class="button button-green">Start loading</button>
         *                 </div>
         *                 <div class="span6">
         *                     <blockquote ng-if="loa.tracker.loading.active()">Aguarde 7s para encerrar esta promise. Não aparece o loader aqui porque o design não está importado.</blockquote>
         *                 </div>
         *             </div>
         *         </file>
         *
         *         <file name="controller.js">
         *            (function () {
         *
         *                'use strict';
         *
         *                angular.module('zze.commons')
         *                    .controller('zze.commons.LoadingCtrl', LoadingCtrl);
         *
         *                LoadingCtrl.$inject = ['$injector'];
         *
         *                function LoadingCtrl ($injector) {
         *                    var viewModel = this,
         *
         *                        $timeout = $injector.get('$timeout'),
         *                        PromiseTracker = $injector.get('promiseTracker'),
         *
         *                        publicMethods = {
         *                            loading: loading
         *                        };
         *
         *                    _.extend(viewModel, publicMethods);
         *
         *                    _init();
         *
         *                    function _init () {
         *                         viewModel.tracker = {
         *                             loading: PromiseTracker()
         *                         };
         *                    };
         *
         *                    function loading () {
         *                        var promise = $timeout(function () {
         *                            console.log('Finalized!');
         *                        }, 7000);
         *
         *                        viewModel.tracker.loading.addPromise(promise);
         *                    }
         *                }
         *            })();
         *         </file>
         *     </example>
         */
        function link (scope, element, attrs) {
            var $compile = $injector.get('$compile'),
                $parse = $injector.get('$parse'),
                $templateCache = $injector.get('$templateCache'),
                LOADING_TEMPLATE = $injector.get('zze.commons.LOADING_TEMPLATES'),

                trackerName = attrs.zzeLoading,
                loadingType = attrs.zzeLoadingType || 'pageMedium',
                templateName = attrs.zzeLoadingTemplate,

                HTML_SPACE = $('<span>&nbsp;</span>'),
                loadingElement,
                originalIcon;

            if (angular.isUndefined(trackerName) || !angular.isString(trackerName) || trackerName === '') {
                throw new Error('Deve ser informado um Tracker para a diretiva loading!');
            }

            if (!templateName) {
                templateName = LOADING_TEMPLATE[loadingType];
            } else {
                var templateEvaluated = $parse(templateName)(scope);

                if (templateEvaluated) {
                    templateName = templateEvaluated;
                }
            }

            if (element[0].tagName === 'BUTTON') {
                var firstChild = element.children().eq(0);

                if (firstChild[0].tagName === 'I') {
                    originalIcon = firstChild;
                }
            }

            var template = $templateCache.get(templateName),
                tracker = $parse(trackerName)(scope),

                bindingConfigForValidTacker = function (tracker) {

                    /* jshint unused:false */
                    var unWatch = scope.$watch(tracker.active, function (active) {

                        if (active === true) {
                            _startLoading();

                        } else {
                            _stopLoading();

                        }
                    });
                };

            loadingElement = $compile(template)(scope);

            if (tracker) {
                bindingConfigForValidTacker(tracker);

            } else {

                scope.$watch(attrs.loading, function (newTracker) {

                    if (newTracker) {
                        bindingConfigForValidTacker(newTracker);
                    }

                });
            }

            function _removeLoadingIcon () {
                loadingElement.remove();

                if (element[0].tagName === 'BUTTON') {
                    HTML_SPACE.remove();

                    var disabled = scope.$eval(attrs.ngDisabled);

                    if (!disabled) {
                        element.removeAttr('disabled');
                    }
                }
            }

            function _startLoading () {
                if (element.data('loading')) {
                    return;
                }

                element
                    .data('loading', true)
                    .prepend(loadingElement);

                if (element[0].tagName === 'BUTTON') {
                    element.attr('disabled', 'disabled');

                    if (originalIcon && originalIcon.length > 0) {
                        originalIcon.hide();
                    } else {
                        loadingElement.after(HTML_SPACE);
                    }
                } else {
                    loadingElement.addClass('hide-next-elements');
                }
            }

            function _stopLoading () {
                if (!element.data('loading')) {
                    return;
                }

                element.removeData('loading');

                if (element[0].tagName === 'BUTTON') {
                    if (originalIcon && originalIcon.length > 0) {
                        originalIcon.show();
                    }
                }

                _removeLoadingIcon();
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzePagination', zzePagination);

    function zzePagination () {

        var directive = {
            restrict: 'E',
            controller: 'zze.commons.PaginationCtrl',
            controllerAs: 'pagination',
            bindToController: true,
            link: link,
            template: '<div ng-if="pagination.hasMoreItems" class="zze-load-pagination">' +
                          '<div class="application-loader load-blue small" data-loader="true">' +
                              '<svg class="circular" viewBox="25 25 50 50">' +
                                  '<circle class="load" cx="50" cy="50" r="20" fill="none" stroke-width="3" stroke-miterlimit="10" />' +
                              '</svg>' +
                           '</div>' +
                           'carregando mais itens...' +
                        '</div>'
        };

        return directive;

        function link (scope, element, attrs) {
            scope.pagination.setOptions({
                zzeController: attrs.zzeController,
                zzeMethodTop: attrs.zzeMethodTop,
                zzeMethodBottom: attrs.zzeMethodBottom
            });

            $(window)
                .off('scroll.pagination')
                .on('scroll.pagination', function () {
                    scope.pagination.checkScrollPosition();
                });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.utils')
        .directive('zzeEmptyState', zzeEmptyState);

    /**
     * @ngdoc directive
     * @name zze.utils.directive:zzeEmptyState
     * @restrict E
     *
     * @description: Use this for empty message.
     *
     * @example:
     *      <example module="zze.utils">
     *          <file name="index.html">
     *              <zze-empty-state zze-text="'Nenhum contato adicionado'" zze-icon="'icon-exclamation-1'"></zze-empty-state>
     *          </file>
     *      </example>
     */
    function zzeEmptyState () {
        return {
            scope: {
                zzeText: '=zzeText',
                zzeIcon: '=zzeIcon'
            },
            restrict: 'E',
            template: '<div class="zze-empty-state">' +
                        '<i ng-class="zzeIcon ? zzeIcon : \'icon-exclamation-1\' "></i>' +
                        '<h3>{{ zzeText || "Nenhum item adicionado" }}</h3>' +
                    '</div>'
        };
    }

})();
// (function () {

//     'use strict';

//     angular.module('zze.utils')
//         .directive('includeReplace', includeReplace);

//     *
//      * @ngdoc directive
//      * @name zze.utils.directive:includeReplace
//      * @restrict A
//      *
//      * @description: Use this directive to remove the extra DOM tag from ngInclude
//      *
//      * @example:
//      *      <ng-include include-replace src="'templates/modules/settings/billings/templates/_lifetime.template.html' | assetPath"></ng-include>
     

//     includeReplace.$inject = ['$injector'];

//     function includeReplace ($injector) {

//         var $templateCache = $injector.get('$templateCache');

//         return {                        
//             restrict: 'A',            
//             compile:function(tElement, tAttrs, transclude) {
//                 var html = $templateCache.get(tAttrs.src);
//                 tElement.html(html);
//             }            
//         };
//     }

// })();

/**
 * Created by selinger on 18/09/17.
 */
(function () {

    'use strict';

    angular.module('zze.utils')
        .directive('zzeMessageToPage', zzeMessageToPage);

    /**
     * @ngdoc directive
     * @name zze.utils.directive:zzeMessageToPage
     * @restrict E
     *
     * @param {string} zzeText Text to be written in the message.
     * @param {string} zzeIcon Icon that will be added with the message.
     * @param {string} zzeClass Auxiliary Class for Message Context. For messages with error style,
     *                 use the class _**zze-message-error**_.
     *
     * @description: Use this for empty message.
     */
    function zzeMessageToPage () {
        return {
            scope: {
                zzeText: '=',
                zzeIcon: '=',
                zzeClass: '='
            },
            transclude: true,
            restrict: 'E',
            template: '<div ng-class="zzeClass ? zzeClass : \'\' " class="zze-empty-state">' +
                          '<i ng-class="zzeIcon ? zzeIcon : \'icon-exclamation-1\' "></i>' +
                          '<h3>{{ zzeText || "Nenhum item adicionado" }}</h3>' +
                          '<ng-transclude></ng-transclude>' +
                      '</div>'
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeBarFilters', zzeBarFilters);

    zzeBarFilters.$inject = ['$injector'];

    function zzeBarFilters ($injector) {
        var $filter = $injector.get('$filter');

        var directive = {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/commons/bar-filters/templates/commons-bar-filters.template.html'),
            transclude: true,
            controller: BarFiltersCtrl,
            controllerAs: 'barFilters',
            bindToController: true,
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            var attrSettings = scope.$eval(attrs.zzeBarConfig);
            var settings = _.extend({
                searchOpen: false,
                filterOpen: false,
                filterControl: true,
                showSearch: true
            }, attrSettings);

            scope.barFilters.setConfigBarFilters(settings);
        }
    }

    BarFiltersCtrl.$inject = ['$injector', '$scope'];

    function BarFiltersCtrl ($injector, $scope) {
        var viewModel = this,
            promiseSearch,
            settings,

            FocusFactory = $injector.get('zze.utils.focusFactory'),
            $timeout = $injector.get('$timeout'),

            publicMethods = {
                toggleFilter: toggleFilter,
                toggleSearch: toggleSearch,

                getDataSearch: getDataSearch,

                setConfigBarFilters: setConfigBarFilters
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.data = {};

            viewModel.status = {};
        }

        function toggleFilter (status) {
            viewModel.status.filterOpen = status ? status : angular.copy(!viewModel.status.filterOpen);

            if (!viewModel.status.filterOpen) {
                $scope[settings.ctrl][settings.clearDataFilter]();
            }
        }

        function toggleSearch () {

            var status = angular.copy(!viewModel.status.searchOpen);

            if (viewModel.data && viewModel.data.search) {
                viewModel.data.search = undefined;
                sessionStorage.removeItem(settings.ctrl + 'Search');
                $scope[settings.ctrl][settings.getDataSearch]();
            }

            viewModel.status.searchOpen = status;

            if (viewModel.status.searchOpen) {
                FocusFactory.setFocus('#search');
            }
        }

        function getDataSearch () {
            $timeout.cancel(promiseSearch);

            promiseSearch = $timeout(function () {
                if (viewModel.data.search) {
                    sessionStorage.setItem(settings.ctrl + 'Search', viewModel.data.search);
                } else {
                    sessionStorage.removeItem(settings.ctrl + 'Search');
                }

                $scope[settings.ctrl][settings.getDataSearch]();
            }, 700);

            $scope[settings.ctrl].tracker[settings.trackerName].addPromise(promiseSearch);
        }

        function setConfigBarFilters (_settings) {
            settings = _settings;
            viewModel.status = settings;

            var _storage = sessionStorage.getItem(settings.ctrl + 'Search');

            if (_storage) {
                viewModel.status.searchOpen = true;
                viewModel.data.search = _storage;
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .directive('zzeBarFooter', zzeBarFooter);

    zzeBarFooter.$inject = ['$injector'];

    function zzeBarFooter ($injector) {
        var $filter = $injector.get('$filter');

        var directive = {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/commons/bar-footer/templates/commons-bar-footer.template.html'),
            transclude: true,
            controller: BarFooterCtrl,
            controllerAs: 'barFooter',
            bindToController: true,
            link: link
        };

        return directive;

        function link (scope, element) {
            var bar = element.find('.zze-component_bar-details-footer:first');

            scope.barFooterControl = {
                animateBar: animateBar
            };

            // FIXME: Ubinding keydown and keypress after exiting angular context to avoid scope errors.

            // var bindFunction = function (event) {
            //     if (event.which === 27) {
            //         scope.$apply(function () {
            //             scope.barFooter.toogleControlBar(false);
            //         });
            //     }
            // };

            // $(window).on("keydown.zze.barFooter", bindFunction);
            // $(window).on("keypress.zze.barFooter", bindFunction);

            function animateBar (isOpen) {
                var barHeight = bar.height();

                if (isOpen) {
                    bar.css({
                        'bottom': '0'
                    });
                } else {
                    bar.css({
                        'bottom': '-' + (barHeight + 100) + 'px'
                    });
                }
            }
        }
    }

    BarFooterCtrl.$inject = ['$injector', '$scope'];

    function BarFooterCtrl ($injector, $scope) {
        var viewModel = this,
            publicMethods = {
                toogleControlBar: toogleControlBar
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
            viewModel.isOpen = false;
        }

        function toogleControlBar (status) {
            viewModel.isOpen = status;
            $scope.barFooterControl.animateBar(status);
            if (viewModel.isOpen) {
                $('body').css('overflow', 'hidden');
                $(document).trigger("zzeBarFooter:open");
            } else {
                $('body').css('overflow', 'auto');
                $(document).trigger("zzeBarFooter:close");
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.highcharts')
        .directive('zzeHighchartsBalance', zzeHighchartsBalance);

    function zzeHighchartsBalance () {
        var directive = {
                scope: {
                    zzeHighchartId: '=',
                    zzeHighchartConfig: '='
                },
                restrict: 'E',
                template: '<div zze-loading="highchartBalance.tracker.chart{{highchartBalance.zzeHighchartId}}"' +
                               'class="zze-chart {{highchartBalance.class}}"' +
                               'zze-loading-type="pageSmall"' +
                               'id="chart-{{highchartBalance.zzeHighchartId}}">' +
                          '</div>',

                controller: 'zze.commons.HighchartBalanceCtrl',
                controllerAs: 'highchartBalance',
                bindToController: true,

                link: link
            };

        return directive;

        function link (scope) {
            // Required to give time to create a chart marking before running controler.
            setTimeout(function () {
                scope.highchartBalance.setConfigGraphic();
            } , 100);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.highcharts')
        .directive('zzeHighchartsColumn', zzeHighchartsBalance);

    function zzeHighchartsBalance () {
        var directive = {
                scope: {
                    zzeHighchartId: '=',
                    zzeHighchartConfig: '='
                },
                restrict: 'E',
                template: '<div zze-loading="highchartColumn.tracker.chart{{highchartColumn.zzeHighchartId}}"' +
                               'class="zze-chart {{highchartColumn.class}}"' +
                               'id="chart-{{highchartColumn.zzeHighchartId}}">{{highchartColumn.zzeHighchartId}}' +
                          '</div>',

                controller: 'zze.commons.HighchartColumnCtrl',
                controllerAs: 'highchartColumn',
                bindToController: true,

                link: link
            };

        return directive;

        function link (scope) {
            // Required to give time to create a chart marking before running controler.
            setTimeout(function () {
                scope.highchartColumn.setConfigGraphic();
            } , 100);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.highcharts')
        .directive('zzeHighchartsPie', zzeHighchartsPie);

    zzeHighchartsPie.$inject = ['$injector'];

    function zzeHighchartsPie($injector) {
        var $filter = $injector.get('$filter'),
            CurrencyFactory = $injector.get('zze.commons.currencyFactory'),

            directive = {
                restrict: 'E',
                templateUrl: $filter('assetPath')('templates/commons/highcharts/templates/highcharts-pie.template.html'),
                link: link,
                controller: 'zze.commons.HighchartPieCtrl',
                controllerAs: 'highchart',
                bindToController: true
            };

        return directive;

        function link(scope, element, attrs) {
            var graphic = {
                config: scope.$eval(attrs.zzeConfig),
                data: scope.$eval(attrs.zzeData)
            };

            scope.highchart.setConfigGraphic(graphic.config);

            window.Charts = window.Charts || (window.Charts = {});

            var chart = _.extend({
                chart: {
                    renderTo: 'highchart-' + graphic.config.id,
                    type: 'pie',
                    backgroundColor: "#FEFDF9",
                    width: 178,
                    height: 178,
                    marginTop: 0,
                    marginRight: 0,
                    marginBottom: 0,
                    marginLeft: 0,
                    alignTicks: false
                },
                plotOptions: {
                    pie: {
                        cursor: 'pointer',
                        innerSize: '0%',
                        borderWidth: 0,
                        allowPointSelect: true,
                        dataLabels: {
                            enabled: false,
                            zIndex: 1
                        }
                    }
                },
                title: {
                    text: null
                },
                credits: false,
                exporting: {
                    enabled: false
                },
                series: [{
                    data: scope.highchart.createStructureData(graphic.data)
                }],
                tooltip: {
                    shared: false,
                    useHTML: true,
                    borderWidth: 0,
                    borderRadius: 0,
                    backgroundColor: 'transparent',
                    valuePrefix: 'R$ ',
                    valueDecimals: 2,
                    shadow: false,
                    zIndex: 99999999,
                    formatter: function () {
                        //var percentage = (this.point.y / graphic.config.total) * 100;

                        return '<div class="zze-highcharts-tooltip">' +
                            '<div class="zze-tooltip-content">' +
                            '<small>' + this.point.name + '</small>' +
                            '<strong>' + CurrencyFactory.getCurrencyMasked(this.point.y, graphic.config.currency, true, 2) + '</strong>' +
                            '</div>' +
                            '</div>';
                    }
                }
            }, graphic.config);

            setTimeout(function () {
                Charts.expenses = new Highcharts.Chart(chart);
            }, 100);
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @name zze.commons.directive:zzePeriods
     * @restrict E
     *
     * @description Adds the page to a date browser and provides a callback with the dates navigated or customized by
     *              the user.
     *
     * @param {object} zzePeriodsConfig Settings required for date navigation.
     *
     * **Atributos obrigatórios**
     *   - <b>ctrl</b>: Main Controller for your page.
     *   - <b>methodUpdateCollections</b>: Method that will be executed every time the date is changed. It will be sent as parameter _dateStart_ and _dateEnd_.
     *   - <b>dateTodayServer</b>: To avoid conflicts with wrong dates on the user device, we use the date set by the server. You can pick up via the main controller of the application _ ($scope.main.contextSource.today) _.
     *   - <b>startDate</b>: Start date for starting navigation control.
     *   - <b>endDate</b>: End date for starting navigation control.
     *
     * **Atributos opcionais**
     *   - <b>showSetToday</b>: Show option to set day. Default _true_.
     *   - <b>showSetWeek</b>: Show option to set week. Default _true_.
     *   - <b>showSetMonth</b>: Show option to set month. Default _true_.
     *   - <b>showSetCustom</b>: Show option to set custom dates. Default _true_.
     *
     * @example:
     *      <example module="zze.commons">
     *          <file name="index.html">
     *              <div ng-controller="zze.commons.myCtrl as myCtrl" class="row">
     *                  <div class="span12">
     *                      <zze-periods zze-periods-config="myCtrl.getPeriodsConfig()"></zze-periods>
     *                  </div>
     *              </div>
     *          </file>
     *
     *          <file name="controller.js">
     *              (function () {
     *
     *                  'use strict';
     *
     *                  angular.module('zze.commons')
     *                      .controller('zze.commons.myCtrl', myCtrl);
     *
     *                  function myCtrl () {
     *                      var viewModel = this,
     *
     *                          publicMethods = {
     *                              getPeriodsConfig: getPeriodsConfig
     *                          };
     *
     *                      _.extend(viewModel, publicMethods);
     *
     *                      function getPeriodsConfig () {
     *                          return {
     *                              ctrl: 'myCtrl',
     *                              methodUpdateCollections: 'updateMyCollection',
     *                              // Tem disponível em: $scope.main.contextSource.today
     *                              dateTodayServer: '2017-01-16'
     *                          };
     *                      }
     *
     *                      function updateMyCollection () {
     *                          // Method passed to nav periods to update collection.
     *                      }
     *                  }
     *              })();
     *          </file>
     *      </example>
     */
    angular.module('zze.commons')
        .directive('zzePeriods', zzePeriods);

    zzePeriods.$inject = ['$injector'];

    function zzePeriods ($injector) {
        var $filter = $injector.get('$filter');

        return {
            scope: {
                zzePeriodsConfig: '='
            },
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/commons/periods/templates/commons-periods.template.html'),
            link: link,
            controller: 'zze.commons.PeriodsCtrl',
            controllerAs: 'periods',
            bindToController: true
        };
    }

    function link (scope) {
        var opts = scope.periods.zzePeriodsConfig;

        if (!opts.ctrl) {
            throw Error('I need the controller name in the zze-periods directive settings. Read the directive documentation.');
        }

        if (!opts.dateTodayServer) {
            throw Error('Pass the dateTodayServer attribute in the zze-periods directive settings containing the date set by the server, available in $scope.main.contextSource.today.');
        }

        if (!opts.methodUpdateCollections) {
            throw Error('Pass the methodUpdateCollections attribute in the zze-periods directive settings containing method in controller.');
        }

        if (!opts.startDate) {
            throw Error('Pass the startDate attribute in the zze-periods directive settings containing method in controller.');
        }

        if (!opts.endDate) {
            throw Error('Pass the endDate attribute in the zze-periods directive settings containing method in controller.');
        }

        var periodsConfig = _.extend({
            showSetToday: true,
            showSetWeek: true,
            showSetMonth: true,
            showSetCustom: true,
            showSetYear: false,
            blockFutureMonths: false
        }, opts);

        scope.periods.setConfig(periodsConfig);
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc directive
     * @name zze.commons.directive:zzePopover
     *
     * @restrict A
     *
     * @param {object} zzePopover Object with popover settings. See below the available attributes:
     *
     *  - <b>template</b>: {string} All content in the popover must be in a separate template. Do not worry, it will be built
     *    within the scope of the current page.
     *
     *  - <b>position</b>: {string} Position in which the popover will be positioned relative to the element that drives it.
     *    There are options: _top, right, bottom_ and _left_, if a position is not informed, it will be assumed _bottom_
     *    by default.
     *
     *  - <b>width</b>: {number} Width of popover. If you are not informed, it will default to 190px.
     *
     *  - <b>maxHeight</b>: {number} Max popover height. If the content exceeds this size, a scroll bar will be added. it will
     *    default to 450px.
     *
     *  - <b>toggle</b>: {string} Which event will be used to open the popover. _click_ and _hover_ are available. If it is not
     *    informed, it will default _hover_.
     *
     *  - <b>theme</b>: {string} Lets you choose a popover theme. _gray_ and _white_ are available, _gray_ being the default.
     *
     *  - <b>reCalcTop</b>: {number} Recalculates the popover's top position by discounting or adding the passed value.
     *
     *  - <b>reCalcLeft</b>: {number} Recalculates the left position of the popover by discounting or adding the passed value.
     *
     *  - <b>overflowX</b>: {string} Changes overflow x of popover content. The default value is hidden.
     *
     *  - <b>overflowY</b>: {string} Changes overflow y of popover content. The default value is hidden.
     *
     *  @param {boolean} zzePopoverRender Informs whether the popover should be displayed when interacting with the trigger.
     *
     *  @property {function} scope.$popoverInstance.show() Method available to execute popover opening through Ctrl.
     *  @property {function} scope.$popoverInstance.hide() Method available to execute popover closing through Ctrl.
     *            Pass _true_ to force the popover to close when it has the block close.
     *  @property {function} scope.$popoverInstance.focus() Method available to execute the focus of the first element
     *            within the popover through Ctrl..
     *  @property {function} scope.$popoverInstance.isOpen() Method available to check if there is a popover opened
     *            through Ctrl..
     *  @property {function} scope.$popoverInstance.updatePosition() Method available to reposition a popover after this
     *            is the view through Ctrl..
     *
     *  @example:
     *      <example module="zze.commons">
     *          <file name="index.html">
     *              <div ng-controller="zze.commons.myCtrl as myCtrl" class="row">
     *                  <div class="span12">
     *                      <zze-periods zze-popover="myCtrl.getPopoverConfig()"></zze-periods>
     *                  </div>
     *              </div>
     *          </file>
     *
     *          <file name="controller.js">
     *              (function () {
     *
     *                  'use strict';
     *
     *                  angular.module('zze.commons')
     *                      .controller('zze.commons.myCtrl', myCtrl);
     *
     *                  myCtrl.$inject= ['$injector', '$scope'];
     *
     *                  function myCtrl ($injector, $scope) {
     *                      var viewModel = this,
     *
     *                          $filter = $injector.get('$filter'),
     *
     *                          publicMethods = {
     *                              getPopoverConfig: getPopoverConfig
     *                          };
     *
     *                      _.extend(viewModel, publicMethods);
     *
     *                      init();
     *
     *                      function init () {
     *                          if ($scope.$popoverInstance.isOpen()) {
     *                              // Popover it is visible
     *                          }
     *                      }
     *
     *                      function getPopoverConfig () {
     *                          return {
     *                              width: 250,
     *                              maxHeight: 150,
     *                              theme: 'white',
     *                              toogle: 'click',
     *                              position: 'top',
     *                              template: $filter('assetPath')('templates/modules/nameTheModule/templates/nameTheModule-popover.template.html')
     *                          };
     *                      }
     *                  }
     *              })();
     *          </file>
     *      </example>
     */
    angular.module('zze.commons')
        .directive('zzePopover', zzePopover);

    zzePopover.$inject = ['$injector'];

    function zzePopover ($injector) {

        var $http = $injector.get('$http'),
            $compile = $injector.get('$compile'),
            $templateCache = $injector.get('$templateCache'),

            directive = {
                restrict: 'A',
                link: link
            };

        return directive;

        function link (scope, element, attrs) {

            if (attrs.zzePopoverRender === 'false') {
                return;
            }

            var settings = _.extend({
                    width: 190,
                    maxHeight: 450,
                    position: 'bottom',
                    theme: 'white',
                    reCalcTop: 0,
                    reCalcLeft: 0,
                    toggle: 'hover',
                    overflowX: 'hidden',
                    overflowY: 'hidden',
                    destroy: false,
                    createToBody: false
                }, scope.$eval(attrs.zzePopover)),

                popoverTemplate,
                popoverContent,
                popoverTemplateCompiled;

            $http.get(settings.template, {
                cache: $templateCache
            })
            .success(_compileTemplate)
            .error(function () {
                throw new Error('Não foi possível carregar o template da popover:\n' + settings.template);
            });

            function _compileTemplate (popoverTemplateUrl) {

                // Handle response from $http promise.
                if (angular.isObject(popoverTemplateUrl)) {
                    popoverTemplateUrl = popoverTemplateUrl.data;
                }

                popoverTemplate = $('<div class="' + _getPopoverClass() + '" style="' + _getPopoverStyle() + '">' +
                    '<div class="zze-popover-padding">' +
                    '<div class="arrow"></div>' +
                    '<div class="popover-content" style="' + _getPopoverContentStyle() + '"></div>' +
                    '</div>' +
                    '</div>');

                popoverContent = popoverTemplate.find('.popover-content');
                popoverTemplateCompiled = $compile(popoverTemplateUrl)(scope);

                popoverContent.append(popoverTemplateCompiled);

                element.on(settings.toggle === 'hover' ? 'mouseenter' : 'click', function () {

                    if (element.data('created')) {
                        return;
                    }

                    var elemCreate = settings.createToBody ? element.parents('body:first') : element;

                    element
                        .data('created', true);

                    elemCreate
                        .append(popoverTemplate);

                    var popoverInstance = new Popover(element, popoverTemplate, settings);

                    scope.$popoverInstance = {

                        focus: function () {
                            popoverInstance.focus();
                        },
                        show: function () {
                            popoverInstance.open();
                        },
                        hide: function (forceClose) {
                            popoverInstance.close(forceClose);
                        },
                        isOpen: function() {
                            return popoverInstance.isOpen();
                        },
                        updatePosition: function () {
                            popoverInstance.updatePosition();
                        }
                    };

                    if (settings.toggle === 'hover') {
                        setTimeout(function () {
                            element.trigger('mouseenter');
                        }, 100);
                    } else {
                        element.trigger('click');
                    }
                });
            }

            function _getPopoverClass () {
                var _class = 'zze-component_popover';

                _class += ' ' + settings.position;
                _class += ' ' + settings.theme;

                return _class;
            }

            function _getPopoverStyle () {
                return 'width:' + settings.width + 'px';
            }

            function _getPopoverContentStyle () {
                var style = '';

                style += 'max-height:' + settings.maxHeight + 'px;';
                style += 'overflow-x:' + settings.overflowX + ';';
                style += 'overflow-y:' + settings.overflowY + ';';

                return style;
            }
        }
    }

}());

(function () {

    'use strict';

    angular.module('zze.budgets')
        .directive('zzeGeneralLabels', zzeGeneralLabels);

    zzeGeneralLabels.$inject = ['$injector'];

    function zzeGeneralLabels ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/budgets/templates/budgets-general-labels.template.html')
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.budgets')
        .directive('zzeBudgetsItem', zzeBudgetsItem);

    zzeBudgetsItem.$inject = ['$injector'];

    function zzeBudgetsItem ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/budgets/templates/budgets-item.template.html'),
            link: link,
            controller: 'zze.budgets.BudgetsItemCtrl',
            controllerAs: 'budgetsItem',
            bindToController: true
        };
    }

    function link ($scope, $element, $attrs) {
        $scope.budgetsItem.setBudgets($scope.$eval($attrs.zzeData), $scope.$eval($attrs.zzeDataFather));
    }

})();

(function () {

    'use strict';

    angular.module('zze.budgets')
        .directive('zzeBudgetsMarkToday', zzeBudgetsItem);

    zzeBudgetsItem.$inject = ['$injector'];

    function zzeBudgetsItem ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/budgets/templates/budgets-mark-today.template.html')
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeSortableConfig', zzeSortableConfig);

    zzeSortableConfig.$inject = ['$injector'];

    function zzeSortableConfig () {

        return {
            scope: {},
            restrict: 'E',
            template: '<a ng-click="zzeSortableConfig()" class="config" id="tag-config" href="">' +
                           '<i class="icon-cog"></i>' +
                      '</a>'
        };
    }
})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeSortableToogle', zzeSortableToogle);

    zzeSortableToogle.$inject = ['$injector'];

    function zzeSortableToogle($injector) {

        var ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            directive = {
                scope: {},
                restrict: 'E',
                template: '<a ng-click="zzeSortableToogle($event)" class="zze-sortable-close" href="">' +
                    '<i class="icon-caret-down" id="tag-toogle"></i>' +
                    '</a>',
                link: link
            };

        return directive;

        function link(scope, element) {
            var $elemGroup = element.parents('.zze-sortable-item:first'),
                $contentGroup = $elemGroup.find('.zze-sortable-content:first'),
                $icon = element.find('i'),
                classToogle = 'zze-sortable-closed';

            scope.zzeSortableToogle = function (e) {
                let sortableHeaderHeight = $(e.currentTarget).parents('.zze-sortable-header:first').data('minimized-height') || 65;

                console.warn($(e.currentTarget));
                if ($elemGroup.hasClass(classToogle)) {
                    $elemGroup
                        .animate({
                            height: ($contentGroup.innerHeight() + sortableHeaderHeight) + 'px'
                        }, 100, function () {
                            $elemGroup.removeClass(classToogle);
                            updateWidget($elemGroup[0].id, false);
                        });

                    $icon
                        .removeClass('icon-caret-up')
                        .addClass('icon-caret-down');

                    $elemGroup.find('#tag-config').show();
                } else {
                    $elemGroup
                        .animate({
                            height: sortableHeaderHeight+'px'
                        }, 100, function () {
                            $elemGroup.addClass(classToogle);
                            updateWidget($elemGroup[0].id, true);
                        });

                    $icon
                        .removeClass('icon-caret-down')
                        .addClass('icon-caret-up');

                    $elemGroup.find('#tag-config').hide("slow");
                }
            };
        }

        function updateWidget(id, minimized) {

            var url = ContextFactory.getEndPointProccess({
                method: 'update',
                enums: 'widgets',
                replace: '',
                value: ''
            });

            var promise = CrudFactory.put(url, { widget: { id: id, minimized: minimized } });

            promise.then(function () {
                // Do something if necessary
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeSortable', zzeSortableItem);

    zzeSortableItem.$inject = ['$injector'];

    function zzeSortableItem($injector) {

        var ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),

            directive = {
                restrict: 'E',
                link: link
            };

        return directive;

        function link(scope, element, attrs) {
            var idToUpdate = null,

                settings = _.extend({
                    zzeCols: '#col-sortable-1, #col-sortable-2',
                    zzeClassStart: 'zze-sortable-start',

                    handle: '.zze-sortable-header',
                    connectWith: '.zze-sortable-col',
                    placeholder: 'zze-sortable-placeholder',
                    opacity: 0.7,
                    revert: 100,
                    update: function () {
                        // update sendo feito no .on(sortstop)
                    }
                }, scope.$eval(attrs.zzeConfig));


            $(settings.zzeCols)
                .sortable(settings)
                .on("sortstart", function (event, ui) {
                    ui.item.addClass(settings.zzeClassStart);
                    idToUpdate = ui.item.context.id;
                })
                .on("sortstop", function (event, ui) {
                    ui.item.removeClass(settings.zzeClassStart);
                    updateWidget(idToUpdate);
                });
        }

        function updateWidget(id) {
            var newPosition = getNewPosition(id);

            var url = ContextFactory.getEndPointProccess({
                method: 'update',
                enums: 'widgets',
                replace: '',
                value: ''
            });

            var promise = CrudFactory.put(url, { widget: newPosition });

            promise.then(function () {
                // Do something if necessary
            });
        }

        function getNewPosition(id) {
            var availableIds = [
                "widget-accounts_overview",
                "widget-credit_cards_overview",
                "widget-blog_feeds",
                "widget-bills_to_pay",
                "widget-bills_to_receive",
                "widget-top_expenses",
                "widget-budgets"
            ],
                everyChild1 = document.querySelectorAll("#col-sortable-1 div"),
                everyChild2 = document.querySelectorAll("#col-sortable-2 div"),
                grid1 = [],
                grid2 = [];

            for (var i = 0; i < everyChild1.length; i++) {
                if (availableIds.includes(everyChild1[i].id)) {
                    grid1.push(everyChild1[i].id);
                }
            }
            for (var i2 = 0; i2 < everyChild2.length; i2++) {
                if (availableIds.includes(everyChild2[i2].id)) {
                    grid2.push(everyChild2[i2].id);
                }
            }

            if (grid1.includes(id)) {
                return { id: id, position: grid1.indexOf(id) + 1, grid: 1 };
            } else {
                return { id: id, position: grid2.indexOf(id) + 1, grid: 2 };
            }
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.finhub')
        .directive('zzeColorPicker', zzeColorPicker);

    function zzeColorPicker () {
        return {
                restrict: 'E',
                replace: true,
                controller: 'zze.finhub.ColorPickerCtrl',
                controllerAs: 'colorPicker',
                template: function () {
                    var html;
                    html =  '<div class="zze-component_color-picker">';
                    html += '<a href="" ng-repeat="color in colorPicker.colors" ng-class="colorPicker.setActivated(color)" ng-click="colorPicker.setColor(color)" ng-style="colorPicker.ngStyleForColor(color)"></a>';
                    html += '</div>';
                    return html;
                },
                link: function (scope, element, attrs) {
                    if (attrs.setColor) {
                        scope.colorPicker.selectedColor = attrs.setColor;
                        scope.colorPicker.activated = attrs.setColor;
                    }

                    if (attrs.customizedRangeColor) {
                        scope.colorPicker.colors = JSON.parse(attrs.customizedRangeColor).rangeColor;
                    }

                    if (attrs.wide) {
                        scope.colorPicker.wide = true;
                    }
                }
            };
    }

})();

(function () {

    'use strict';

    angular.module('zze.finhub')
        .directive('zzeLoadingFinhub', loadFinhub);

    function loadFinhub () {
        var directive = {
            restrict: 'E',
            template: '<div class="application-loader load-green small" data-loader="true">' +
                           '<svg class="circular" viewBox="25 25 50 50">' +
                               '<circle class="load" cx="50" cy="50" r="20" fill="none" stroke-width="8" stroke-miterlimit="10" />' +
                           '</svg>' +
                       '</div>'
        };

        return directive;
    }
})();

(function () {
    'use strict';
    angular.module('zze-messages')
        .directive('zzeMessages', zzeMessages);
    zzeMessages.$inject = ['$injector'];
    function zzeMessages($injector) {
        var $filter = $injector.get('$filter');
        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/messages/templates/messages.template.html'),
            controller: messagesCtrl,
            controllerAs: 'messages',
            bindToController: true,
            scope: {}
        };
    }
    messagesCtrl.$inject = ['$injector', '$scope', '$rootScope'];
    function messagesCtrl($injector, $scope, $rootScope) {
        /* jshint validthis:true */
        var viewModel = this,
            $timeout = $injector.get('$timeout'),
            ContextFactory = $injector.get('zze-messages.contextFactory'),
            CrudFactory = $injector.get('zze-messages.crudFactory'),
            Dialog = $injector.get('ngDialog'),
            PromiseTracker = $injector.get('promiseTracker'),
            publicMethods = {
                actionFor: actionFor,
                openRecentWindow: openRecentWindow,
                getFullHistoryUrl: getFullHistoryUrl

            };
        _.extend(viewModel, publicMethods);
        init();
        function init() {
            viewModel.tracker = {
                loadPage: PromiseTracker(),
                loading: PromiseTracker()
            };
            viewModel.data = {
                messages: []
            };
            $rootScope.unreadMessages = [];
            _getMessages();
            viewModel.recentWindowOpenned = false;
        }
        function actionFor(message) {
            /* jshint camelcase:false */
            var promise = _markAsRead(message);
            angular.element('div#loader' + message.id).removeClass('hide');
            viewModel.tracker.loading.addPromise(promise);
            promise.then(function (resp) {
                document.cookie = "reloadContextSource=1";
                var url;
                if (resp.data.kind === "custom") {
                    Dialog.open({
                        template: getTemplatePath('templates/modules/messages/templates/messages-details.dialog.html'),
                        controller: 'zze-messages.MessageDetailsCtrl',
                        controllerAs: 'details',
                        className: 'ngdialog theme-organizze zze-messages-dialog',
                        width: 560,
                        closeByDocument: false,
                        data: resp.data
                    });
                } else if (resp.data.kind === "transactions_alerts") {
                    Dialog.open({
                        template: getTemplatePath('templates/modules/messages/templates/messages-transactions-alerts.dialog.html'),
                        scope: $scope.$parent,
                        controller: 'zze-messages.MessageTransactionsAlertsCtrl',
                        controllerAs: 'transactionsAlerts',
                        className: 'ngdialog theme-organizze zze-messages-dialog transactions-alerts',
                        width: 550,
                        closeByDocument: false,
                        data: resp.data
                    });
                } else if (resp.data.kind === "calendar_event") {
                    var humanizedUrl;
                    url = ContextFactory.calendarEventsUrl();
                    if (resp.data.message_object) {
                        humanizedUrl = (ContextFactory.calendarEventsUrl(true, $scope.$parent) + "?month=" + resp.data.message_object.date);
                        Turbolinks.visit(humanizedUrl);
                        $(document).one("page:load", function () {
                            window.history.pushState("", "", ContextFactory.calendarEventsUrl(true, $scope.$parent));
                            var calendarEventLink = $('a').filter(function () { return $(this).attr("href") === (url + "/" + resp.data.message_object.id); });
                            calendarEventLink.click();
                        });
                    } else {
                        Dialog.open({
                            template: getTemplatePath('templates/modules/messages/templates/messages-object-destroyed.dialog.html'),
                            controller: 'zze-messages.MessageObjectDestroyedCtrl',
                            controllerAs: 'objectDestroyed',
                            className: 'ngdialog theme-organizze zze-messages-dialog error-message',
                            width: 500,
                            data: resp.data
                        });
                    }
                } else {
                    url = ContextFactory.getLegacyRoute(resp.data.kind);
                    Turbolinks.visit(url);
                }
            });
            $timeout(function () {
                $rootScope.unreadMessages.splice(message, 1);
            }, 1000);
        }

        function getTemplatePath(filename) {
            var zzeFrontManifest = window.APP_JS_ADAPTER_DATA.zzeFrontManifest,
                zzeFrontUrl = window.APP_JS_ADAPTER_DATA.zzeFrontUrl;

            return zzeFrontUrl + '/' + zzeFrontManifest[filename];
        }

        function openRecentWindow() {
            viewModel.recentWindowOpenned = !viewModel.recentWindowOpenned;
        }

        function _getMessages() {
            /* jshint camelcase:false */
            var url = ContextFactory.getMessagesUnreadUrl();
            CrudFactory.getAll(url).then(function (resp) {
                viewModel.data.messages = resp.data.messages;
                $rootScope.unreadMessages = viewModel.data.messages;
                _.filter(viewModel.data.messages, function (message) {
                    if (message.read_at === null && message.pro_active === true) {
                        actionFor(message);
                    }
                });
                var timerPromise = $timeout(function () {
                    if (typeof _getMessages === 'function') {
                        _getMessages();
                    }
                }, 300000);
                $(document).one('page:before-change', function () {
                    $timeout.cancel(timerPromise);
                });
                if (getParameterByName('open-message') === 'true') {
                    var messageId = parseInt(getParameterByName('message-id'));
                    var candidatesToOpen = $.grep(viewModel.data.messages, function (e) { return e.message_id === messageId; });
                    if (candidatesToOpen.length > 0) {
                        actionFor(candidatesToOpen[0]);
                    }
                }
            });
        }
        function _markAsRead(message) {
            /* jshint camelcase:false */
            message.read_at = new Date();
            var url = ContextFactory.getMessagesUpdateUrl(message);
            return CrudFactory.put(url, message);
        }
        function getFullHistoryUrl() {
            return ContextFactory.getMessagesFullHistoryUrl();
        }
        function getParameterByName(name, url) {
            if (!url) {
                url = window.location.href;
            }
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) { return null; }
            if (!results[2]) { return ''; }
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }
    }
})();

// TODO: Improve authorization denied
(function () {

    'use strict';

    angular.module('zze.permissions')
        .directive('zzeAccessDenied', zzeAccessDenied);

    zzeAccessDenied.$inject = ['$injector'];

    /**
     * @ngdoc directive
     * @module zze.permissions
     * @name  zze.permissions:zzeAccessDenied
     *
     * @restrict E
     *
     * @description If you need to display an access denied message in the view, use this directive .
     *
     * <pre>
     *     <zze-access-denied
     *         ng-if="!main.checkPermissionView('state', ['action'])">
     *     </zze-access-denied>
     * </pre>
     */
    function zzeAccessDenied ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/permissions/templates/access-denied.html')
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.popupEmailValidation')
        .directive('zzePopupEmailValidation', zzePopupEmailValidation);

    function zzePopupEmailValidation () {

        return {
            restrict: 'E',
            controller: 'zze.popupEmailValidation.popupEmailValidationCtrl',
            controllerAs: 'firstUse',
            bindToController: true,
            scope: {}
        };
    }


})();

(function () {

    'use strict';

    angular.module('zze.finhub')
        .directive('zzeInstitutionIcon', zzeInstitutionIcon);

    zzeInstitutionIcon.$inject = ['$injector', '$sce'];

    function zzeInstitutionIcon ($injector, $sce) {
        let FinhubInstitutions = $injector.get('zze.finhub.finhubInstitutions');

        const linkFunction = function(scope) {
            /* jshint camelcase:false */
            scope.institution = FinhubInstitutions.findInstitutionById(scope.ngModel.institution_id);

            if (scope.institution.generic) {
                scope.fgColor = FinhubInstitutions.getFgColorByColor(scope.ngModel.color);
                scope.innerIcon =  $sce.trustAsHtml(FinhubInstitutions.getSvgIconByID(scope.institution.id));
            } else {
                scope.innerIcon = $sce.trustAsHtml("<img src='"+scope.institution.logo_url+"' />");
            }
        };

        const templateHTML = function () {
            let html;

            html =  '<div class="zze-component_institution-icon fg-color-{{::fgColor}}" style="background-color: #{{::ngModel.color}}" ng-bind-html="::innerIcon" ng-class="{\'credit-card\': ngModel.isCreditCard}"">';
            html += '</div>';

            return html;
        };

        return {
                    restrict: 'E',
                    require: 'ngModel',
                    scope: {
                        ngModel: "="
                    },
                    replace: true,
                    template: templateHTML,
                    link: linkFunction
                };
    }

})();

(function () {

    'use strict';

    angular.module('zze.billings')
        .directive('zzeCurrentPlanLifetime', zzeCurrentPlan);

        zzeCurrentPlan.$inject = ['$injector'];

    function zzeCurrentPlan ($injector) {
        var $filter = $injector.get('$filter');

        return {
            templateUrl: $filter('assetPath')('templates/modules/settings/billings/templates/billings-lifetime.template.html'),
            controller: 'zze.billings.BillingsCtrl',
            controllerAs: 'billings'
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.billings')
        .directive('zzeCurrentPlanRenewal', zzeCurrentPlan);

        zzeCurrentPlan.$inject = ['$injector'];

    function zzeCurrentPlan ($injector) {
        var $filter = $injector.get('$filter');

        return {
            templateUrl: $filter('assetPath')('templates/modules/settings/billings/templates/billings-premium-renewal.template.html'),
            controller: 'zze.billings.BillingsCtrl',
            controllerAs: 'billings'
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.billings')
        .directive('zzeCurrentPlan', zzeCurrentPlan);

        zzeCurrentPlan.$inject = ['$injector'];

    function zzeCurrentPlan ($injector) {
        var $filter = $injector.get('$filter');

        return {
            templateUrl: $filter('assetPath')('templates/modules/settings/billings/templates/billings-premium-trial.template.html'),
            controller: 'zze.billings.BillingsCtrl',
            controllerAs: 'billings'
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.cancellations')
        .directive('zzeCancellationWarning', zzeCancellationWarning);

    zzeCancellationWarning.$inject = ['$injector'];
    function zzeCancellationWarning ($injector) {
        var $filter = $injector.get('$filter');
        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/settings/cancellations/templates/cancellation-warning.template.html'),
            controller: 'zze.cancellations.cancellationWarningCtrl',
            controllerAs: 'cancellationWarning',
            bindToController: true,
            scope: {}
        };
    }

    cancellationWarningCtrl.$inject = ['$injector', '$rootScope'];
    function cancellationWarningCtrl ($injector, $rootScope) {
        /* jshint validthis:true */
        var viewModel = this,
            $filter = $injector.get('$filter'),
            Dialog = $injector.get('ngDialog'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            publicMethods = {
                openCancellationDialog: openCancellationDialog,
                getPendingCancellation: getPendingCancellation
            };
        _.extend(viewModel, publicMethods);

        init();

        function init () {
            getPendingCancellation();
        }

        function getPendingCancellation () {
            var url = ContextFactory.getEndPoint('get_pending', 'cancellations');
            CrudFactory.getAll(url).then(function (resp) {
                $rootScope.pendingCancellation = resp.data.cancellation;
            });
        }

        function openCancellationDialog () {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/settings/cancellations/templates/cancellation-form.dialog.html'),
                controller: 'zze.cancellations.CancellationFormCtrl',
                controllerAs: 'cancellations',
                className: 'ngdialog theme-organizze cancellation-dialog',
                width: 500,
                data: {activeLevel: 3}
            });
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.entities')
        .directive('zzeEntitiesItemChooseProfile', zzeEntitiesItemChooseProfile);

    zzeEntitiesItemChooseProfile.$inject = ['$injector'];

    function zzeEntitiesItemChooseProfile ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/settings/entities/templates/entities-item-choose-profile-template.html'),
            controller: 'zze.entities.EntitiesItemChooseProfileCtrl',
            controllerAs: 'entitiesItemChooseProfile',
            bindToController: true,
            link: link
        };
    }

    function link ($scope, $element, $attrs) {
        $scope.entitiesItemChooseProfile.setEntities($scope.$eval($attrs.zzeData));
    }

})();

(function () {

    'use strict';

    angular.module('zze.entities')
        .directive('zzeEntitiesItem', zzeEntitiesItem);

    zzeEntitiesItem.$inject = ['$injector'];

    function zzeEntitiesItem ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/settings/entities/templates/entities-item-template.html')
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .directive('zzeCategoriesItem', zzeCategoriesItem);

    zzeCategoriesItem.$inject = ['$injector'];

    function zzeCategoriesItem ($injector) {

        var $filter = $injector.get('$filter');

        var directive = {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/settings/categories/templates/categories-item.template.html')
        };

        return directive;
    }

})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .directive('zzeCategoryIcon', zzeCategoryIcon);

    function zzeCategoryIcon() {
        var directive = {
            restrict: 'E',
            require: 'ngModel',
            scope: {
                ngModel: "=",
                showIcon: "@"
            },
            replace: true,
            template: function () {
                return '<i class="zze-icon-categories" ng-class="iconClasName()" ng-style="ngStyle()"></i>';
            },
            link: link
        };

        return directive;

        function link(scope) {
            scope.iconClasName = function () {
                if (!scope.ngModel.iconClasName) {
                    if (scope.ngModel.fixed) {
                        /* jshint camelcase:false */
                        scope.ngModel.iconClasName = 'icon-category-' + scope.ngModel.group_id.replace(/_/g, '-');
                    } else if (scope.showIcon && scope.ngModel.parent_uuid) {
                        scope.ngModel.iconClasName = 'icon-category-' + scope.ngModel.group_id.replace(/_/g, '-');
                    } else {
                        scope.ngModel.iconClasName = 'icon-' + scope.ngModel.group_id.replace(/exp_|ear_/g, '').replace(/_/g, '-') + ' new';
                    }
                }
                return scope.ngModel.iconClasName;
            };
            scope.ngStyle = function () {
                return {
                    backgroundColor: '#' + scope.ngModel.color
                };
            };
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .directive('zzeNewCategoryIcon', zzeNewCategoryIcon);

    function zzeNewCategoryIcon () {
        var directive = {
                restrict: 'E',
                require: 'ngModel',
                scope: {
                    ngModel: "="
                },
                replace: true,
                template: function () {
                    return '<i class="zze-icon-categories" ng-click="setIcon()" ng-class="iconClasName()" ng-style="ngStyle()"></i>';
                },
                link: link
            };

        return directive;

        function link (scope) {
            scope.iconClasName = function () {
                if (!scope.ngModel.iconClasName) {
                    /* jshint camelcase:false */
                    scope.ngModel.iconClasName = 'icon-'+scope.ngModel.name.replace(/_/g, '-');
                }

                scope.ngModel.iconClasName = 'icon-'+scope.ngModel.name.replace(/_/g, '-');

                if (scope.$parent.$parent.createCtrl.base.selectedIcon === scope.ngModel.name.replace(/_/g, '-')) {
                    scope.ngModel.iconClasName = 'icon-'+scope.ngModel.name.replace(/_/g, '-') + " selected";
                }

                return scope.ngModel.iconClasName;
            };
            scope.ngStyle = function () {
                return {
                    backgroundColor: '#ececec'
                };
            };
            scope.setIcon = function () {
                scope.$parent.$parent.createCtrl.base.selectedIcon = scope.ngModel.name.replace(/_/g, '-');
                scope.ngModel.selectedIcon = scope.ngModel.name;
            };
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.entityUsers')
        .directive('zzeHelpDrowpdown', zzeHelpDrowpdown);

    zzeHelpDrowpdown.$inject = ['$injector'];

    function zzeHelpDrowpdown ($injector) {
        var $filter = $injector.get('$filter');

        var directive = {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/settings/entity-users/templates/entity-users-dropdown-help.template.html'),
            transclude: true,
            scope: {},
            controller: UsersHelpDrowpdownCtrl,
            controllerAs: 'usersHelpDropdown',
            bindToController: true,
            link: link
        };

        return directive;

        function link (scope, element, attrs) {
            scope.usersHelpDropdown.zzeSetDropdownConfig(scope.$eval(attrs.zzeSetDropdownConfig));
        }
    }

    function UsersHelpDrowpdownCtrl () {
        var viewModel = this,
            settings,

            publicMethods = {
                zzeSetDropdownConfig: zzeSetDropdownConfig,
                getAttrs: getAttrs
            };

        _.extend(viewModel, publicMethods);

        init();

        function init () {
        }

        function getAttrs (key) {
            return settings[key];
        }

        function zzeSetDropdownConfig (_settings) {
            settings = _settings;
        }
    }
})();
(function () {

    'use strict';

    angular.module('zze.entityUsers')
        .directive('zzeEntityUser', zzeEntityUser);

    zzeEntityUser.$inject = ['$injector'];

    function zzeEntityUser ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/settings/entity-users/templates/user.template.html'),
            link: link,
            controller: 'zze.entityUsers.EntityUserCtrl',
            controllerAs: 'entityUser',
            bindToController: true
        };
    }

    function link ($scope, $element, $attrs) {
        $scope.entityUser.setUser($scope.$eval($attrs.zzeData));
    }

})();

(function () {

    'use strict';

    angular.module('zze.creditCard')
        .directive('creditCardInvoicesSelector', creditCardInvoicesSelector);

    creditCardInvoicesSelector.$inject = ['$injector'];

    function creditCardInvoicesSelector($injector) {
        var $filter = $injector.get('$filter'),

            directive = {
                restrict: 'EA',
                scope: {
                    zzeObject: '=',
                    zzeChange: '='
                },
                templateUrl: $filter('assetPath')('templates/modules/transactions/credit-card/templates/credit-card-invoices-selector.template.html'),
                link: link,
                controller: 'zze.creditCard.creditCardInvoicesSelector',
                controllerAs: 'invoices',
                bindToController: true
            };

        return directive;

        function link(scope) {

            scope.$watch('invoices.zzeObject', function (newValue, oudValue) {
                if (newValue && newValue !== oudValue) {
                    scope.invoices.getInvoice(newValue);
                } else {
                    scope.invoices.setShowInvoices(false);
                    scope.invoices.zzeChange(undefined);
                }
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.fileUpload')

        .directive('ngFileDragClass', ['$timeout', function ($timeout) {
            return function (scope, element, attrs) {
                var $element = $(element);
                var klass = attrs.ngFileDragClass;
                var promise = null;

                $element.on('dragover', function () {
                    $element.addClass(klass);
                    $timeout.cancel(promise);
                }).on('dragleave', function () {
                    promise = $timeout(function () {
                        $element.removeClass(klass);
                    }, 300);
                }).on('drop', function () {
                    $element.removeClass(klass);
                });

            };
        }]);

})();

(function () {

    'use strict';

    angular.module('zze.fileUpload')
        .directive('ngFileUploadLink', ['$timeout', function () {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var $input = $(attrs.ngFileUploadLink);
                    var $link = $(element);

                    $link.css({
                        position: 'relative',
                        zIndex: 1
                    });

                    $input.css({
                        position: 'absolute',
                        display: 'block',
                        top: 0,
                        left: 0,
                        opacity: 0.0,
                        cursor: 'pointer',
                        zIndex: 2,
                        padding: 0,
                        margin: 0,
                        overflow: 'hidden',
                        fontSize: '1px',
                        width: '100%',
                        height: '100%'
                    });
                }
            };
        }]);

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .directive('zzeTransactionBarOptionsControl', zzeTransactionBarOptionsControl);

    zzeTransactionBarOptionsControl.$inject = ['$injector'];

    function zzeTransactionBarOptionsControl ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: function () {
                var url = 'templates/modules/transactions/templates/transactions-bar-options.template.html';
                return $filter('assetPath')(url);
            }
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .directive('zzeTransactionItem', zzeTransactionItem);

    zzeTransactionItem.$inject = ['$injector'];

    function zzeTransactionItem ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: function () {
                var url = 'templates/modules/transactions/templates/transactions-item.template.html';
                return $filter('assetPath')(url);
            },
            link: link,
            controller: 'zze.transactions.TransactionsItemCtrl',
            controllerAs: 'transactionItem',
            bindToController: true
        };
    }

    function link ($scope, $element, $attrs) {
        $scope.transactionItem.getTransactionsList($attrs.zzeList);
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .directive('zzeTransactionShowIntro', zzeTransactionShowIntro);

    zzeTransactionShowIntro.$inject = ['$injector'];

    function zzeTransactionShowIntro ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/transactions/templates/transactions-show-intro.template.html')
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .directive('zzeTransactionsViewModeDialog', zzeTransactionsViewModeDialog);

    zzeTransactionsViewModeDialog.$inject = ['$injector'];

    function zzeTransactionsViewModeDialog ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/transactions/templates/transactions-view-mode.dialog.html')
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetAccounts', zzeWidgetAccounts);

    zzeWidgetAccounts.$inject = ['$injector'];

    function zzeWidgetAccounts ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/accounts/templates/widget-account.template.html'),
            controller: 'zze.dashboard.WidgetAccountsCtrl',
            controllerAs: 'accounts',
            bindToController: true
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetBalanceMonth', zzeWidgetBalanceMonth);

    zzeWidgetBalanceMonth.$inject = ['$injector'];

    function zzeWidgetBalanceMonth($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/balance-month/templates/widget-balance-month.template.html'),
        };
    }

})();
(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetBillsToPay', zzeWidgetBillsToPay);

    zzeWidgetBillsToPay.$inject = ['$injector'];

    function zzeWidgetBillsToPay ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/bills-to-pay/templates/widget-bills-to-pay.template.html'),
            controller: 'zze.dashboard.WidgetBillsToPayCtrl',
            controllerAs: 'billToPay',
            bindToController: true
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetBillsToReceive', zzeWidgetBillsToReceive);

    zzeWidgetBillsToReceive.$inject = ['$injector'];

    function zzeWidgetBillsToReceive($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/bills-to-receive/templates/widget-bills-to-receive.template.html'),
            controller: 'zze.dashboard.WidgetBillsToReceiveCtrl',
            controllerAs: 'billToReceive',
            bindToController: true
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetBudgets', zzeWidgetBudgets);

    zzeWidgetBudgets.$inject = ['$injector'];

    function zzeWidgetBudgets ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/budgets/templates/widget-budgets.template.html'),
            controller: 'zze.dashboard.WidgetBudgetsCtrl',
            controllerAs: 'budgets',
            bindToController: true
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetBlog', zzeWidgetBlog);

    zzeWidgetBlog.$inject = ['$injector'];

    function zzeWidgetBlog ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/blog/templates/widget-blog.template.html'),
            controller: 'zze.dashboard.WidgetBlogCtrl',
            controllerAs: 'blog',
            bindToController: true
        };
    }
})();
(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetCreditCards', zzeWidgetCreditCards);

    zzeWidgetCreditCards.$inject = ['$injector'];

    function zzeWidgetCreditCards ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/credit-cards/templates/widget-credit-card.template.html'),
            controller: 'zze.dashboard.WidgetCreditCardsCtrl',
            controllerAs: 'creditCards',
            bindToController: true
        };
    }

})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .directive('zzeWidgetTopExpenses', zzeWidgetTopExpenses);

    zzeWidgetTopExpenses.$inject = ['$injector'];

    function zzeWidgetTopExpenses ($injector) {
        var $filter = $injector.get('$filter');

        return {
            restrict: 'E',
            templateUrl: $filter('assetPath')('templates/modules/dashboard/widgets/top-expenses/templates/widget-top-expenses.template.html'),
            controller: 'zze.dashboard.WidgetTopExpensesCtrl',
            controllerAs: 'topExpenses',
            bindToController: true
        };
    }
})();
/**
 * Created by selinger on 08/09/17.
 */
(function () {

    'use strict';

    angular.module('asset-path')
        .filter('assetPath', function () {
            return function (filename) {
                return AssetPath.get(filename);
            };
        });
})();

(function () {

    'use strict';

    /**
     * @ngdoc filter
     * @name zze.commons.filter:zzeMaskCurrency
     * @element span
     *
     * @param {string} value value Value to be masked.
     * @param {string} symbol Currency Symbol.
     * @param {string} thousands Thousands separator.
     * @param {string} decimal Decimal separator.
     *
     * @returns {String} Returns the masked value to the previous settings.
     *
     * @description Add mask the monetary value according to the settings made by the user.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <span>Era 32.56 e ficou {{'32.56' | zzeMaskCurrency:'R$ ':'.':','}}</span>
     *      </file>
     * </example>
     */
    angular.module('zze.commons')
        .filter('zzeMaskCurrency', zzeMoney);

    function zzeMoney () {
        return function (obj) {

            /* jshint camelcase:false */
            return accounting.formatMoney(obj.value, obj.symbol, obj.precision, obj.thousands_separator, obj.decimal_mark);
        };
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc filter
     * @name zze.commons.filter:zzeHighlight
     *
     * @description Mark a text according to the search.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <!-- span ng-bind-html="item.desc | zzeHighlight: search.text">{{item.desc}}</span -->
     *          <span ng-bind-html="Text displayed in view | zzeHighlight: data.text.search">Text displayed in view.</span>
     *      </file>
     * </example>
     */
    angular.module('zze.commons')
        .filter('zzeHighlight', function($sce) {
            return function(text, phrase) {

                if (phrase) {
                    text = text.replace(new RegExp('('+phrase+')', 'gi'), '<span class="zze-highlighted">$1</span>');
                }

                return $sce.trustAsHtml(text);
            };
        });
})();

(function() {
    'use strict';

    /**
     * @ngdoc filter
     * @name zze.commons.filter:zzeMaskCNPJ
     * @element span
     *
     * @param {String} zzeMaskCnpj CNPJ to be masked.
     * @returns {String} Returns the CNPJ sent with the applied mask.
     *
     * @description Adds a mask to a CNPJ.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <span>Era 25465212584 e ficou {{'25465212584' | zzeMaskCNPJ}}</span>
     *      </file>
     * </example>
     */
    angular.module('zze.commons')
        .filter('zzeMaskCNPJ', function() {
            return function (value) {

                if (!value) {
                    return;
                }

                if (angular.isNumber(value)) {
                    throw new Error('This filter only accepts STRING.');
                }

                return value ? value.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5') : '';
            };
        });
})();

(function() {
    'use strict';

    /**
     * @ngdoc filter
     * @name zze.commons.filter:zzeMaskCpfCnpj
     * @element span
     *
     * @param {String} zzeMaskCpfCnpj CPF or CNPJ to be masked.
     * @returns {String} Returns the CPF or CNPJ sent with the applied mask.
     *
     * @description Adds a mask to a CNPJ or CPF.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <span>Era 25465212584 e ficou {{'25465212584' | zzeMaskCpfCnpj}}</span>
     *          <span>Era 25465212584322 e ficou {{'25465212584322' | zzeMaskCpfCnpj}}</span>
     *      </file>
     * </example>
     */
    angular.module('zze.commons')
    .filter('zzeMaskCpfCnpj', ['$filter',
        function($filter) {
            return function(value) {

                if (!value) {
                    return;
                }

                var val = value.replace(/[^\d]/g, '');

                if (val.length === 11) {
                    return $filter('zzeMaskCPF')(val);
                }

                if (val.length === 14) {
                    return $filter('zzeMaskCNPJ')(val);
                }
            };
        }
    ]);
})();
(function() {
    'use strict';

    /**
     * @ngdoc filter
     * @name zze.commons.filter:zzeMaskCpf
     * @element span
     *
     * @param {String} zzeMaskCPF CPF to be masked.
     * @returns {String} Returns the CPF sent with the applied mask.
     *
     * @description Adds a mask to a CPF.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <span>Era 25465212584 e ficou {{'25465212584' | zzeMaskCPF}}</span>
     *      </file>
     * </example>
     */
    angular.module('zze.commons')
        .filter('zzeMaskCPF', function() {
            return function (value) {

                if (!value) {
                    return;
                }

                if (angular.isNumber(value)) {
                    throw new Error('This filter only accepts STRING.');
                }

                return value ? value.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4') : '';
            };
        });
})();

(function() {

    'use strict';

    /**
     * @ngdoc filter
     * @name zze.commons.filter:zzeMaskPhone
     * @element span
     *
     * @param {String} zzeMaskPhone Phone number to be masked.
     * @returns {String} Returns the phone number sent with the applied mask.
     *
     * @description Adds a mask to a phone number.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <div class="row">
     *              <div class="col-md-12">
     *                  <span>Before 4834315685 after {{'4834315685' | zzeMaskPhone}}</span>
     *              </div>
     *          </div>
     *          <div class="col-md-12">
     *                  <span>Before 48886596589 e after {{'48886596589' | zzeMaskPhone}}</span>
     *              </div>
     *          </div>
     *      </file>
     * </example>
     */
    angular.module('zze.commons')
        .filter('zzeMaskPhone', function() {
            return function(value) {

                if (!value) {
                    return;
                }

                var val = value.replace(/[^\d]/g, '');

                if (val.length === 10) {
                    return value.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3');
                } else if (val.length === 11) {
                    return value.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
                } else {
                    return value;
                }
            };
        });
})();

(function() {

    'use strict';

    /**
     * @ngdoc filter
     * @name zze.commons.filter:zzeMaskZipCode
     * @element span
     *
     * @param {String} zzeMaskZipCode zip code that will be masked.
     *
     * @returns {String} Returns the sent zip code with the applied mask.
     *
     * @description Add mask in a zip code.
     *
     * @example:
     *  <example module="zze">
     *      <file name="index.html">
     *          <span>Era 88800000 e ficou {{'88800000' | zzeMaskZipCode}}</span>
     *      </file>
     * </example>
     */

    angular.module('zze.commons')
        .filter('zzeMaskZipCode', function () {
            return function (value) {

                if (!value) {
                    return;
                }

                if (angular.isNumber(value)) {
                    throw new Error('This filter only accepts STRING.');
                }

                return value ? value.replace(/(\d{5})(\d{3})/, '$1-$2') : '';
            };
        });
})();

(function () {

    'use strict';

    angular.module('zze-messages')
        .filter('zzeMaskCurrency', zzeMoney);

    function zzeMoney () {
        return function (obj) {

            /* jshint camelcase:false */
            return accounting.formatMoney(obj.value, obj.symbol, obj.precision, obj.thousands_separator, obj.decimal_mark);
        };
    }
})();

(function () {

    'use strict';

    angular.module('zze.creditCard')
        .filter('zzeInvoiceDateFormat', zzeInvoiceDateFormat);

    zzeInvoiceDateFormat.$inject = ['$injector'];

    function zzeInvoiceDateFormat ($injector) {
        return function (date) {
            var $filter = $injector.get('$filter');

            return $filter('date')(date, "MMMM 'de' yyyy");
        };
    }
})();

/**
 * Created by selinger on 18/08/17.
 */
(function() {
	'use strict';

	/**
     * @ngdoc overview
     * @name zze
     */
	angular
		.module('zze')
		/**
     * @ngdoc service
     * @name zze.mainFactory
     *
     * @description Factory utilities for managing requests.
     */
		.factory('zze.mainFactory', mainFactory);

	mainFactory.$inject = [ '$injector' ];

	function mainFactory($injector) {
		var context = window.Context,
			routes = window.Routes,
			Dialog = $injector.get('ngDialog'),
			$filter = $injector.get('$filter'),
			$window = $injector.get('$window'),
			$state = $injector.get('$state'),
			$timeout = $injector.get('$timeout'),
			$q = $injector.get('$q'),
			CrudFactory = $injector.get('zze.commons.crudFactory'),
			publicMethods = {
				showDialogActivateTrial: showDialogActivateTrial,
				showFinhubSync: showFinhubSync,
				showAccessDanied: showAccessDanied,

				visit: visit,

				legacyRoutes: legacyRoutes,
				endpoints: endpoints,

				contextSource: contextSource,
				currentEntity: currentEntity,
				entityPreferences: entityPreferences,
				fixedCategories: fixedCategories,
				product: product,
				alreadyTriedPremium: alreadyTriedPremium,
				avatarURL: avatarURL,
				permissions: permissions,
				currency: currency,
				isControlle: isControlle,
				isOrganizze: isOrganizze,
				isAccountFree: isAccountFree,
				isAccountTrial: isAccountTrial,
				today: today,
				hasExpiredLicense: hasExpiredLicense,

				dismissAnnouncement: dismissAnnouncement,

				checkBlockedResources: checkBlockedResources
			};

		return publicMethods;

		// TODO: Pedir para o Solano documentar este método.
		function dismissAnnouncement($event) {
			$event.preventDefault();
			CrudFactory.destroy(endpoints().announcement).then(function() {
				$(document).trigger('angular:leaveApp', [ '/', null ]);
			});
		}

		/**
         * @ngdoc function
         * @name showDialogActivateTrial
         *
         * @methodOf zze.mainFactory
         *
         * @description Displays the dialog to know and activate the trial version of the application.
         *
         * @param {string} status The status where the dialog will be displayed. There are the options:
         *  - **activateTrial**: Initiate the dialog by running the account migration steps.
         *  - **trialActivated**: Start the dialog stating that the trial version is already activated.
         *  - **exclusivePremium**: It will start the dialog informing that the feature is of the premium version a giving some information
         * @param {string} feature Represents the actual page, like accounts, budgets, etc.
         *
         *  @example
         *      <pre>
         *          <button ng-click="main.showDialogActivateTrial('activateTrial', 'budgets')">Trial</button>
         *      </pre>
         */
		function showDialogActivateTrial(status, feature, scope) {
            if (!scope.main.isOpenTrialDialog) {
                scope.main.isOpenTrialDialog = true;

                Dialog.open({
                    template: $filter('assetPath')('templates/modules/premium/templates/organizze-freetrial-layout.dialog.html'),
                    controller: 'zze.premium.premiumDialogCtrl',
                    controllerAs: 'premiumDialog',
                    closeByEscape: false,
                    showClose: false,
                    closeByDocument: false,
                    scope: scope,
                    className: 'ngdialog theme-organizze zze-dialog-activate-trial ' + product(),
                    data: {
                        options: {
                            status: status,
                            feature: feature
                        }
                    }
                });
            }
		}

		/**
         * @ngdoc function
         * @name showFinhubSync
         *
         * @methodOf zze.mainFactory
         *
         * @description Display the dialog box with a list of synchronized postings via integration/finhub.
         *
         * @example
         *     <pre>
         *         <button ng-click="main.showFinhubSync()">Ver lançamentos sincronizados</button>
         *     </pre>
         */
		function showFinhubSync() {
			Dialog.open({
				className: 'ngdialog theme-organizze zze-context_finhub-sync-extend',
				template: $filter('assetPath')('templates/modules/finhub/templates/finhub-sync.dialog.html'),
				controller: 'zze.finhub.FinhubSyncCtrl',
				controllerAs: 'sync',
				width: 660,
				closeByDocument: false,
				data: {
					currency: currency()
				}
			});
		}

		/**
         * @ngdoc function
         * @name showAccessDanied
         *
         * @methodOf zze.mainFactory
         *
         * @description Display the dialog box with a message the Access Danied.
         *
         * @example
         *     <pre>
         *         <button ng-click="main.showAccessDanied()">Open the Door</button>
         *     </pre>
         */
		function showAccessDanied() {
			Dialog.open({
				className: 'ngdialog theme-organizze zze-access-danied-dialog',
				template: $filter('assetPath')('templates/modules/permissions/templates/access-denied.html'),
				width: 550
			});
		}

		/**
         * @ngdoc function
         * @name visit
         *
         * @methodOf zze.mainFactory
         *
         * @description Uses $window.open(url, event) to access links outside of zze-front domain.
         *              In case the element has no target attribute defined '_self' is used as default.
         *
         * @example
         *     <pre>
         *         <button ng-click="main.visit(url, $event)">Redirect legacy</button>
         *     </pre>
         */
		function visit(url, e) {
			if (e.target.target) {
				$window.open(url, e.target.target);
			} else {
				$window.open(url, '_self');
			}
		}

		function legacyRoutes() {
			/* jshint camelcase:false */
			return routes.legacy_app;
		}

		function endpoints() {
			return routes.endpoints;
		}

		function contextSource() {
			return context;
		}

		function currentEntity() {
			return _.omit(context.currentEntity, 'preferences');
		}

		/**
         * @ngdoc function
         * @name entityPreferences
         *
         * @methodOf zze.mainFactory
         *
         * @description Slice's currentEntity object and returns only preferences.
         *
         * @param {string} key if present returns only the desired value, otherwise returns the complete object.
         *
         */
		function entityPreferences(key) {
			if (key) {
				return context.currentEntity.preferences[key];
			} else {
				return context.currentEntity.preferences;
			}
		}

        /**
         * @ngdoc function
         * @name checkBlockedResources
         *
         * @methodOf zze.mainFactory
         *
         * @description Returns if the resource is (already) blocked for the free user.
         *
         * @param {string} resource Name of the resource to be verify.
         * @param {int} userQuantity If present returns the number of used items of the resource.
         *
         */
        function checkBlockedResources() {
            return true;
        }

		/**
         * @ngdoc function
         * @name hasExpiredLicense
         *
         * @methodOf zze.mainFactory
         *
         * @description Redirect to plans page if current license are expired.
         *
         * This method return a promise
         *
         */
		function hasExpiredLicense() {
			var deferred = $q.defer();

			$timeout(function() {
				if (currentEntity().licenseStatus !== 'active') {
					$state.go('plans');
					deferred.reject();
				} else {
					deferred.resolve();
				}
			});

			return deferred.promise;
		}

		function fixedCategories() {
			return currentEntity().fixedCategories;
		}

		function product() {
			return context.product;
		}

		function alreadyTriedPremium() {
			return context.alreadyTriedPremium;
		}

		function avatarURL() {
			return context.avatarURL;
		}

		function permissions() {
			return context.permissions;
		}

		function currency() {
			return context.currency;
		}

		function isControlle() {
			return product() === 'empresas' || product() === 'controlle';
		}

		function isOrganizze() {
			return !isControlle();
		}

		function isAccountFree() {
			return currentEntity().planName === 'free' || currentEntity().planName === 'startup';
		}

		function isAccountTrial() {
			return currentEntity().planTimeRangeName === 'trial';
		}

		function today() {
			return moment(context.today);
		}
	}
})();

(function () {
    'use strict';

    angular.module('zze.commons')
        .factory('zze.commons.chartFactory', chartFactory);

    chartFactory.$inject = ['$injector'];

    function chartFactory ($injector) {
        var CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            publicMethods = {
                create: create,
                getLabels: getLabels,
                start: start
            };

        return publicMethods;

        function create (obj) {
            var chartConstruct;

            if (obj.config.type === 'BackgroundChart') {
                chartConstruct = _getChartBackgroundSeries();
                chartConstruct.data = _getChartBackgroundData(obj);
            } else if (obj.config.type === 'BalanceChart') {
                chartConstruct = _getChartBalanceSeries();
                chartConstruct[0].data = _getChartBalanceData(obj);
            } else if (obj.config.type === 'TopCategoriesAccounts') {
                chartConstruct = _getChartTopCategoriesSeries();
                chartConstruct[0].data = _getChartTopCategoriesData(obj);
            }

            return chartConstruct;
        }

        function start (type, id, series, labels) {
            Charts[type].instance = new Charts[type](id, series, labels);
        }

        function getLabels (data) {
            var labels = [];

            for (var i = 0, len = data.length; i < len; i++) {
                labels.push(data[i].label);
            }

            return labels;
        }

        function _getChartBackgroundSeries () {
            var series = {
                name: "Saldo",
                showInLegend: false,
                type: "areaspline",
                threshold: null,
                fillColor: 'rgba(0, 0, 0, 0.04)',
                data: []
            };

            return series;
        }

        function _getChartBackgroundData (obj) {
            var seriesData = [];

            for (var i = 0, len = obj.data.chartData.length; i < len; i++) {
                var item = {
                    y: obj.data.chartData[i].amount,
                    title: 'Saldo em ' + obj.data.chartData[i].title,
                    tipClass: 'balance'
                };

                seriesData.push(item);
            }

            return seriesData;
        }

        function _getChartBalanceSeries () {
            var series = [{
                color: "#64D6FE",
                negativeColor: "#EA494C",
                lineWidth: 1.2,
                marker: {
                    lineWidth: 2,
                    enabled: true,
                    symbol: 'circle',
                    radius: 3.5
                },
                data: []
            }];

            return series;
        }

        function _getChartBalanceData (obj) {
            var seriesData = [];

            for (var i = 0, len = obj.data.periods.length; i < len; i++) {
                var lineColor = obj.data.periods[i].balance < 0 ? '#EA494C' : '#64D6FE',
                    fillColor = '#FFFFFF',

                    item = {
                        y: obj.data.periods[i].balance,
                        currency: CurrencyFactory.getCurrencyMasked(obj.data.periods[i].balance, obj.config.currency, true),
                        title: 'Saldo em ' + obj.data.periods[i].title,
                        marker: {
                            fillColor: fillColor,
                            lineColor: lineColor,
                            states: {
                                hover: {
                                    fillColor: fillColor,
                                    lineColor: lineColor
                                }
                            }
                        }
                    };

                seriesData.push(item);
            }

            return seriesData;
        }

        function _getChartTopCategoriesSeries () {
            var series = [{
                type: 'pie',
                data: []
            }];

            return series;
        }

        function _getChartTopCategoriesData (obj) {
            var seriesData = [];

            for (var i = 0, len = obj.data.length; i < len; i++) {
                var item = {
                    name: obj.data[i].label,

                    /* jshint camelcase:false */
                    dom_id: "row-" + obj.data[i].label,
                    y: obj.data[i].value,
                    title: obj.data[i].label,

                    /* jshint camelcase:false */
                    activity_type: "outcome",
                    color: obj.data[i].color,
                    currency: CurrencyFactory.getCurrencyMasked(obj.data[i].value, obj.config.currency, true)
                };

                seriesData.push(item);
            }

            return seriesData;
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc service
     * @name zze.commons.currencyFactory
     *
     * @description Set of services for handling and formatting of monetary values.
     *
     * @example
     * <example module="zze">
     *     <pre>
     *         (function () {
     *
     *             'use strict';
     *
     *             angular.module('zze')
     *                 .controller('myController', myController);
     *
     *             myController.$inject = ['$injector'];
     *
     *             function myController ($injector) {
     *                 var CurrencyFactory = $injector.get('zze.commons.currencyFactory');
     *
     *                 CurrencyFactory.getCurrencyMasked(value, $scope.main.contextSource.currency, true);
     *             }
     *         })();
     *     </pre>
     * <example>
     */
    angular.module('zze.commons')
        .factory('zze.commons.currencyFactory', currency);

    currency.$inject = ['$injector'];

    function currency ($injector) {
        var $filter = $injector.get('$filter'),

            publicMethods = {
                getCurrencyMasked: getCurrencyMasked,
                getCurrencyInCentsMasked: getCurrencyInCentsMasked,
                getCurrencyParse: getCurrencyParse
            };

        return publicMethods;

        /**
         * @ngdoc method
         * @name getCurrencyMasked
         * @methodOf zze.commons.currencyFactory
         *
         * @description Returns the masked currency according to the user settings.
         *
         * @param {string} value Value to be masked.
         * @param {obj} config Currency settings listed by the user available in _$scope.main.contextSource.currency_.
         * @param {boolean} useSymbol Tells whether the value will be returned applied symbol.
         * @param {number} precision bleh.
         */
        function getCurrencyMasked (value, config, useSymbol, precision) {
            precision = precision || 2;

            /*
                config.subunit_to_unit is a factor by which a value must be divided
                to be converted from subunit to unit, meaning, from cents to dollar
                or from centavos to reais, pennies to pounds, etc...

                Example:

                    to convert 10000 cents into its equivalent in dollar we must divide by 100:
                    10000c / 100 = $100

                For some currencies, the subunit_to_unit factor is 1, meaning that
                the currency does not have the notion of cents. Paraguayan Guaraní (PYG) is
                one of such currencies.

                If subunit_to_unit is one, the currency does not have cents, so we set
                the precision to 0 to tell the formatter to deal only with the whole part
                of the value.

            */
            /* jshint camelcase:false */
            if(config.subunit_to_unit === 1) { precision = 0; }

            return $filter('zzeMaskCurrency')({
                value: value,
                symbol: useSymbol ? (config.symbol + " ") : '',
                precision: precision,
                thousands_separator: config.thousands_separator,
                decimal_mark: config.decimal_mark
            });
        }

        /**
         * @ngdoc method
         * @name getCurrencyInCentsMasked
         * @methodOf zze.commons.currencyFactory
         *
         * @description Returns the parsed currency for value in cents.
         *
         * @param {string} valueInCents Value to be masked.
         * @param {string} currency Current entity currency.
         * @param {string} symbol Symbol of the currency.
         */
        function getCurrencyInCentsMasked(valueInCents, currency, symbol) {
            var sanitizedValueInCents = valueInCents || 0;
            /* jshint camelcase:false */
            var subunitToUnit = parseFloat(currency.subunit_to_unit || 100);
            if (subunitToUnit <= 0) { subunitToUnit = 100.0; }
            var value = sanitizedValueInCents / subunitToUnit;
            return getCurrencyMasked(value, currency, symbol);
        }

        /**
         * @ngdoc method
         * @name getCurrencyParse
         * @methodOf zze.commons.currencyFactory
         *
         * @description Returns the parsed currency for 1234.00.
         *
         * @param {string} value Value to be parsed.
         */
        function getCurrencyParse (value, decimal) {
            return accounting.unformat(value, decimal);
        }
    }
})();

(function () {

    'use strict';

    angular.module('independent-loader')
        .factory('independent-loader.loadingFactory', loadingFactory);

    function loadingFactory () {
        var publicMethods = {
            getTemplateCircle: getTemplateCircle,
            getTemplateHeader: getTemplateHeader
        };

        return publicMethods;

        function getTemplateCircle (type, color) {
            var classes = ' ';

            classes += type ? type : 'medium';
            classes += color ? (' ' + color) : '';

            var template = '<div class="application-loader' + classes + '" data-loader="true">' +
                                '<svg class="circular" viewBox="25 25 50 50">' +
                                    '<circle class="load" cx="50" cy="50" r="20" fill="none" stroke-width="3" stroke-miterlimit="10"/>' +
                                '</svg>' +
                            '</div>';

            return template;
        }

        function getTemplateHeader (type) {
            var template = '<div id="loading-top">' +
                                '<div class="application-loader ' + (type || 'small') + '" data-loader="true">' +
                                    '<svg class="circular" viewBox="25 25 50 50">' +
                                        '<circle class="load" cx="50" cy="50" r="20" fill="none" stroke-width="3" stroke-miterlimit="10"/>' +
                                    '</svg>' +
                                '</div>' +
                                '<span>Carregando...</span>' +
                            '</div>';

            return template;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.commons')
        .factory('zze.commons.loadingFactory', loadingFactory);

    function loadingFactory () {
        var publicMethods = {
            getTemplateCircle: getTemplateCircle,
            getTemplateHeader: getTemplateHeader
        };

        return publicMethods;

        function getTemplateCircle (type, color) {
            var classes = ' ';

            classes += type ? type : 'medium';
            classes += color ? (' ' + color) : '';

            var template = '<div class="application-loader' + classes + '" data-loader="true">' +
                                '<svg class="circular" viewBox="25 25 50 50">' +
                                    '<circle class="load" cx="50" cy="50" r="20" fill="none" stroke-width="3" stroke-miterlimit="10"/>' +
                                '</svg>' +
                            '</div>';

            return template;
        }

        function getTemplateHeader (type) {
            var template = '<div id="loading-top">' +
                                '<div class="application-loader ' + (type || 'small') + '" data-loader="true">' +
                                    '<svg class="circular" viewBox="25 25 50 50">' +
                                        '<circle class="load" cx="50" cy="50" r="20" fill="none" stroke-width="3" stroke-miterlimit="10"/>' +
                                    '</svg>' +
                                '</div>' +
                                '<span>Carregando...</span>' +
                            '</div>';

            return template;
        }
    }
})();

 (function () {
    'use strict';

    /**
     * @ngdoc service
     * @name zze.commons.contextFactory
     *
     * @description Responsible factory to provide access the global context information of the application.
     *
     * **Note:** Before using the methods, check the main controller _( zze.mainCtrl )_ which are available for use in
     *           the global scope.
     *
     * @example
     * <example module="zze">
     *     <pre>
     *         (function () {
	 *
	 *             'use strict';
	 *
	 *             angular.module('zze')
	 *                 .controller('myController', myController);
	 *
	 *             myController.$inject = ['$injector'];
	 *
	 *             function myController ($injector) {
	 *                 var ContextFactory = $injector.get('zze.commons.contextFactory');
	 *
	 *                 ContextFactory.getLegacyRoute('premium_feature')
	 *             }
	 *         })();
     *     </pre>
     * <example>
     */
    angular.module('zze.commons')
        .factory('zze.commons.contextFactory', ContextFactory);

    ContextFactory.$inject = ['$injector'];

    function ContextFactory ($injector) {
        var $state = $injector.get('$state'),
            StringsFactory = $injector.get('zze.utils.stringProcessFactory'),

            publicMethods = {
                getLegacyRoute: getLegacyRoute,
                getLegacyRouteProccess: getLegacyRouteProccess,
                getEndPoint: getEndPoint,
                getEndPointProccess: getEndPointProccess
            };

        return publicMethods;

        /**
         * @ngdocc method
         * @name getEndPoint
         * @methodOf zze.commons.contextFactory
         *
         * @description Returns a string with the address of the requested endpoint.
         *
         * @param {string} method Method name you want to retrieve the endpoint, eg update.
         * @param {string} enums If you need to access a route out of $ state.current, it will be an enum mapped manually.
         *        Enter the key on the map..
         */
        function getEndPoint (method, enums) {
            var stateName = $state.current.name,
                state = enums ? enums : stateName,
                arrContextPage;

            if (stateName.indexOf('.') > -1) {
                arrContextPage = StringsFactory.stringExplode(state, '.');
                return window.Routes.endpoints[arrContextPage[arrContextPage.length - 1]][method];
            } else {
                arrContextPage = StringsFactory.stringExplode(state, '/');
                return window.Routes.endpoints[arrContextPage[0]][method];
            }
        }

        /**
         * @ngdocc method
         * @name getEndPointProccess
         * @methodOf zze.commons.contextFactory
         *
         * @description Receives an object with some parameters, rescue an endpoint in the window and performs replace
         *              the identified attribute.
         *
         * @param {string} method Method name that is mapped on the window.
         * @param {string} enums If you need to access a route out of $ state.current, it will be an enum mapped manually.
         *        Enter the key on the map..
         * @param {string} replace Value to be replaced in replace.
         * @param {string|number} value Value that will be applied to replace.
         */
        function getEndPointProccess (obj) {
            var endPoint = getEndPoint(obj.method, obj.enums),
                endPointReplaced = StringsFactory.stringReplace(endPoint, obj.replace, obj.value);

            return endPointReplaced;
        }

        /**
         * @ngdocc method
         * @name getLegacyRoute
         * @methodOf zze.commons.contextFactory
         *
         * @description Returns a string with the address of the requested url session legacy.
         *
         * @param {string} session Name of the attribute that has the legacy URL session.
         */
        function getLegacyRoute (session) {
            /* jshint camelcase:false */
            return window.Routes.legacy_app[session];
        }

        /**
         * @ngdocc method
         * @name getLegacyRouteProccess
         * @methodOf zze.commons.contextFactory
         *
         * @description Receives an object with some parameters, rescue an legacy_app in the window and performs replace
         *              the identified attribute.
         *
         * @param {string} method Method name that is mapped on the window.
         * @param {string} replace Value to be replaced in replace.
         * @param {string|number} value Value that will be applied to replace.
         */
        function getLegacyRouteProccess (obj) {
            var endPoint = getLegacyRoute(obj.method),
                endPointReplaced = StringsFactory.stringReplace(endPoint, obj.replace, obj.value);

            return endPointReplaced;
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.commons
     */
    angular.module('zze.commons')

        /**
         * @ngdoc service
         * @name zze.commons.crudFactory
         *
         * @description Factory utilities for managing requests.
         */
        .factory('zze.commons.crudFactory', CrudFactory);

    CrudFactory.$inject = ['$injector', '$sce'];

    function CrudFactory ($injector, $sce) {
        var $http = $injector.get('$http'),

            publicMethods = {
                getAll: getAll,
                getOne: getOne,
                post: post,
                put: put,
                destroy: destroy,
                getJsonp: _jsonp

            };

        return publicMethods;

        /**
         * @ngdoc method
         * @name getAll
         * @methodOf zze.commons.crudFactory
         *
         * @param {string} url URL that will be made the request for a listing.
         *
         * @description Objects are self-aware and know how to make their own RestFull requests.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
                 *
                 *             'use strict';
                 *
                 *             angular.module('zze')
                 *                 .controller('myController', myController);
                 *
                 *             myController.$inject = ['$injector'];
                 *
                 *             function myController ($injector) {
                 *                 var CrudService = $injector.get('zze.commons.crudService');
                 *
                 *                 var promise = CrudService.getAll('url-my-api').then(function (res) {
                 *                     // It will run after finishing a promise.
                 *                 });
                 *             }
                 *         })();
         *     </pre>
         * <example>
         */
        function getAll (url, config) {
            return $http.get(url, config);
        }

        /**
         * @ngdoc method
         * @name getOne
         * @methodOf zze.commons.crudFactory
         *
         * @param {string} url URL that will be made the request for a listing.
         * @param {object} params Object with required parameters for the request.
         *
         * @description Chain methods together to easily build complex requests.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
                 *
                 *             'use strict';
                 *
                 *             angular.module('zze')
                 *                 .controller('myController', myController);
                 *
                 *             myController.$inject = ['$injector'];
                 *
                 *             function myController ($injector) {
                 *                 var CrudService = $injector.get('zze.commons.crudService');
                 *
                 *                 var promise = CrudService.getone('url-my-api', {
                 *                     key: $scope.key
                 *                 }).then(function (res) {
                 *                     // It will run after finishing a promise.
                 *                 });
                 *             }
                 *         })();
         *     </pre>
         * <example>
         */
        function getOne (url, config) {
            return $http.get(url, config);
        }

        /**
         * @ngdoc method
         * @name post
         * @methodOf zze.commons.crudFactory
         *
         * @param {string} URL that will be sent the form data.
         * @param {object} data Data from the form.
         *
         * @description Sending data to be processed in the backend.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
                 *
                 *             'use strict';
                 *
                 *             angular.module('zze')
                 *                 .controller('myController', myController);
                 *
                 *             myController.$inject = ['$injector'];
                 *
                 *             function myController ($injector) {
                 *                 var CrudService = $injector.get('zze.commons.crudService');
                 *
                 *                 var promise = CrudService.post('url-my-api', {
                 *                     name: 'My Name',
                 *                     email: 'my@email.com'
                 *                 }).then(function (resp) {
                 *                     // It will run after finishing a promise.
                 *                 });
                 *             }
                 *         })();
         *     </pre>
         * <example>
         */
        function post (url, data, config) {
            return $http.post(url, data, config);
        }

        /**
         * @ngdoc method
         * @name put
         * @methodOf zze.commons.crudFactory
         *
         * @param {string} URL that will be put the form data ou register.
         * @param {object} data Data from the form.
         *
         * @description Sending data to be processed in the backend.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
                 *
                 *             'use strict';
                 *
                 *             angular.module('zze')
                 *                 .controller('myController', myController);
                 *
                 *             myController.$inject = ['$injector'];
                 *
                 *             function myController ($injector) {
                 *                 var CrudService = $injector.get('zze.commons.crudService');
                 *
                 *                 var promise = CrudService.put('url-my-api', {
                 *                     name: 'My Name',
                 *                     email: 'my@email.com'
                 *                 }).then(function (resp) {
                 *                     // It will run after finishing a promise.
                 *                 });
                 *             }
                 *         })();
         *     </pre>
         * <example>
         */
        function put (url, data, config) {
            return $http.put(url, data, config);
        }

        /**
         * @ngdoc method
         * @name destroy
         * @methodOf zze.commons.crudFactory
         *
         * @param {string} URL that will be delete a register.
         *
         * @description Sending data to be processed in the backend.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
                 *
                 *             'use strict';
                 *
                 *             angular.module('zze')
                 *                 .controller('myController', myController);
                 *
                 *             myController.$inject = ['$injector'];
                 *
                 *             function myController ($injector) {
                 *                 var CrudService = $injector.get('zze.commons.crudService');
                 *
                 *                 var promise = CrudService.destroy('url-my-api').then(function (resp) {
                 *                     // It will run after finishing a promise.
                 *                 });
                 *             }
                 *         })();
         *     </pre>
         * <example>
         */
        function destroy (url, config) {
            return $http.delete(url, config);
        }

        /**
         * @ngdoc method
         * @name jsonp
         * @methodOf zze.commons.crudFactory
         *
         * @param {string} URL that will be delete a register.
         *
         * @description It provides a method for sending data requests from a server to a different domain, a thing
         * prohibited by typical browsers because of the same Source Policy.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
                 *
                 *             'use strict';
                 *
                 *             angular.module('zze')
                 *                 .controller('myController', myController);
                 *
                 *             myController.$inject = ['$injector'];
                 *
                 *             function myController ($injector) {
                 *                 var CrudFactory.jsonp(url , { headers: {'Access-Control-Allow-Origin': '*'} });
                 *
                 *             }
                 *         })();
         *     </pre>
         * <example>
         */
        function _jsonp (url, params) {
            $sce.trustAsResourceUrl(url);

            return $http.jsonp(url, params);
        }


    }

})();

(function () {
    'use strict';

    angular.module('zze.commons')
    /**
     * @ngdoc service
     * @name zze.commons.federalIdentificationFactory
     *
     * @description get data from the informed CNPJ
     */
        .factory('zze.commons.federalIdentificationFactory', federalIdentificationFactory);

    federalIdentificationFactory.$inject = ['$injector'];

    function federalIdentificationFactory ($injector) {

        var ContextFactory = $injector.get('zze.commons.contextFactory'),

            publicMethods = {
                getFederalIdentification: getFederalIdentification
            };

        return publicMethods;

        /**
         * @ngdoc method
         * @name getZipCode
         * @methodOf zze.commons.federalIdentificationFactory
         *
         * @param {zipCode} value The CNPJ number that will search.
         * @return {string} Returns data of CNPJ.
         *
         * @description CSearch for information from the CNPJ informed
         *
         * @example
         *  var promise = FederalIdentificationFactory.getFederalIdentification(viewModel.data.federal_identification);
         *  promise.then(function (resp) {}
         */
        function getFederalIdentification (federalIdentification) {
            var url = ContextFactory.getEndPointProccess({
                method: 'federal_identification_search',
                enums: 'enums',
                replace: ':federal_identification',
                value: federalIdentification
            });

            return $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json'
            });
        }

    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc service
     * @name zze.commons.messagesFactory
     *
     * @description Manages posted messages to the user.
     */
    angular.module('zze.commons')
        .factory('zze.commons.messagesFactory', MessagesFactory);

    function MessagesFactory () {
        var MESSAGES = {
            date: 'A data informada é inválida.',
            required: 'Este campo é obrigatório.',
            email: 'Email no formato inválido.',
            url: 'Url no formato inválido.',
            format: 'Valor no formato inválido.',
            cnpj: 'CNPJ inválido.',
            cpf: 'CPF inválido.',
            zipCode: 'CEP inválido'
        };

        var publicMethods = {
            setMessageField: setMessageField,
            removeMessageField: removeMessageField,
            checkOnBlur: checkOnBlur,
            checkOnChange: checkOnChange,

            setAlert: setAlert,
            setFlash: setFlash,
            setFlashInterceptor: setFlashInterceptor,
            checkError: checkError
        };

        return publicMethods;

        function setMessageField (element, options) {

            removeMessageField(element);

            var opts = _.extend({
                type: 'required'
            }, options);

            var msg = opts.type === 'custom' ? opts.message : MESSAGES[opts.type],
                templateMessage = $('<small class="zze-message-field">' + msg + '</small>');

            element
                .data('errorField', true)
                .parents('.group-field:first')
                .parent()
                .append(templateMessage)
                .addClass('zze-component_errors-field');

            templateMessage.slideDown();
        }

        function removeMessageField (element) {
            element
                .removeData('errorField')
                .parents('.group-field:first')
                .parent()
                .removeClass('zze-component_errors-field')
                .find('.zze-message-field')
                .remove();
        }

        function checkOnBlur (element, errors, custom) {
            var msg;

            element
                .on('blur', function () {

                    removeMessageField(element);

                    if (custom !== undefined) {
                        setMessageField(element, {
                            type: 'custom',
                            message: custom
                        });

                        return;
                    }

                    for (var type in errors) {
                        if (!errors.hasOwnProperty(type)) {
                            continue;
                        }

                        var hasError = errors[type];

                        msg = type === 'parse' ? 'required' : type;

                        if (hasError) {
                            setMessageField(element, {
                                type: msg
                            });
                        }

                    }
                });
        }

        function checkOnChange (element, errors, custom) {
            var msg;

            element
                .on('change', function () {

                    removeMessageField(element);

                    if (custom !== undefined) {
                        setMessageField(element, {
                            type: 'custom',
                            message: custom
                        });

                        return;
                    }

                    for (var type in errors) {
                        if (!errors.hasOwnProperty(type)) {
                            continue;
                        }

                        var hasError = errors[type];

                        msg = type === 'parse' ? 'required' : type;

                        if (hasError) {
                            setMessageField(element, {
                                type: msg
                            });
                        }
                    }
                });
        }

        /**
         * @ngdoc method
         * @name setAlert
         * @methodOf zze.commons.messagesFactory
         *
         * @param {string} message Message to be displayed to the user.
         *
         * @description View the user an alert with the message you want.
         * @example
         *
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var MessageFactory = $injector.get('zze.commons.messagesFactory');
         *
         *                 MessageFactory.setAlert('You message on here!');
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        function setAlert (error) {
            alert(error.message);
        }

        /**
         * @ngdoc method
         * @name checkError
         * @methodOf zze.commons.messagesFactory
         *
         * @description Checks for any errors released in the form, and run the notification according to the given type.
         *              Return a _Boolean_ for proccess or blocked execution request.
         *
         * @param {object} error You should send the AngularJS error controller in the $scope of your controller, ex.: _ctrl.$error_.
         * Available types:
         *  - **_alert:_** simple message displayed through a custom alert.
         *  - **_flash_error:_** Floating message displayed appears on the right side with different style. This is for error messages.
         *  - **_flash_success:_** Floating message displayed appears on the right side with different style. This is for success messages.
         *
         * <hr />
         *
         * **Note:** Messages must be logged in ctrl.$error following the pattern.:
         * <pre>
         *     ctrl.$error = {
         *         message: 'You message on here!',
         *         type: 'typeOfMessage'
         *     };
         * </pre>
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector', '$scope'];
         *
         *             function myController ($injector, $scope) {
         *                 var viewModel = this,
         *                     MessageFactory = $injector.get('zze.commons.messagesFactory');
         *
         *                 var hasError = MessageFactory.checkError($scope.form.$error);
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        function checkError ($error) {
            for (var type in $error) {

                if ($error[type][0].$error.type === 'alert') {
                    setAlert($error[type][0].$error);
                    return true;
                }

                break;
            }

            return false;
        }

        /**
         * @ngdoc method
         * @name setFlash
         * @methodOf zze.commons.messagesFactory
         *
         * @param {string} message Message to be displayed to the user.
         * @param {string} type Type message to be displayed to the user. Available:
         *  - **_error:_** Messages for error.
         *  - **_success:_** Messages for success.
         *
         * @description View the user an balloon with the message you want.
         * @example
         *
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var MessageFactory = $injector.get('zze.commons.messagesFactory');
         *
         *                 MessageFactory.setFlash('You message on here!', 'success');
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        function setFlash (message, type) {
            Flash.show(message, type);
        }

        function setFlashInterceptor (data, type) {
            var message = _getMessageData(data);

            Flash.show(message, type);

            function _getMessageData (data) {
                var str = '';

                for (var msg in data) {
                    str += data[msg][0] + '<br />';
                }

                return str;
            }
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.commons
     */
    angular.module('zze.commons')

        /**
         * @ngdoc service
         * @name zze.commons.validatorsFactory
         *
         * @description Validate data according to your rules and calculations.
         *
         * @example
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('zze.myCtrl', myCtrl);
         *
         *             myCtrl.$inject = ['$injector'];
         *
         *             function myCtrl () {
         *                 var viewModel = this,
         *
         *                     validatorsFactory = $injector.get('zze.commons.validatorsFactoryzze.commons.validatorsFactory'),
         *
         *                     publicMethods = {
         *
         *                     };
         *
         *                 _.extend(viewModel,  publicMethods);
         *
         *                 init();
         *
         *                 function init () {
         *                     return validatorsFactory.nameMethod(value);
         *                 }
         *             }
         *         })();
         *     </pre>
         */
        .factory('zze.commons.validatorsFactory', function () {
            var publicMethods = {
                cpf: cpf,
                cnpj: cnpj,
                email: email,
                emails: emails,
                url: url
            };

            return publicMethods;

            /**
             * @ngdoc method
             * @name cpf
             * @methodOf zze.commons.validatorsFactory
             *
             * @param {String} value The CPF number that will be validated.
             * @return {Boolean} Returns a <i>true</i> or <i>false</i> of the passed value.
             *
             * @description Checks whether a CPF is valid, whether it is masked or not.
             *              Use the {@link zze.commons.directive:zzeMaskCpf directive} in input.
             *
             * <pre>
             *     validatorFactory.cpf('234.546.567-90');
             * </pre>
             */
            function cpf (value) {

                var re = /\d{3}(\.|\-|\,|\/)?\d{3}(\.|\-|\,|\/)?\d{3}(\.|\-|\,|\/)?\d{2}/;

                if (value !== '' && re.test(value)) {
                    value = value.replace(/(\.|\-|\,|\/)/g, '');

                    if (_isNumberRepeat(value, 'cpf')) {
                        return false;
                    }

                    var total = 0,
                        mul = 2;

                    for (var i = 8; i > -1; i--) {
                        total += Number(value.charAt(i)) * mul++;
                    }

                    var remaind = total % 11, dig1 = remaind < 2 ? 0 : 11 - remaind;

                    total = dig1 * 2;

                    mul = 3;
                    for (var j = 8; j > -1; j--) {
                        total += Number(value.charAt(j)) * mul++;
                    }

                    remaind = total % 11;

                    var dig2 = remaind < 2 ? 0 : 11 - remaind;

                    if (dig1 !== Number(value.charAt(9)) || dig2 !== Number(value.charAt(10))) {
                        return false;
                    }

                    return true;
                } else {
                    return false;
                }

                return _isNumberRepeat(value, 'cpf');
            }

            /**
             * @ngdoc method
             * @name cnpj
             * @methodOf zze.commons.validatorsFactory
             *
             * @param {String} value The CNPJ number that will be validated.
             * @return {Boolean} Returns a <i>true</i> or <i>false</i> of the passed value.
             *
             * @description Checks whether a CNPJ is valid, whether or not it is masked.
             *              Use the {@link zze.commons.directive:zzeMaskCnpj directive} in input.
             *
             * <pre>
             *     validatorFactory.cnpj('85.896.877/0001-78');
             * </pre>
             */
            function cnpj (value) {
                var re = /\d{2}(\.|\-|\,|\/)?\d{3}(\.|\-|\,|\/)?\d{3}(\.|\-|\,|\/)?\d{4}(\.|\-|\,|\/)?\d{2}/;

                if (value !== '' && re.test(value)) {
                    value = value.replace(/(\.|\-|\,|\/)/g, '');

                    var total = 0, mul = 2;

                    for (var i = 11; i > -1; i--) {
                        total += Number(value.charAt(i)) * mul++;
                        if (mul > 9) {
                            mul = 2;
                        }
                    }

                    var remaind = total % 11, dig1 = remaind < 2 ? 0 : 11 - remaind;

                    total = dig1 * 2;

                    mul = 3;
                    for (var j = 11; j > -1; j--) {
                        total += Number(value.charAt(j)) * mul++;
                        if (mul > 9) {
                            mul = 2;
                        }
                    }

                    remaind = total % 11;

                    var dig2 = remaind < 2 ? 0 : 11 - remaind;

                    if (dig1 !== Number(value.charAt(12)) || dig2 !== Number(value.charAt(13))) {
                        return false;
                    }

                    return true;
                }

                return _isNumberRepeat(value, 'cnpj');
            }

            /**
             * @ngdoc method
             * @name email
             * @methodOf zze.commons.validatorsFactory
             *
             * @param {String} value E-mail that will be validated.
             * @return {Boolean} Returns a <i>true</i> or <i>false</i> of the passed value.
             *
             * @description Checks if the informed email is valid.
             *              Use the {@link zze.commons.directive:zzeValidateEmail directive} in input
             *
             * <pre>
             *     validatorFactory.email('email.organizze@organizze.com.br');
             * </pre>
             */
            function email (value) {
                var re = /^[^@]+@[^@]+[.][^@]+$/;

                if (!re.test(value)) {
                    return false;
                }

                return true;
            }

            /**
             * @ngdoc method
             * @name emails
             * @methodOf zze.commons.validatorsFactory
             *
             * @param {String} value Emails that will be validated must be separated by (,) or (;).
             * @return {string/boolean} Returns a <i>true</i> when there are no invalid emails or a <i>message</i>.
             *
             * @description Checks if emails are in a valid format.
             *
             * <pre>
             *     validatorFactory.emails('email.organizze@organizze.com.br;organizze@organizze.com');
             * </pre>
             */
            function emails (value) {
                var re = /^[^@]+@[^@]+[.][^@]+$/,
                    parts = value.split(/[\,\;]/);

                for (var i = 0; i < parts.length; i++) {

                    if (!re.test(parts[i])) {
                        return 'O e-mail (' + parts[i] + ') está em um formato inválido.';
                    }
                }

                return true;
            }

            /**
             * @ngdoc method
             * @name url
             * @methodOf zze.commons.validatorsFactory
             *
             * @param {String} value URL that will be validated.
             * @return {boolean} Returns a <i>true</i> or <i>false</i> of the passed value.
             *
             * @description Verifica se a URL está em um formato válido.
             *
             * <pre>
             *     validatorFactory.emails('email.organizze@organizze.com.br;organizze@organizze.com');
             * </pre>
             */
            function url (value) {
                var re = /^https?:\/\/(www\.)?[-a-z0-9+]{2,128}\.[a-z]{2,4}(\.[a-z]{2,4})?(\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*)?$/i;

                if (!re.test(value)) {
                    return false;
                }

                return true;
            }

            function _isNumberRepeat (value, type) {
                var valuesBlocked = {
                    cpf: [
                        '00000000000',
                        '11111111111',
                        '22222222222',
                        '33333333333',
                        '44444444444',
                        '55555555555',
                        '66666666666',
                        '77777777777',
                        '88888888888',
                        '99999999999'
                    ],
                    cnpj: [
                        '00000000000000',
                        '11111111111111',
                        '22222222222222',
                        '33333333333333',
                        '44444444444444',
                        '55555555555555',
                        '66666666666666',
                        '77777777777777',
                        '88888888888888',
                        '99999999999999'
                    ]
                };

                for (var i = 0; i < 11; i++) {

                    if (valuesBlocked[type][i] === value) {
                        return true;
                    }
                }

                return false;
            }
        });
}());

(function () {
    'use strict';

    angular.module('zze.commons')
    /**
     * @ngdoc service
     * @name zze.commons.zipCodeFactory
     *
     * @description get data from the informed CEP
     */
        .factory('zze.commons.zipCodeFactory', zipCodeFactory);

    zipCodeFactory.$inject = ['$injector'];

    function zipCodeFactory ($injector) {

        var ContextFactory = $injector.get('zze.commons.contextFactory'),

            publicMethods = {
                getZipCode: getZipCode
            };

        return publicMethods;

        /**
         * @ngdoc method
         * @name getZipCode
         * @methodOf zze.commons.zipCodeFactory
         *
         * @param {zipCode} value The ZipCode number that will search.
         * @return {string} Returns data of ZipCode.
         *
         * @description CSearch for information from the ZipCode informed
         *
         * @example
         *  var promise = ZipCodeFactory.getZipCode(viewModel.data.address_zipcode,'cep_search', 'enums', ':cep');
         *  viewModel.tracker.loadZipCode.addPromise(promise);
         *  promise.then(function (resp) {}
         */
        function getZipCode (zipCode, method, enums, replace) {
            var url = ContextFactory.getEndPointProccess({
                method: method,
                enums: enums,
                replace: replace,
                value: zipCode
            });

            return $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json'
            });
        }

    }
})();

(function () {
    'use strict';

    /**
     * @ngdoc overview
     * @name zze.utils
     */
    angular.module('zze.utils')
        .factory('zze.utils.constantsFactory', constantsFactory);

    constantsFactory.$inject = ['$injector'];

    /**
     * @ngdoc service
     * @name zze.utils.constantsFactory
     *
     * @description Because we need to use the $ filter for the fingerprint, the angular .constant does not allow this
     *              structure, which resulted in the creation of this factory for these cases.
     *
     * @example
     * <example module="zze">
     *     <pre>
     *         (function () {
     *
     *             'use strict';
     *
     *             angular.module('zze')
     *                 .controller('myController', myController);
     *
     *             myController.$inject = ['$injector'];
     *
     *             function myController ($injector) {
     *                 var ConstantsFactory = $injector.get('zze.utils.constantsFactory');
     *
     *                 var CREDIT_CARDS = ConstantsFactory.getEnumsCredCards();
     *             }
     *         })();
     *     </pre>
     * <example>
     */
    function constantsFactory ($injector) {
        var $filter = $injector.get('$filter');

        var publicMethods = {
            getEnumsCredCards: getEnumsCredCards,
            getEnumsActivityClassification: getEnumsActivityClassification
        };

        return publicMethods;

        /**
         * @ngdoc method
         * @name getEnumsCredCards
         * @methodOf zze.utils.constantsFactory
         *
         * @description Returns an array with credit card listings.
         */
        function getEnumsCredCards () {

            /* jshint camelcase:false */
            return {
                visa: {
                    id: 'visa',
                    name: 'Visa',
                    color: '#4F7FE1',
                    background: '#F7F7F7',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/visa.jpg')
                },
                master: {
                    id: 'master',
                    name: 'Master Card',
                    color: '#F9A22E',
                    background: '#F7F7F7',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/master.jpg')
                },
                amex: {
                    id: 'amex',
                    name: 'American Express',
                    color: '#FFFFFF',
                    background: '#60BBE7',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/amex.jpg')
                },
                elo: {
                    id: 'elo',
                    name: 'Elo',
                    color: '#FFFFFF',
                    background: '#555555',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/elo.jpg')
                },
                alelo: {
                    id: 'alelo',
                    name: 'Alelo',
                    color: '#FFFFFF',
                    background: '#C2D724',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/alelo.jpg')
                },
                nubank: {
                    id: 'nubank',
                    name: 'Nubank',
                    color: '#FFFFFF',
                    background: '#AC63B9',
                    integrated: true,
                    image_url: $filter('assetPath')('images/application/credit_cards/nubank.jpg'),
                    authentication_fields: [{
                        name: 'username',
                        type: "text",
                        label: "Cpf",
                        description: "CPF do titular"
                    }, {
                        name: 'password',
                        type: "password",
                        label: "Senha",
                        description: "Senha usada para acessar o site."
                    }]
                },
                digio: {
                    id: 'digio',
                    name: 'Digio',
                    color: '#FFFFFF',
                    background: '#1A3E70',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/digio.jpg')
                },
                aura: {
                    id: 'aura',
                    name: 'Aura',
                    color: '#FFFFFF',
                    background: '#FED54B',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/aura.jpg')
                },
                diners: {
                    id: 'diners',
                    name: 'Diners',
                    color: '#60BBE7',
                    background: '#F7F7F7',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/diners.jpg')
                },
                hipercard: {
                    id: 'hipercard',
                    name: 'Hipercard',
                    color: '#FFFFFF',
                    background: '#E95757',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/hipercard.jpg')
                },
                trigg: {
                    id: 'trigg',
                    name: 'Trigg',
                    color: '#FFFFFF',
                    background: '#58AF9C',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/trigg.jpg')
                },
                default: {
                    id: 'default',
                    name: 'Outros',
                    color: '#D7B244',
                    background: '#F7F7F7',
                    integrated: false,
                    image_url: $filter('assetPath')('images/application/credit_cards/default.jpg')
                }
            };
        }

         /**
         * @ngdoc method
         * @name getEnumsActivityClassification
         * @methodOf zze.utils.constantsFactory
         *
         * @description Returns an array with listing the classification of activities for the Control.
         */
        function getEnumsActivityClassification () {

            return [{
                description: 'Alimentos e Bebidas',
                value: 1
            },{
                description: 'Arte e Antiguidades',
                value: 2
            },{
                description: 'Artigos Religioso',
                value: 3
            },{
                description: 'Assinaturas e Revista',
                value: 4
            },{
                description: 'Automóveis e Veículo',
                value: 5
            },{
                description: 'Bebês e Cia',
                value: 6
            },{
                description: 'Brindes / Materiais Promocionais',
                value: 7
            },{
                description: 'Brinquedos e Games',
                value: 8
            },{
                description: 'Casa e Decoração',
                value: 9
            },{
                description: 'Colecionáveis',
                value: 10
            },{
                description: 'Compras Coletivas',
                value: 11
            },{
                description: 'Construção e Ferramentas',
                value: 12
            },{
                description: 'Cosméticos e Perfumaria',
                value: 13
            },{
                description: 'Cursos e Educação',
                value: 14
            },{
                description: 'Eletrodomésticos',
                value: 15
            },{
                description: 'Eletrônicos',
                value: 16
            },{
                description: 'Emissoras de Rádio',
                value: 17
            },{
                description: 'Emissoras de Televisão',
                value: 18
            },{
                description: 'Empregos',
                value: 19
            },{
                description: 'Empresas de Telemarketing',
                value: 20
            },{
                description: 'Esporte e Lazer',
                value: 21
            },{
                description: 'Flores, Cestas e Presentes',
                value: 22
            },{
                description: 'Fotografias',
                value: 23
            },{
                description: 'Igrejas / Templos / Instituições Religiosas',
                value: 24
            },{
                description: 'Indústria, Comércio e Negócios',
                value: 25
            },{
                description: 'Infláveis Promocionais',
                value: 26
            },{
                description: 'Informática',
                value: 27
            },{
                description: 'Ingressos',
                value: 28
            },{
                description: 'Instrumentos Musicais',
                value: 29
            },{
                description: 'Joalherias',
                value: 30
            },{
                description: 'Lazer',
                value: 31
            },{
                description: 'Livros',
                value: 32
            },{
                description: 'Moda e Acessórios',
                value: 33
            },{
                description: 'Motéis',
                value: 34
            },{
                description: 'Negócios e Oportunidades',
                value: 35
            },{
                description: 'Outros Serviços',
                value: 36
            },{
                description: 'Papelaria e Escritóris',
                value: 37
            },{
                description: 'Pet Shop',
                value: 38
            },{
                description: 'Saúde',
                value: 39
            },{
                description: 'Serviço Advocaticios',
                value: 40
            },{
                description: 'Serviço de Distribuição de Jornais / Revistas',
                value: 41
            },{
                description: 'Serviços Administrativos',
                value: 42
            },{
                description: 'Serviços Artísticos',
                value: 43
            },{
                description: 'Serviços de Abatedouros / Matadouros',
                value: 44
            },{
                description: 'Serviços de Aeroportos',
                value: 45
            },{
                description: 'Serviços de Agências',
                value: 46
            },{
                description: 'Serviços de Aluguel / Locação',
                value: 47
            },{
                description: 'Serviços de Armazenagem',
                value: 48
            },{
                description: 'Serviços de Assessorias',
                value: 49
            },{
                description: 'Serviços de Assistência Técnica / Instalações',
                value: 50
            },{
                description: 'Serviços de Associações',
                value: 51
            },{
                description: 'Serviços de Bancos de Sangue',
                value: 52
            },{
                description: 'Serviços de Bibliotecas',
                value: 53
            },{
                description: 'Serviços de Cartórios',
                value: 54
            },{
                description: 'Serviços de Casas Lotéricas',
                value: 55
            },{
                description: 'Serviços de Confecções',
                value: 56
            },{
                description: 'Serviços de Consórcios',
                value: 57
            },{
                description: 'Serviços de Consultorias',
                value: 58
            },{
                description: 'Serviços de Cooperativas',
                value: 59
            },{
                description: 'Serviços de Despachantes',
                value: 60
            },{
                description: 'Serviços de Engenharias',
                value: 61
            },{
                description: 'Serviços de Estacionamentos',
                value: 62
            },{
                description: 'Serviços de Estaleiro',
                value: 63
            },{
                description: 'Serviços de Exportação / Importação',
                value: 64
            },{
                description: 'Serviços de Geólogo',
                value: 65
            },{
                description: 'Serviços de joalheiro',
                value: 67
            },{
                description: 'Serviços de Leiloeiro',
                value: 67
            },{
                description: 'Serviços de limpeza',
                value: 68
            },{
                description: 'Serviços de Loja de Conveniência',
                value: 69
            },{
                description: 'Serviços de Mão de Obra',
                value: 70
            },{
                description: 'Serviços de Órgão Público',
                value: 71
            },{
                description: 'Serviços de Pesquisa',
                value: 72
            },{
                description: 'Serviços de Porto',
                value: 73
            },{
                description: 'Serviços de Saúde / Bem Esta',
                value: 74
            },{
                description: 'Serviços de Seguradora',
                value: 75
            },{
                description: 'Serviços de Segurança',
                value: 77
            },{
                description: 'Serviços de Sinalização',
                value: 77
            },{
                description: 'Serviços de Sindicatos / Federações',
                value: 78
            },{
                description: 'Serviços de Traduções',
                value: 79
            },{
                description: 'Serviços de Transportes',
                value: 80
            },{
                description: 'Serviços de Utilidade Pública',
                value: 81
            },{
                description: 'Serviços em Agricultura / Pecuária / Piscicultura',
                value: 82
            },{
                description: 'Serviços em Alimentação',
                value: 83
            },{
                description: 'Serviços em Arte',
                value: 84
            },{
                description: 'Serviços em Cine / Foto',
                value: 85
            },{
                description: 'Serviços em Comunicação',
                value: 86
            },{
                description: 'Serviços em Construção',
                value: 87
            },{
                description: 'Serviços em Ecologia / Meio Ambiente',
                value: 88
            },{
                description: 'Serviços em Eletroeletrônica / Metal Mecânica',
                value: 89
            },{
                description: 'Serviços em Festas / Eventos',
                value: 90
            },{
                description: 'Serviços em Informática',
                value: 91
            },{
                description: 'Serviços em Internet',
                value: 92
            },{
                description: 'Serviços em Jóias / Relógios / Óticas',
                value: 93
            },{
                description: 'Serviços em Telefonia',
                value: 94
            },{
                description: 'Serviços em Veículos',
                value: 95
            },{
                description: 'Serviços Esotéricos / Místicos',
                value: 96
            },{
                description: 'Serviços Financeiros',
                value: 97
            },{
                description: 'Serviços Funerários',
                value: 98
            },{
                description: 'Serviços Gerais',
                value: 99
            },{
                description: 'Serviços Gráficos / Editoriais',
                value: 100
            },{
                description: 'Serviços para Animais',
                value: 101
            },{
                description: 'Serviços para Deficientes',
                value: 102
            },{
                description: 'Serviços para Escritórios',
                value: 103
            },{
                description: 'Serviços para Roupas',
                value: 104
            },{
                description: 'Serviços Socias / Assistenciais',
                value: 105
            },{
                description: 'Sex Shop',
                value: 106
            },{
                description: 'Shopping Center',
                value: 107
            },{
                description: 'Tabacaris',
                value: 108
            },{
                description: 'Tarifas Bancárias',
                value: 109
            },{
                description: 'Tarifas Telefônicas',
                value: 110
            },{
                description: 'Telefonias',
                value: 111
            },{
                description: 'Turismos',
                value: 11
            }];
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.utils
     */
    angular.module('zze.utils')

        /**
         * @ngdoc service
         * @name zze.utils.dateFactory
         *
         * @description Date utilities.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var dateFactory = $injector.get('zze.utils.dateFactory');
         *
         *                 var receive = dateFactory.nameIsMethod();
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        .factory('zze.utils.dateFactory', StringProcessFactory);

    function StringProcessFactory () {

        var publicMethods = {
            formatDate: formatDate,
            formatTime: formatTime,

            getFirstDayMounth: getFirstDayMounth,
            getLastDayMounth: getLastDayMounth,

            getDateNow: getDateNow
        };

        return publicMethods;

        /**
         * @ngdoc method
         * @name formatDate
         * @methodOf zze.utils.dateFactory
         *
         * @description Format date to BRL.
         *
         * @param {string} date Date to format.
         * @returns {string} Return date formated in BRL.
         */
        function formatDate (date) {

            if (!date) {
                return;
            }

            return moment(date).format('DD/MM/YYYY');
        }

        /**
         * @ngdoc method
         * @name formatTime
         * @methodOf zze.utils.dateFactory
         *
         * @description Format time to BRL.
         *
         * @param {string} date Date to format.
         *
         * @returns {string} Return time formated in BRL.
         */
        function formatTime (date) {

            if (!date) {
                return;
            }

            return moment(date).format('HH:mm');
        }

        /**
         * @ngdoc method
         * @name getFirstDayMounth
         * @methodOf zze.utils.dateFactory
         *
         * @description Search the first day of the month according to the date entered.
         *
         * @param {string} date Date for search reference.
         * @returns {string} Returns the first day of the month.
         */
        function getFirstDayMounth (date) {

            if (!date) {
                return;
            }

            return moment(date).startOf('month').format('YYYY-MM-DD');
        }

        /**
         * @ngdoc method
         * @name getLastDayMounth
         * @methodOf zze.utils.dateFactory
         *
         * @description Search the last day of the month according to the date entered.
         *
         * @param {string} date Date for search reference.
         * @returns {string} Returns the last day of the month.
         */
        function getLastDayMounth (date) {

            if (!date) {
                return;
            }

            return moment(date).endOf('month').format('YYYY-MM-DD');
        }

        /**
         * @ngdoc method
         * @name getTimeNow
         * @methodOf zze.utils.dateFactory
         *
         * @description Get the current time.
         *
         * @returns {string} Returns current time.
         */
        function getDateNow () {
            return moment();
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.utils
     */
    angular.module('zze.utils')
        .factory('zze.utils.focusFactory', focusFactory);

    /**
     * @ngdoc service
     * @name zze.utils.focusFactory
     *
     * @description Utility methods for the controler focus in elements.
     *
     * @example
     * <example module="zze">
     *     <pre>
     *         (function () {
     *
     *             'use strict';
     *
     *             angular.module('zze')
     *                 .controller('myController', myController);
     *
     *             myController.$inject = ['$injector'];
     *
     *             function myController ($injector) {
     *                 var FocusFactory = $injector.get('zze.utils.focusFactory');
     *
     *                 FocusFactory.setFocus('#id-element-recept-focus');
     *             }
     *         })();
     *     </pre>
     * <example>
     */

    focusFactory.$inject = ['$injector'];

    function focusFactory ($injector) {
        var publicMethods = {
            /**
             * @ngdoc method
             * @name setFocus
             * @methodOf zze.utils.focusFactory
             *
             * @param {string} query Query element recept focus.
             *
             * @description Set focus in query informed.
             */
            setFocus: setFocus
        };

        return publicMethods;

        function setFocus (query) {
            var $timeout = $injector.get('$timeout');

            return $timeout(function () {
                var element = $(query);

                if (element.hasClass('zze-selectize')) {
                    element = $(query + '-selectized');
                }

                if (!element[0]) {
                    return;
                }

                element[0].focus();
            }, 100);
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.utils
     */
    angular.module('zze.utils')

        /**
         * @ngdoc service
         * @name zze.utils.generalFactory
         *
         * @description Set of utilities for the purpose of reusing processes.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var generalFactory = $injector.get('zze.utils.generalFactory');
         *
         *                 var receive = generalFactory.isEmptyObj(myObj);
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        .factory('zze.utils.generalFactory', StringProcessFactory);

    function StringProcessFactory () {

        var publicMethods = {
            isEmptyObj: isEmptyObj,
            getOnlyNumbers: getOnlyNumbers
        };

        return publicMethods;

        /**
         * @ngdoc method
         * @name isEmptyObj
         * @methodOf zze.utils.generalFactory
         *
         * @description Checks if an object is empty.
         *
         * @param {obj} obj Object to be analyzed.
         * @returns {boolean} Return has empty.
         */
        function isEmptyObj (obj) {

            var isEmpty = true;

            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    isEmpty = false;
                    break;
                }
            }

            return isEmpty;
        }

        /**
         * @ngdoc method
         * @name getOnlyNumbers
         * @methodOf zze.utils.generalFactory
         *
         * @description Receives a string and removes all characters other than numbers.
         *
         * @param {string} value String to be manipulated.
         *
         * @returns {number} Return only number.
         */
        function getOnlyNumbers (value) {
            if (!value) {
                return;
            }

            var _value = value.toString();

            return _value.replace(/[^\d]/g, '');
        }
    }

})();

/**
 * Created by selinger on 18/09/17.
 */
(function () {

    'use strict';

    // TODO: Please, create test unit.

    /**
     * @ngdoc overview
     * @name zze.utils
     */
    angular.module('zze.utils')

        /**
         * @ngdoc service
         * @name zze.utils.storageFactory
         *
         * @description Controls the records saved in localStorage and sessionStorage.
         *
         * @example
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var StorageFactory = $injector.get('zze.utils.storageFactory');
         *
         *                 StorageFactory.methodName('key');
         *             }
         *         })();
         *     </pre>
         */
        .factory('zze.utils.storageFactory', storageFactory);

    function storageFactory () {
        var publicMethods = {
            getLocal: getLocal,
            setLocal: setLocal,
            removeLocal: removeLocal,

            getSession: getSession,
            setSession: setSession,
            removeSession: removeSession,

            checkCookie: checkCookie,
            getCookie: getCookie,
            setCookie: setCookie
        };

        return publicMethods;

        /**
         * @ngdoc method
         * @name getLocal
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Registry key saved in _storage_.
         * @param {boolean} convertNumber Informs that the redeemed amount will be converted into a number.
         *                  Value default is _false_.
         *
         * @description Retrieves logging saved on localStorage.
         *
         * @example
         *     <pre>
         *         StorageFactory.getLocal('KEY_LOCAL_STORAGE', true);
         *     </pre>
         *
         * @returns {string/number} Can return a _string_ or _numeric_ value.
         */
        function getLocal (key, convertNumber) {

            if (convertNumber) {
                return Number(localStorage.getItem(key));
            }

            return localStorage.getItem(key);
        }

        /**
         * @ngdoc method
         * @name getSession
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Registry key saved in _storage_.
         * @param {boolean} convertNumber Informs that the redeemed amount will be converted into a number.
         *                  Value default is _false_.
         *
         * @description Retrieves logging saved on sessionStorage.
         *
         * @example
         *     <pre>
         *         StorageFactory.getSession('KEY_SESSION_STORAGE', true);
         *     </pre>
         *
         * @returns {string/number} Can return a _string_ or _numeric_ value.
         */
        function getSession (key, convertNumber) {

            if (convertNumber) {
                return Number(sessionStorage.getItem(key));
            }

            return sessionStorage.getItem(key);
        }

        /**
         * @ngdoc method
         * @name setLocal
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Key to saved in _storage_.
         * @param {any} value Value that will be saved in _storage_.
         *
         * @description Saves a new record in _storage_.
         *
         * @example
         *     <pre>
         *         StorageFactory.setLocal('KEY_LOCAL_STORAGE', 'MY_VALUE');
         *     </pre>
         */
        function setLocal (key, value) {
            localStorage.setItem(key, value);
        }

        /**
         * @ngdoc method
         * @name setSession
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Key to saved in _storage_.
         * @param {any} value Value that will be saved in _storage_.
         *
         * @description Saves a new record in _storage_.
         *
         * @example
         *     <pre>
         *         StorageFactory.setSession('KEY_SESSION_STORAGE', 'MY_VALUE');
         *     </pre>
         */
        function setSession (key, value) {
            sessionStorage.setItem(key, value);
        }

        /**
         * @ngdoc method
         * @name removeLocal
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Registry key that will be removed from _storage_.
         *
         * @description Removes a record from _storage_.
         *
         * @example
         *     <pre>
         *         StorageFactory.removeLocal('KEY_LOCAL_STORAGE');
         *     </pre>
         */
        function removeLocal (key) {
            localStorage.removeItem(key);
        }

        /**
         * @ngdoc method
         * @name removeSession
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Registry key that will be removed from _storage_.
         *
         * @description Removes a record from _storage_.
         *
         * @example
         *     <pre>
         *         StorageFactory.removeLocal('KEY_SESSION_STORAGE');
         *     </pre>
         */
        function removeSession (key) {
            sessionStorage.removeItem(key);
        }

         /**
         * @ngdoc method
         * @name checkCookie
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Key value to be verify.
         *
         * @description Check if the key is already set on cookie.
         *
         * @example
         *     <pre>
         *         StorageFactory.checkCookie('KEY_COOKIE');
         *     </pre>
         */
        function checkCookie(cookie) {
            var cookieUsed = getCookie(cookie);
            return (cookieUsed !== "");
        }

        /**
         * @ngdoc method
         * @name setCookie
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Key value to be set on cookie.
         *
         * @description Set an especific key on cookie.
         *
         * @example
         *     <pre>
         *         StorageFactory.setCookie('KEY_COOKIE');
         *     </pre>
         */
        function setCookie(cookieKey) {
            document.cookie = cookieKey;
        }

        /**
         * @ngdoc method
         * @name getCookie
         * @methodOf zze.utils.storageFactory
         *
         * @param {string} key Key value to be verify.
         *
         * @description Get an especific key on cookie.
         *
         * @example
         *     <pre>
         *         StorageFactory.setCookie('KEY_COOKIE');
         *     </pre>
         */
        function getCookie(cookieKey) {
            var name = cookieKey + "=";
            var ca = document.cookie.split(';');

            for(var i = 0; i < ca.length; i++) {
              var c = ca[i];
              while (c.charAt(0) === ' ') {
                c = c.substring(1);
              }

              if (c.indexOf(name) === 0) {
                return c.substring(name.length, c.length);
              }
            }
            return "";
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.utils
     */
    angular.module('zze.utils')

        /**
         * @ngdoc service
         * @name zze.utils.stringProcessFactory
         *
         * @description Utility methods for the process and treatment strings.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var StringsFactory = $injector.get('zze.utils.stringProcessFactory');
         *
         *                 var string = StringsFactory.stringReplace('My-String-On-Here', '-', ' ');
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        .factory('zze.utils.stringProcessFactory', StringProcessFactory);

    function StringProcessFactory () {
        var publicMethods = {
            stringReplace: stringReplace,
            stringExplode: stringExplode,
            stringConcat: stringConcat,
            checkZero: checkZero,
            checkParamUrl: checkParamUrl,
            cleanParamsUrl: cleanParamsUrl,
            stringCapitalize: stringCapitalize
        };

        return publicMethods;

        /**
         * @ngdoc method
         * @name stringReplace
         * @methodOf zze.utils.stringProcessFactory
         *
         * @param {string} string String that will be processed.
         * @param {string} charOud Character to be replaced.
         * @param {strong} charNew New character.
         *
         * @description It takes a string and replace one character with another. Return string the replace aplicated.
         *
         * <pre>StringProcessFactory.stringReplace('04/12/1991', '/', '-')</pre>
         */
        function stringReplace (str, charOut, charNew) {
            if (str === undefined || charOut  === undefined || charNew  === undefined) {
                return;
            }

            return str.replace(charOut, charNew);
        }

        /**
         * @ngdoc method
         * @name stringExplode
         * @methodOf zze.utils.stringProcessFactory
         *
         * @param {string} string String that will be explode.
         * @param {string} charSplit Character to be explode.
         *
         * @description It takes a string and explode one character with another. Return _Array_ exploded.
         *
         * <pre>StringProcessFactory.stringExplode('04/12/1991', '/')</pre>
         */
        function stringExplode (str, charSplit) {
            if (str === undefined || charSplit === undefined) {
                return;
            }

            return str.split(charSplit);
        }

        /**
         * @ngdoc method
         * @name stringConcat
         * @methodOf zze.utils.stringProcessFactory
         *
         * @param {array} arr Array with strings that will be unified.
         *
         * @description Concat strings and ignore empty values.
         *
         * <pre>StringProcessFactory.stringConcat(['Texto 1', 'Texto 2', 'Texto 3'])</pre>
         */
        function stringConcat (arr) {
            return _.filter(arr).join(', ');
        }

        /**
         * @ngdoc method
         * @name checkZero
         * @methodOf zze.utils.stringProcessFactory
         *
         * @param {string|number} string String or Number that will be checked.
         *
         * @description Checks if the given value is less than 10 to add a leading zero.
         *
         * <pre>StringProcessFactory.checkZero(7)</pre>
         */
        function checkZero (value) {
            if (!value) {
                return;
            }

            return value < 10 ? ('0' + value) : value;
        }

        /**
         * @ngdoc method
         * @name checkParamUrl
         * @methodOf zze.utils.stringProcessFactory
         *
         * @param {string} string String with name param checked.
         *
         * @description Checks if the url exists the parameter entered and returns its value.
         */
        function checkParamUrl (param) {

            var params = window.location.search.substring(1).split("&");

            for (var i = 0, len = params.length; i < len; i++) {
                var splitParam = params[i].split("=");

                if (splitParam[0] === param) {
                    return splitParam[1];
                }
            }
        }

        /**
         * @ngdoc method
         * @name cleanParamsUrl
         * @methodOf zze.utils.stringProcessFactory
         *
         * @description Clean the url parameters when they are of the _www.organizze.com.br/1/a/contas?param=value_.
         */
        function cleanParamsUrl () {

            var url = window.location.href.split('?');

            if (url.length > 1) {
                // No conflict animations dialogs.
                setTimeout(function () {
                    window.history.pushState(null, null, url[0]);
                }, 100);
            }
        }

        /**
         * @ngdoc method
         * @name stringCapitalize
         * @methodOf zze.utils.stringProcessFactory
         *
         * @param {str} str String that will be capitalized.
         *
         * @description Capitalize the received string.
         */
        function stringCapitalize(str) {
            return (!!str) ? str.charAt(0).toUpperCase() + str.substr(1).toLowerCase() : "";
        }

    }

})();

/**
 * Created by selinger on 11/10/17.
 */

(function () {

    'use strict';

    /**
     * @ngdoc service
     * @name zze.commons.cropImageFactory
     *
     * @description Services to manage the upload of avatars.
     *
     * @example
     *     <pre>
     *         (function () {
     *
     *             'use strict';
     *
     *             angular.module('zze')
     *                 .controller('myController', myController);
     *
     *             myController.$inject = ['$injector'];
     *
     *             function myController ($injector) {
     *                 // Inject factory in you Ctrl.
     *                 var CropImageFactory = $injector.get('zze.commons.cropImageFactory');
     *             }
     *         })();
     *     </pre>
     */
    angular.module('zze.commons')
        .factory('zze.commons.cropImageFactory', cropImageFactory);

    cropImageFactory.$inject = ['$injector'];

    function cropImageFactory ($injector) {

        var $filter = $injector.get('$filter'),

            Dialog = $injector.get('ngDialog'),

            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory');

        var publicMethos = {
            open: open
        };

        return publicMethos;

        /**
         * @ngdocc method
         * @name open
         * @methodOf zze.commons.cropImageFactory
         *
         * @description Open Dialog to upload and adjust avatar settings.
         *
         * @param {object} settings Object with settings to open _Crop Image_.
         *     @param {object} settings.scope Scopo of the parent controller, _Crop Image_ call source.
         *     @param {object} settings.item If you need to register in the Crop Image callback, pass it here.
         *     @param {string} settings.ctrl Source View Controller.
         *     @param {string} settings.callback Method that will be executed as callback after the
         *                             completion of Crop Image. This method must be in the source controller.
         *     @param {string} settings.dir Name of the directory that will be added the avatar in S3.
         *     @param {string} settings.key Identification key for the construction of the avatar url.
         *
         * @example
         *     <pre>
         *         function showDialogCropImage (item) {
         *             CropImageFactory.open({
         *                 scope: $scope,
         *                 item: item,
         *                 ctrl: 'nameCtrlOrigin',
         *                 callback: 'callbackCropImage',
         *
         *                 // 'https://s3.amazonaws.com/uploads/DIR/KEY/avatars/avatar.jpg'
         *                 dir: 'usersExemple',
         *                 key: item.id
         *             })
         *         };
         *     </pre>
         */
        function open (settings) {

            Dialog.open({
                template: $filter('assetPath')('templates/commons/crop-image/templates/crop-image.dialog.html'),
                controller: 'zze.commons.CropImageCtrl',
                controllerAs: 'crop',
                scope: settings.scope,
                width: 500,

                className: 'ngdialog theme-organizze zze-component_crop-image-extend',
                closeByDocument: false,

                data: {
                    item: settings.item,
                    options: {
                        ctrl: settings.ctrl,
                        callback: settings.callback,

                        // 'uploads/DIR/KEY/avatars/avatar.jpg'
                        dir: settings.dir,
                        key: settings.key
                    }
                },

                resolve: {
                    s3UploadResponse: function () {
                        var url = ContextFactory.getEndPoint('s3_upload_options', 'enums');

                        return CrudFactory.getAll(url);
                    }
                }
            });
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.highcharts')
        .factory('zze.highcharts.highchartsFactory', highchartsFactory);

    highchartsFactory.$inject = ['$injector'];

    function highchartsFactory ($injector) {
        var CurrencyFactory = $injector.get('zze.commons.currencyFactory'),

            publicMethods = {
                createStructureDataColumn: createStructureDataColumn,
                createStructureLabelColumn: createStructureLabelColumn,

                createStructureDataPie: createStructureDataPie,
                createStructureDataBalance: createStructureDataBalance,

                getConfigDefaultBalance: getConfigDefaultBalance,
                getConfigDefaultColumn: getConfigDefaultColumn,

                startGraphic: startGraphic
            };

        return publicMethods;

        function createStructureDataPie (data) {
            var seriesData = [];

            for (var i = 0, len = data.length; i < len; i++) {
                var item = {
                    /* jshint camelcase:false */
                    activity_type: "outcome",
                    color: data[i].color,
                    name: data[i].label,
                    title: data[i].label,
                    y: data[i].value

                };

                seriesData.push(item);
            }

            return seriesData;
        }

        function createStructureDataBalance (data) {
            var seriesData = [];

            for (var i = 0, len = data.length; i < len; i++) {
                var item = {
                    y: data[i].amount,
                    title: data[i].title,
                    marker: {
                        fillColor: data[i].amount < 0 ? "#EA494C" : "#64D6FE",
                        lineColor: "#FFFFFF",
                        states: {
                            hover: {
                                fillColor: "#FFFFFF",
                                lineColor: data[i].amount < 0 ? "#EA494C" : "#64D6FE"
                            }
                        }
                    }
                };

                seriesData.push(item);
            }

            return seriesData;
        }

        function createStructureDataColumn (data) {
            var seriesData = [],
                series = data !== undefined ? data.series[0].data : [];

            for (var i = 0; i <= (series.length - 1); i++ ) {
                /* jshint camelcase:false */
                var item = {
                    color: data !== undefined ? data.series[0].data[i].color : '#5AD4AB',
                    title: series[i].title,
                    y: series[i].y
                };

                seriesData.push(item);
            }

            return seriesData;
        }

        function createStructureLabelColumn (data) {
            /* jshint camelcase:false */
            var seriesLabel = [],
                labels = data !== undefined ? data.labels : [];

            for (var i = 0; i <= (labels.length - 1); i++ ) {
                seriesLabel.push(labels[i]);
            }

            return seriesLabel;
        }

        function getConfigDefaultBalance (config) {
            return _.extend({
                credits: false,
                chart: {
                    defaultSeriesType: 'area',
                    backgroundColor: 'transparent',
                    height: 90,
                    marginTop: 0,
                    marginRight: 0,
                    marginBottom: 0,
                    marginLeft: 0
                },
                series: [{
                    color: "#64D6FE",
                    negativeColor: "#EA494C",
                    lineWidth: 1.2,
                    marker: {
                        lineWidth: 1.2,
                        enabled: true,
                        symbol: "circle",
                        radius: 4,
                        states: {
                            hover: {
                                enabled: true,
                                lineWidth: 2,
                                radius: 5
                            }
                        }
                    },
                    data: []
                }],
                xAxis: {
                    categories: [],
                    lineWidth: 0,
                    minorGridLineWidth: 0,
                    lineColor: 'transparent',
                    labels: {
                        style: {
                            color: '#B4B9C1',
                            font: '11px/20px CircularStd;',
                            textTransform: 'lowercase'
                        },
                        autoRotation: 0
                    },
                    minorTickLength: 0,
                    tickLength: 0
                },
                yAxis: {
                    gridLineColor: 'transparent',
                    labels: {
                        enabled: false
                    },
                    title: {
                        text: null
                    }
                },
                title: {
                    text: null
                },
                legend: {
                    enabled: false
                },
                plotOptions: {
                    series: {
                        fillOpacity: 0.3
                    }
                },
                exporting: {
                    enabled: false
                },
                tooltip: {
                    shared: false,
                    useHTML: true,
                    borderWidth: 0,
                    borderRadius: 0,
                    backgroundColor: 'transparent',
                    valuePrefix: 'R$ ',
                    valueDecimals: 2,
                    shadow: false,
                    zIndex: 99999999,
                    formatter: function () {
                        return '<div class="zze-highcharts-tooltip zze-balance">' +
                            '<div class="zze-tooltip-content">' +
                            '<span>' + this.point.title + '</span>' +
                            '<small>' + CurrencyFactory.getCurrencyMasked(this.point.y, config.settings.currency, true, 2) + '</small>' +
                            '</div>' +
                            '</div>';
                    }
                }
            }, config.settings);
        }

        function getConfigDefaultColumn (config) {
            return _.extend({
                chart: {
                    type: 'column'
                },
                plotOptions: {
                    series: {
                        pointWidth: 20
                    }
                },
                title: {
                    text: null
                },
                legend: { enabled: false },
                credits: { enabled: false },
                exporting: { enabled: false },
                xAxis: {
                    categories: ['a','b', 'c']
                },
                yAxis: {
                    labels: {
                        enabled: false
                    },
                    title: {
                        text: null
                    }
                },
                series: [{
                    name: 'Lançamentos',
                    data: [10,30,50]
                }]
            }, config.settings);
        }

        function startGraphic (type, chart) {
            Charts[type] = new Highcharts.Chart(chart);
        }
    }
})();
(function () {

    'use strict';

    angular.module('zze.commons')
        .factory('zze.commons.navPeriodsFactory', navPeriodsFactory);

    navPeriodsFactory.$inject = ['$injector'];

    function navPeriodsFactory ($injector) {
        var $filter = $injector.get('$filter'),
            publicMethods = {
                showPeriodSelected: showPeriodSelected,
                checkPeriodSelected: checkPeriodSelected
            };

        return publicMethods;

        /**
         * @name showPeriodSelected
         * @methodOf zze.commons.navPeriodsFactory
         *
         * @description Mounts text display in navegation periods.
         *
         * @param {string} ctrl Name of main controller.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var PeriodsFactory = $injector.get('zze.commons.navPeriodsFactory');
         *
         *                 PeriodsFactory.showPeriodSelected('nameController');
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        function showPeriodSelected (settings) {
            var startDate = settings.startDate,
                endDate = settings.endDate,
                dateFormat = null;

            if (_checkIsMonth(startDate, endDate)) {
                dateFormat = $filter('translate')('periods_dropdown.dateFormats.monthAndYear');
            }

            if (_checkIsDay(startDate, endDate)) {
                dateFormat = 'D MMM YYYY';
            }

            if (_checkIsYear(startDate, endDate)) {
                dateFormat = 'YYYY';
            }

            if (dateFormat !== null) {
                return moment(startDate).format(dateFormat);
            }

            dateFormat = $filter('translate')('periods_dropdown.dateFormats.dayAndMonth');
            startDate = moment(startDate).format(dateFormat).toLowerCase();
            endDate = moment(endDate).format(dateFormat).toLowerCase();
            return $filter('translate')('periods_dropdown.startDateEndDateRange', {startDate: startDate, endDate: endDate});
        }

        /**
         * @name checkPeriodSelected
         * @methodOf zze.commons.navPeriodsFactory
         *
         * @description Check dates selected and identify the type.
         *
         * @param {string} startDate Date start filters.
         * @param {string} startEnd Date end filters.
         *
         * @example
         * <example module="zze">
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('myController', myController);
         *
         *             myController.$inject = ['$injector'];
         *
         *             function myController ($injector) {
         *                 var PeriodsFactory = $injector.get('zze.commons.navPeriodsFactory');
         *
         *                 PeriodsFactory.checkPeriodSelected('2017-01-16', '2017-01-21');
         *             }
         *         })();
         *     </pre>
         * <example>
         */
        function checkPeriodSelected (startDate, endDate) {

            if (_checkIsMonth(startDate, endDate)) {
                return 'month';
            }

            if (_checkIsMonthInterval(startDate, endDate)) {
                return 'monthInterval';
            }

            if (_checkIsWeek(startDate, endDate)) {
                return 'week';
            }

            if (_checkIsDay(startDate, endDate)) {
                return 'day';
            }

            if (_checkIsYear(startDate, endDate)) {
                return 'year';
            }

            return 'custom';
        }

        /**
         * @name setDateStorage
         * @methodOf zze.commons.navPeriodsFactory
         *
         * @description Check if a dates settings is day.
         *
         * @param {string} startDate Date start filter transaction in sessionStorage.
         * @param endDate Date end filter transaction in sessionStorage.
         *
         * @private
         */
        function _checkIsDay (startDate, endDate) {
            return startDate === endDate;
        }

        /**
         * @name _checkIsWeek
         * @methodOf zze.commons.navPeriodsFactory
         *
         * @description Check if a dates settings is week.
         *
         * @param {string} startDate Date start filter transaction in sessionStorage.
         * @param endDate Date end filter transaction in sessionStorage.
         *
         * @private
         */
        function _checkIsWeek (startDate, endDate) {
            var firstWeek = moment(startDate).startOf('week').format('YYYY-MM-DD'),
                lastWeek = moment(startDate).endOf('week').format('YYYY-MM-DD');

            return startDate === firstWeek && endDate === lastWeek;
        }

        /**
         * @name _checkIsMonth
         * @methodOf zze.commons.navPeriodsFactory
         *
         * @description Check if a dates settings is month.
         *
         * @param {string} startDate Date start filter transaction in sessionStorage.
         * @param endDate Date end filter transaction in sessionStorage.
         *
         * @private
         */
        function _checkIsMonth (startDate, endDate) {
            var firstDay = moment(startDate).startOf('month').format('YYYY-MM-DD'),
                lastDay = moment(startDate).endOf('month').format('YYYY-MM-DD');

            return startDate === firstDay && endDate === lastDay;
        }

        /**
         * @name _checkIsMonthInterval
         * @methodOf zze.commons.navPeriodsFactory
         *
         * @description Check if a dates settings is month interval.
         *
         * @param {string} startDate Date start filter transaction in sessionStorage.
         * @param endDate Date end filter transaction in sessionStorage.
         *
         * @private
         */
        function _checkIsMonthInterval (startDate, endDate) {
            var firstDay = moment(startDate).format('DD'),
                lastDay = moment(endDate).format('DD');

            return !_checkIsDay(startDate, endDate) && firstDay === lastDay;
        }

        function _checkIsYear (startDate, endDate) {
            var firstDay = moment(startDate).startOf('year').format('YYYY-MM-DD'),
                lastDay = moment(startDate).endOf('year').format('YYYY-MM-DD');

            return startDate === firstDay && endDate === lastDay;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.budgets')
        .factory('zze.budgets.budgetsFactory', budgetsFactory);

    budgetsFactory.$inject = ['$injector'];

    function budgetsFactory($injector) {
        var CurrencyFactory = $injector.get('zze.commons.currencyFactory'),
            $filter = $injector.get('$filter'),

            publicMethods = {
                getMarkDay: getMarkDay,
                getCurrencyMasked: getCurrencyMasked,
                getFormatedDate: getFormatedDate,

                getProgressClass: getProgressClass,
                getProgressPercentage: getProgressPercentage,
                getProgressDaySize: getProgressDaySize,
                getProgressFutureSize: getProgressFutureSize,
                getFirstDayMounthCurrent: getFirstDayMounthCurrent,
                getLastDayMounthCurrent: getLastDayMounthCurrent,
                getBalancePredictedDayly: getBalancePredictedDayly,
                getBalancePredictedWeekly: getBalancePredictedWeekly,
                getBalancePredictedMonthly: getBalancePredictedMonthly,

                getBudgetFake: getBudgetFake,
                getBudgetTransactionsFake: getBudgetTransactionsFake
            };

        return publicMethods;

        function getMarkDay(dateServer) {
            var day = moment(dateServer).format('D'),
                daysMounth = moment(dateServer).endOf('month').format('D');

            return ((day / daysMounth) * 93) + 7 + '%';
        }

        function getFormatedDate(date, mask) {
            return moment(date).format(mask);
        }

        function getFirstDayMounthCurrent(dateServer) {
            return moment(dateServer).startOf('month').format('YYYY-MM-DD');
        }

        function getLastDayMounthCurrent(dateServer) {
            return moment(dateServer).endOf('month').format('YYYY-MM-DD');
        }

        function getProgressClass(type, item) {
            // Default is type === 'day'
            var percentage = getProgressPercentage(item.budget.currentValueView, item.budget.valueView);

            if (type === 'future') {
                percentage = getProgressPercentage(item.budget.predictedValueView, item.budget.valueView);
            }

            if (percentage <= 50) {
                return item.type === 'expenses' ? 'zze-bar-green' : 'zze-bar-yellow';
            } else if (percentage >= 100) {
                return item.type === 'expenses' ? 'zze-bar-red' : 'zze-bar-green';
            } else {
                return 'zze-bar-yellow';
            }
        }

        function getProgressPercentage(n1, n2) {
            if (n1 === 0 && n2 === 0) {
                return 0;
            }

            return (n1 / n2) * 100;
        }

        function getProgressDaySize(item) {
            var size = getProgressPercentage(item.budget.currentValueView, item.budget.valueView) > 100 ? 100 : getProgressPercentage(item.budget.currentValueView, item.budget.valueView);

            return {
                width: size + '%'
            };
        }

        function getProgressFutureSize(item) {
            var size = getProgressPercentage(Number(item.budget.predictedValueView), Number(item.budget.valueView)) > 100 ? 100 : getProgressPercentage(Number(item.budget.predictedValueView), Number(item.budget.valueView));

            return {
                width: size + '%'
            };
        }

        function getBalancePredictedDayly(item, dateServer, contextSourceCurrency) {
            var budget = item.budget.value,
                budgetCurrent = item.budget.currentValue,
                daysRemaining = _getDaysRemaining(dateServer),
                calc = daysRemaining !== 0 ? (budget - budgetCurrent) / daysRemaining : 0,
                result = calc < 0 ? 0 : calc;

            return getCurrencyMasked(result, contextSourceCurrency, true);
        }

        function getBalancePredictedWeekly(item, dateServer, contextSourceCurrency) {

            var firstDate = dateServer,
                lastDate = moment(getLastDayMounthCurrent(dateServer)),
                weeks = Math.ceil(lastDate.diff(firstDate, 'weeks', true)),
                money = item.budget.value - item.budget.currentValue,
                calc = weeks !== 0 ? money / weeks : 0,
                result = calc < 0 ? 0 : calc;

            return getCurrencyMasked(result, contextSourceCurrency, true);
        }

        function getBalancePredictedMonthly(item, contextSourceCurrency) {

            var money = item.budget.value - item.budget.currentValue,
                result = money < 0 ? 0 : money;

            return getCurrencyMasked(result, contextSourceCurrency, true);
        }

        function getCurrencyMasked(value, contextSourceCurrency, symbol) {
            return CurrencyFactory.getCurrencyMasked(value, contextSourceCurrency, symbol);
        }

        function getBudgetFake() {
            return [{
                id: 101,
                name: $filter('translate')('base.loading'),
                parentId: null,
                icon: 'loading',
                budget: {
                    value: 0,
                    currentValue: 0,
                    predictedValue: 0
                },
                children: []
            }];
        }

        function getBudgetTransactionsFake() {
            /* jshint camelcase:false */
            return [{
                date: '2017-08-02',
                description: 'carregando....................',
                amount_in_cents: '0000.00'
            }];
        }

        function _getDaysRemaining(dateServer) {
            var day = moment(dateServer).format('D'),
                daysMounth = moment(dateServer).endOf('month').format('D');

            return daysMounth - day;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.credit-cards')
        .factory('zze.credit-cards.creditCardsFactory', creditCardsFactory);

    creditCardsFactory.$inject = ['$injector'];

    function creditCardsFactory () {
        var publicMethods = {
            getDataFake: getDataFake
        };

        return publicMethods;

        function getDataFake () {
            /*jshint camelcase: false */
            return [{
                'id': 0,
                'uuid': '29f93048b1081da7640debc66d041f720e42c302',
                'name': 'Nubank',
                'limit': 0,
                'flag': 'nubank',
                'amount_available': 0
            }];
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.dashboard')
        .factory('zze.dashboard.dashboardFactory', dashboardFactory);

    function dashboardFactory () {
        const SET_SHOW_BALANCE = 0,
              SET_HIDE_BALANCE = 1;

        var publicMethods = {
            SET_SHOW_BALANCE: SET_SHOW_BALANCE,
            SET_HIDE_BALANCE: SET_HIDE_BALANCE,
            getDataFake: getDataFake
        };

        return publicMethods;

        //console - Datafake, que faz o efeito de shimmer la no primeiro widget
        function getDataFake () {
            return [{
                'currencySymbol': "R$",
                'currentBalance': "00.000,00",
                'greeting': "Bom dia",
                'greetingImage': "http://localhost:8080/images/application/dashboard/morning-a0414711f8.png",
                'userName': "conta de usuário"
            }];
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.finhub')
        .factory('zze.finhub.finhubSteps', finhubSteps);

    function finhubSteps () {
        var _steps = [];

        var publicMethods = {
                steps: steps,
                reset: reset,
                pushStep: pushStep,
                popStep: popStep,
                currentStep: currentStep,
                shouldShowBackButton: shouldShowBackButton
            };

        return publicMethods;

        function reset () {
            _steps = [];
        }

        function pushStep (step) {
            _steps.push(step);
        }

        function steps () {
            return _steps;
        }

        function popStep () {
            _steps.pop();
        }

        function currentStep () {
            return _steps[_steps.length-1];
        }

        function shouldShowBackButton () {
            return _steps.length > 1;
        }
    }
})();

/**
 * Created by selinger on 14/11/17.
 */
(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.permissions
     */
    angular.module('zze.permissions')
        .factory('zze.permissions.permissionsFactory', permissionsFactory);

    permissionsFactory.$inject = ['$injector'];

    /**
     * @ngdoc service
     * @name zze.permissions.permissionsFactory
     *
     * @description Services for controlling permissions in controllers, services, directives, filters.
     *
     * **Nota:** It is not allowed to hide action elements like links or buttons, instead add this validator in the methods
     *           that are called, to allow the action if the user can execute it or to display the access denied message.
     *
     * <pre>
     *     // To condition elements in the view according to the permissions, use the following
     *     // method informing the state and the actions, being:
     *     // create, edit, delete, balance or read. Return _Boolean_.
     *
     *     <div ng-if="main.checkPermissionView('state', ['action'])">
     *         // Contente
     *     </div>
     * </pre>
     */
    function permissionsFactory ($injector) {

        var $q              = $injector.get('$q'),

            MainFactory = $injector.get('zze.mainFactory'),

            publicMethods = {
                isAllowedAccess: isAllowedAccess,
                checkAccessAction: checkAccessAction
            },

            IS_CONTROLLE     = window.Context.product === 'empresas' ||
                               window.Context.product === 'controlle',
            USER_ROLE        = window.Context.currentUser.role,
            USER_PERMISSIONS = window.Context.currentUser.permissions;

        return publicMethods;

        /**
         * @ngdoc method
         *
         * @name isAllowedAccess
         * @methodOf zze.permissions.permissionsFactory
         *
         * @description This method is used to validate the access permission on the system route. Add the validation
         *              in _zze.route.js_ as shown below.
         *
         * @param {String} state This state must be the key of the permissions object available at:
         *                       _window.Context.currentUser.permissions_.
         * @return {Promise} Returns a resolved or rejected promise according to the validation of the permission.
         *
         * <pre>
         *     // Route maped in zze.route.js
         *     .state('youRoute', {
         *          url: urlFor('youRouteUrl'),
         *          views: {
         *              'zze-front': {
         *                  controller: 'zze.module.ModuleCtrl',
         *                  controllerAs: 'module',
         *                  templateUrl: templatePath('modules/module/templates/module.html'),
         *                  resolve: {
         *
         *                      isAllowedAccess: function ($injector) {
         *                          var PermissionsFactory = $injector.get('zze.permissions.permissionsFactory');
         *
         *                          return PermissionsFactory.isAllowedAccess('module');
         *                      }
         *                  }
         *              }
         *          }
         *     })
         * </pre>
         */
        function isAllowedAccess (state) {

            var deferred = $q.defer(),

                hasAccessRoute = _checkAccessRoute(state);

            if (IS_CONTROLLE && !hasAccessRoute) {

                MainFactory.showAccessDanied();

                deferred.reject();
            } else {
                deferred.resolve();
            }

            return deferred.promise;
        }

        /**
         * @ngdoc method
         *
         * @name checkAccessAction
         * @methodOf zze.permissions.permissionsFactory
         *
         * @description This method is used to validate the accesses in the _controllers, services, directives and filters_.
         *              Before executing action methods, such as _create, edit, delete, balance or read_, this method should be
         *              used to give the alert if the user does not have permission for the action and terminates execution.
         *
         * **Nota:** It is not allowed to hide action elements like links or buttons, instead add this validator in the methods
         *           that are called, to allow the action if the user can execute it or to display the access denied message.
         *
         * @param {String} state This state must be the key of the permissions object available at:
         *                 _window.Context.currentUser.permissions_.
         * @param {Array} action Array with the actions being validated, which are: _create, edit, delete, balance or read_.
         *
         * @return {Boolean} Returns a _Boolean_ of whether or not it is allowed.
         *
         * @example
         *     <pre>
         *         (function () {
         *
         *             'use strict';
         *
         *             angular.module('zze')
         *                 .controller('zze.myCtrl', myCtrl);
         *
         *             myCtrl.$inject = ['$injector'];
         *
         *             function myCtrl () {
         *                 var viewModel = this,
         *
         *                     PermissionsFactory = $injector.get('zze.permissions.permissionsFactory'),
         *
         *                     publicMethods = {
         *                         methodActionView: methodActionView
         *                     };
         *
         *                 _.extend(viewModel,  publicMethods);
         *
         *                 function methodActionView () {
         *                     if (!PermissionFactory.checkAccessAction('transaction', ['create', 'edit'])) {
         *
         *                         // Dialog alert permission denied.
         *                         $scope.main.showAccessDanied();
         *
         *                         return;
         *                     }
         *
         *                     // Run other codes if allowed.
         *                 }
         *             }
         *         })();
         *     </pre>
         */
        function checkAccessAction (state, action) {
            var isRead    = action.indexOf('read') !== -1,
                isBalance = action.indexOf('balance') !== -1;

            if (!IS_CONTROLLE) {
                return true;
            }

            if (USER_ROLE === 'admin') {
                return true;
            }

            if (USER_ROLE === 'supervisor' && !isRead && !isBalance) {
                return false;
            }

            if (isBalance) {
                return !!USER_PERMISSIONS.balance;
            }

            if (isRead && USER_PERMISSIONS[state] !== null) {
                return true;
            }

            return USER_PERMISSIONS[state] === 'manage' && !isRead;
        }

        function _checkAccessRoute (state) {

            if (USER_ROLE === 'admin' || USER_ROLE === 'supervisor') {
                return true;
            }

            // To users role OPERATOR and CUSTOM.
            if (!USER_PERMISSIONS[state]) {
                return false;
            }

            return true;
        }
    }

})();

(function () {

    'use strict';

    /**
     * @ngdoc service
     * @module zze.utils
     * @name zze.collections.collectionsFactory
     *
     * @description Factory for manipulation the collections.
     *
     * **Note:** This service has its own module, do not forget to inject _**zze.collections**_ in the dependencies of the place where you will use it.
     *
     * @example
     * <example module="zze">
     *     <file name="ctrl.js">
     *         <pre>
     *             (function () {
     *
     *                 'use strict';
     *
     *                 // I have never stated the module in this way,
     *                 // here is just an example of injection dependence this collectionsFactory ;)
     *                 angular.module('zze')
     *                     .controller('myController', myController);
     *
     *                 myController.$inject = ['$injector'];
     *
     *                 function myController ($injector) {
     *                     var CollectionFactory = $injector.get('zze.collections.collectionsFactory');
     *
     *                     CollectionFactory.filterByName([{
     *                         name: 'Other thing',
     *                         id: 123456
     *                     }, {
     *                         name: 'Name filter by',
     *                         id: 654321
     *                     }], 'Name filter by');
     *                 }
     *             })();
     *     </pre>
     * <example>
     */
    angular.module('zze.collections')
        .factory('zze.collections.collectionsFactory', collectionsFactory);

    function collectionsFactory () {
        var publicMethods = {
            findBy: findBy,
            findIndex: findIndex,
            filterByName: filterByName,
            filterBy: filterBy
        };

        return publicMethods;

        /**
         * @ngdocc method
         * @name findBy
         * @methodOf zze.collections.collectionsFactory
         *
         * @description Object with attributes used for comparison.
         *
         * @param {array} collection Collection that will be filtered. Just go through the first level of the object.
         * @param {object} attributes ...
         */
        function findBy (collection, attributes) {
            return _.find(collection, _matches(attributes));
        }

        /**
         * @ngdocc method
         * @name filterByName
         * @methodOf zze.collections.collectionsFactory
         *
         * @description Receives a collection and returns the items where the _name attribute_ contains the entered _string_.
         *
         * @param {array} collection Collection that will be filtered. Just go through the first level of the object.
         * @param {string} text String that must contain in the name attribute.
         */
        function filterByName (collection, text) {
            text = (text || (text = '')).toLowerCase();

            return _.filter(collection, function (object) {
                return ('' + object.name).toLowerCase().indexOf(text) > -1;
            });
        }

        /**
         * @ngdocc method
         * @name filterBy
         * @methodOf zze.collections.collectionsFactory
         *
         * @description Collection will be filtered by attributes passed as parameters.
         *
         * @param {array} collection Collection that will be filtered. Just go through the first level of the object.
         * @param {object} attributes ...
         */
        function filterBy (collection, attributes) {
            return _.filter(collection, _matches(attributes));
        }

        /**
         * @ngdocc method
         * @name findByIndex
         * @methodOf zze.collections.collectionsFactory
         *
         * @description Search in a collection items according to the attributes passed. Always returns the _index_
         *              of the first position found.
         *
         * @param {array} collection Collection that will be filtered. Just go through the first level of the object.
         * @param {object} attributes Object with attributes used for comparison.
         */
        function findIndex (collection, attributes) {
            return _.findIndex(collection, _matches(attributes));
        }

        function _matches (attributes) {
            return _.matches(attributes);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.finhub')
        .factory('zze.finhub.finhubInstitutionIcon', finhubInstitutionIcon);

    finhubInstitutionIcon.$inject = ['$injector'];

    function finhubInstitutionIcon ($injector) {
        let FinhubInstitutions = $injector.get('zze.finhub.finhubInstitutions');

        const buildRawHTML = function (object) {
            /* jshint camelcase:false */
            let institution = FinhubInstitutions.findInstitutionById(object.institution_id),
                fgColor,
                classes,
                html;

            classes = "zze-component_institution-icon";

            if (object.isCreditCard) {
                classes += " credit-card";
            }

            /* jshint camelcase:false */
            if (institution.generic) {
                fgColor = FinhubInstitutions.getFgColorByColor(object.color);
                classes += " fg-color-"+fgColor;
                html = '<div class="'+classes+'" style="background-color: #'+object.color+'">';
                html += FinhubInstitutions.getSvgIconByID(object.institution_id);
                html += '</div>';
            } else {
                html = '<div class="'+classes+'">';
                html += '<img src="'+institution.logo_url+'" />';
                html += '</div>';
            }

            return html;
        };

        return {
            buildRawHTML: buildRawHTML
        };
    }
})();

(function () {

    'use strict';

    angular.module('zze.finhub')
        .factory('zze.finhub.finhubInstitutions', finhubInstitutions);

    finhubInstitutions.$inject = ['$injector'];

    var _institutions = null;

    function finhubInstitutions ($injector) {

        var $q = $injector.get('$q'),
            $timeout = $injector.get('$timeout'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),

            publicMethods = {
                getInstitutions: getInstitutions,
                findInstitutionById: findInstitutionById,
                getSvgIconByID: getSvgIconByID,
                getFgColorByColor: getFgColorByColor
            };

        return publicMethods;

        function getSvgIconByID (institutionId) {
            return window.genericIconsSVGs[institutionId];
        }

        function getFgColorByColor (bgColor) {
            return window.finhubColorsMap[bgColor];
        }

        function getInstitutions () {
            var url = ContextFactory.getEndPoint('institutions', 'enums'),
                deferred = $q.defer();

            if (_institutions !== null) {
                $timeout(function() {
                    deferred.resolve(_institutions);
                }, 100);
            } else {
                CrudFactory.getAll(url).then(function (resp) {
                    _institutions = resp.data;
                    deferred.resolve(_institutions);
                });
            }

            return deferred.promise;
        }

        function findInstitutionById (id) {
            var foundInstitution = null;

            if (_institutions !== null) {
                foundInstitution = _.find(_institutions, function(i) {
                    return (i.id+'').toLowerCase() === (id + '').toLowerCase();
                });
            }

            return foundInstitution;
        }
    }
})();

(function () {
    'use strict';

    angular.module('zze-messages')
        .factory('zze-messages.contextFactory', ContextFactory);

    ContextFactory.$inject = ['$injector'];

    function ContextFactory($injector) {
        var StringsFactory = $injector.get('zze-messages.stringProcessFactory'),

            publicMethods = {
                getLegacyRoute: getLegacyRoute,
                getLegacyRouteProccess: getLegacyRouteProccess,
                getEndPoint: getEndPoint,
                getEndPointProccess: getEndPointProccess,
                getMessagesFullHistoryUrl: getMessagesFullHistoryUrl,
                getMessagesUpdateUrl: getMessagesUpdateUrl,
                getMessagesIndexUrl: getMessagesIndexUrl,
                getMessagesUnreadUrl: getMessagesUnreadUrl,
                payTransactionUrl: payTransactionUrl,
                unpayTransactionUrl: unpayTransactionUrl,
                invoiceUrl: invoiceUrl,
                calendarEventsUrl: calendarEventsUrl
            },

            $state = {
                current: { name: "" }
            };

        if (!window.ContextSource) {
            $state = $injector.get('$state');
        }

        return publicMethods;

        function getEndPoint(method, enums) {
            var stateName = $state.current.name,
                state = enums ? enums : stateName,
                arrContextPage;

            // TODO: Depois de ajustar todas as rotas para não usar mais o /, ajustar este código.
            if (stateName.indexOf('.') > -1) {
                arrContextPage = StringsFactory.stringExplode(state, '.');
                return window.Routes.endpoints[arrContextPage[arrContextPage.length - 1]][method];
            } else {
                arrContextPage = StringsFactory.stringExplode(state, '/');
                return window.Routes.endpoints[arrContextPage[0]][method];
            }
        }

        function getEndPointProccess(obj) {
            var endPoint = getEndPoint(obj.method, obj.enums),
                endPointReplaced = StringsFactory.stringReplace(endPoint, obj.replace, obj.value);

            return endPointReplaced;
        }

        function getLegacyRoute(session) {
            /* jshint camelcase:false */
            return window.Routes.legacy_app[session];
        }

        function getLegacyRouteProccess(obj) {
            var endPoint = getLegacyRoute(obj.method),
                endPointReplaced = StringsFactory.stringReplace(endPoint, obj.replace, obj.value);

            return endPointReplaced;
        }

        function getMessagesFullHistoryUrl() {
            return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/a/mensagens/historico';
        }

        function getMessagesUpdateUrl(message) {
            return '/zze_front/messages/' + message.id;
        }

        function getMessagesIndexUrl() {
            return '/zze_front/messages';
        }

        function getMessagesUnreadUrl() {
            return '/zze_front/messages/unread';
        }

        function payTransactionUrl(transaction) {
            return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/transactions/' + transaction.id + '/pay';
        }

        function unpayTransactionUrl(transaction) {
            return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/transactions/' + transaction.id + '/unpay';
        }

        function invoiceUrl(invoice) {
            /* jshint camelcase:false */
            return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/cartao-de-credito/' + invoice.credit_card_id + '/faturas/' + invoice.id;
        }

        function calendarEventsUrl(humanized) {
            if (humanized) {
                return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/agenda';
            } else {
                return '/' + window.APP_JS_ADAPTER_DATA.currentEntityId + '/calendar_events';
            }

        }

    }
})();

(function () {

    'use strict';

    angular.module('zze-messages')

        .factory('zze-messages.crudFactory', CrudFactory);

    CrudFactory.$inject = ['$injector'];

    function CrudFactory ($injector) {
        var $http = $injector.get('$http'),

            publicMethods = {
                getAll: getAll,
                getOne: getOne,
                post: post,
                put: put,
                destroy: destroy
            };

        return publicMethods;

        function getAll (url) {
            return $http.get(url);
        }

        function getOne (url, params) {
            return $http.get(url, params);
        }

        function post (url, data) {
            return $http.post(url, data);
        }

        function put (url, data) {
            return $http.put(url, data);
        }

        function destroy (url, config) {
            return $http.delete(url, config);
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze-messages')
        .factory('zze-messages.currencyFactory', currency);

    currency.$inject = ['$injector'];

    function currency ($injector) {
        var $filter = $injector.get('$filter'),

            publicMethods = {
                getCurrencyMasked: getCurrencyMasked,
                getCurrencyParse: getCurrencyParse
            };

        return publicMethods;

        function getCurrencyMasked (value, config, useSymbol, precision) {
            return $filter('zzeMaskCurrency')({
                value: value,
                symbol: useSymbol ? (config.symbol + " ") : '',

                precision: precision || 2,

                /* jshint camelcase:false */
                thousands_separator: config.thousands_separator,

                /* jshint camelcase:false */
                decimal_mark: config.decimal_mark
            });
        }

        function getCurrencyParse (value, decimal) {
            return accounting.unformat(value, decimal);
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze-messages')

        .factory('zze-messages.stringProcessFactory', StringProcessFactory);

    function StringProcessFactory () {
        var publicMethods = {
                stringReplace: stringReplace,
                stringExplode: stringExplode,
                checkZero: checkZero,
                checkParamUrl: checkParamUrl,
                cleanParamsUrl: cleanParamsUrl
        };

        return publicMethods;

        function stringReplace (str, charOut, charNew) {
            if (str === undefined || charOut  === undefined || charNew  === undefined) {
                return;
            }

            return str.replace(charOut, charNew);
        }

        function stringExplode (str, charSplit) {
            if (str === undefined || charSplit === undefined) {
                return;
            }

            return str.split(charSplit);
        }

        function checkZero (value) {
            if (!value) {
                return;
            }

            return value < 10 ? ('0' + value) : value;
        }

        function checkParamUrl (param) {
            var params = window.location.search.substring(1).split("&");

            for (var i = 0, len = params.length; i < len; i++) {
                var splitParam = params[i].split("=");

                if (splitParam[0] === param) {
                    return splitParam[1];
                }
            }
        }

        function cleanParamsUrl () {
            var url = window.location.href.split('?');

            if (url.length > 1) {
                window.history.pushState(null, null, url[0]);
            }
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.billings')
        .factory('zze.billings.billingsFactory', billingsFactory);

    billingsFactory.$inject = ['$injector'];

    function billingsFactory () {
        var publicMethods = {
            detectCardBrand: detectCardBrand
        };

        return publicMethods;

      function detectCardBrand(cardNumber) {
          var re = {
              visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
              mastercard: /^5[1-5][0-9]{14}$/,
              amex: /^3[47][0-9]{13}$/,
              diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
              elo: /^((((636368)|(438935)|(504175)|(451416)|(636297))\d{0,10})|((5067)|(4576)|(4011))\d{0,12})/,
              aura: /^(50)/
          };

          for(var key in re) {
              if(re[key].test(cardNumber)) {
                  return key;
              }
          }
      }

    }
})();

(function () {

    'use strict';

    angular.module('zze.entities')
        .factory('zze.entities.entitiesFactory', entitiesFactory);

    entitiesFactory.$inject = ['$injector'];

    function entitiesFactory () {

        var publicMethods = {
            getDataFake: getDataFake
        };

        return publicMethods;

        function getDataFake () {
            /*jshint camelcase: false */
            return [{
                'active': true,
                'current': true,
                'expires_at': "2099-12-31",
                'id': 25,
                'name': "4",
                'owner': true,
                'payment_method' : "credit_card",
                'plan_id' : "startup",
                'plan_kind' : "business",
                'user_role' : "sheldon",
                'uuid' : "94c215453e9cdea021519bdebd649d4a48f2fe62"
            },
            {
                'active': true,
                'current': true,
                'expires_at': "2099-12-31",
                'id': 25,
                'name': "4",
                'owner': true,
                'payment_method' : "credit_card",
                'plan_id' : "startup",
                'plan_kind' : "personal",
                'user_role' : "sheldon",
                'uuid' : "94c215453e9cdea021519bdebd649d4a48f2fe62"
            }];
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.entityUsers')
        .factory('zze.entityUsers.entityUsersFactory', entityUsersFactory);

    entityUsersFactory.$inject = ['$injector'];

    function entityUsersFactory() {
        var publicMethods = {

            getHumanizedUserTypes: humanizedUserTypes,
            getDefaultCustomPermissions: defaultCustomPermissions,
            getPermissionsOptions: permissionsOptions,
            verifyNewUser: verifyNewUser

        };

        return publicMethods;

        function humanizedUserTypes() {
            var userTypes = {
                custom: "personalizado",
                operator: "operador",
                leonard: "supervisor",
                sheldon: "administrador"
            };
            return userTypes;
        }

        function defaultCustomPermissions() {
            /* jshint camelcase:false */
            var defaultPermissions = {
                entity: "read",
                user_account: "read",
                preference: "read",
                account: "read",
                credit_card: "read",
                tag: "read",
                category: "read",
                transaction: "manage",
                balance: null,
                report: null,
                cashflow: null,
                calendar_event: "manage",
                goal: "manage",
                activities: null,
                reconciliation: "manage",
                reminder: "manage"
            };
            return defaultPermissions;
        }

        function permissionsOptions() {
            var options = [
                { label: "Dados da empresa", objectModel: "entity" },
                { label: "Usuários", objectModel: "user_account" },
                { label: "Configurações", objectModel: "preference" },
                { label: "Contas bancárias", objectModel: "account" },
                { label: "Cartões de crédito", objectModel: "credit_card" },
                { label: "Tags", objectModel: "tag" },
                { label: "Categorias", objectModel: "category" },
                { label: "Lançamentos", objectModel: "transaction" },
                { label: "Saldos e resultados", objectModel: "balance" },
                { label: "Relatórios", objectModel: "report" },
                { label: "Fluxo de caixa", objectModel: "cashflow" },
                { label: "Compromissos da agenda", objectModel: "calendar_event" },
                { label: "Metas", objectModel: "goal" },
                { label: "Histórico de atividades", objectModel: "activities" },
                { label: "Conciliação", objectModel: "reconciliation" },
                { label: "Alertas", objectModel: "reminder" }
            ];
            return options;
        }

        function verifyNewUser(type, $scope) {
            if ($scope.main.checkBlockedResources('user_accounts')) {
                if ($scope.main.contextSource.currentUser.role === 'admin') {
                    $scope.entityUsers.openFormDialog(type);
                } else {
                    $scope.main.showAccessDanied();
                }
            } else {
                $scope.main.showDialogPremiumFeature('userAccounts');
            }
        }

    }
})();

(function () {

    'use strict';

    angular.module('zze.tags')
        .factory('zze.tags.tagsFactory', tagsFactory);

    tagsFactory.$inject = ['$injector'];

    function tagsFactory () {
        var publicMethods = {
            getDataFake: getDataFake,
            availableTags: availableTags
        };

        return publicMethods;

        function getDataFake () {
            /*jshint camelcase: false */
            return [{
                entity_id: 0,
                name: "Desenvolvimento",
                uid: 0
            }];
        }

        function availableTags(tags) {
            return tags;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.creditCard')
        .service('zze.creditCard.CreditCardInvoices', CreditCardInvoices);

    CreditCardInvoices.$inject = ['$injector'];

    function CreditCardInvoices ($injector) {
        var INVOICE_DATES = ["2000-01-10", "2000-02-10", "2000-03-10", "2000-04-10", "2000-05-10", "2000-06-10",
            "2000-07-10", "2000-08-10", "2000-09-10", "2000-10-10", "2000-11-10", "2000-12-10", "2001-01-10", "2001-02-10",
            "2001-03-10", "2001-04-10", "2001-05-10", "2001-06-10", "2001-07-10", "2001-08-10", "2001-09-10", "2001-10-10",
            "2001-11-10", "2001-12-10", "2002-01-10", "2002-02-10", "2002-03-10", "2002-04-10", "2002-05-10", "2002-06-10",
            "2002-07-10", "2002-08-10", "2002-09-10", "2002-10-10", "2002-11-10", "2002-12-10", "2003-01-10", "2003-02-10",
            "2003-03-10", "2003-04-10", "2003-05-10", "2003-06-10", "2003-07-10", "2003-08-10", "2003-09-10", "2003-10-10",
            "2003-11-10", "2003-12-10", "2004-01-10", "2004-02-10", "2004-03-10", "2004-04-10", "2004-05-10", "2004-06-10",
            "2004-07-10", "2004-08-10", "2004-09-10", "2004-10-10", "2004-11-10", "2004-12-10", "2005-01-10", "2005-02-10",
            "2005-03-10", "2005-04-10", "2005-05-10", "2005-06-10", "2005-07-10", "2005-08-10", "2005-09-10", "2005-10-10",
            "2005-11-10", "2005-12-10", "2006-01-10", "2006-02-10", "2006-03-10", "2006-04-10", "2006-05-10", "2006-06-10",
            "2006-07-10", "2006-08-10", "2006-09-10", "2006-10-10", "2006-11-10", "2006-12-10", "2007-01-10", "2007-02-10",
            "2007-03-10", "2007-04-10", "2007-05-10", "2007-06-10", "2007-07-10", "2007-08-10", "2007-09-10", "2007-10-10",
            "2007-11-10", "2007-12-10", "2008-01-10", "2008-02-10", "2008-03-10", "2008-04-10", "2008-05-10", "2008-06-10",
            "2008-07-10", "2008-08-10", "2008-09-10", "2008-10-10", "2008-11-10", "2008-12-10", "2009-01-10", "2009-02-10",
            "2009-03-10", "2009-04-10", "2009-05-10", "2009-06-10", "2009-07-10", "2009-08-10", "2009-09-10", "2009-10-10",
            "2009-11-10", "2009-12-10", "2010-01-10", "2010-02-10", "2010-03-10", "2010-04-10", "2010-05-10", "2010-06-10",
            "2010-07-10", "2010-08-10", "2010-09-10", "2010-10-10", "2010-11-10", "2010-12-10", "2011-01-10", "2011-02-10",
            "2011-03-10", "2011-04-10", "2011-05-10", "2011-06-10", "2011-07-10", "2011-08-10", "2011-09-10", "2011-10-10",
            "2011-11-10", "2011-12-10", "2012-01-10", "2012-02-10", "2012-03-10", "2012-04-10", "2012-05-10", "2012-06-10",
            "2012-07-10", "2012-08-10", "2012-09-10", "2012-10-10", "2012-11-10", "2012-12-10", "2013-01-10", "2013-02-10",
            "2013-03-10", "2013-04-10", "2013-05-10", "2013-06-10", "2013-07-10", "2013-08-10", "2013-09-10", "2013-10-10",
            "2013-11-10", "2013-12-10", "2014-01-10", "2014-02-10", "2014-03-10", "2014-04-10", "2014-05-10", "2014-06-10",
            "2014-07-10", "2014-08-10", "2014-09-10", "2014-10-10", "2014-11-10", "2014-12-10", "2015-01-10", "2015-02-10",
            "2015-03-10", "2015-04-10", "2015-05-10", "2015-06-10", "2015-07-10", "2015-08-10", "2015-09-10", "2015-10-10",
            "2015-11-10", "2015-12-10", "2016-01-10", "2016-02-10", "2016-03-10", "2016-04-10", "2016-05-10", "2016-06-10",
            "2016-07-10", "2016-08-10", "2016-09-10", "2016-10-10", "2016-11-10", "2016-12-10", "2017-01-10", "2017-02-10",
            "2017-03-10", "2017-04-10", "2017-05-10", "2017-06-10", "2017-07-10", "2017-08-10", "2017-09-10", "2017-10-10",
            "2017-11-10", "2017-12-10", "2018-01-10", "2018-02-10", "2018-03-10", "2018-04-10", "2018-05-10", "2018-06-10",
            "2018-07-10", "2018-08-10", "2018-09-10", "2018-10-10", "2018-11-10", "2018-12-10", "2019-01-10", "2019-02-10",
            "2019-03-10", "2019-04-10", "2019-05-10", "2019-06-10", "2019-07-10", "2019-08-10", "2019-09-10", "2019-10-10",
            "2019-11-10", "2019-12-10", "2020-01-10", "2020-02-10", "2020-03-10", "2020-04-10", "2020-05-10", "2020-06-10",
            "2020-07-10", "2020-08-10", "2020-09-10", "2020-10-10", "2020-11-10", "2020-12-10", "2021-01-10", "2021-02-10",
            "2021-03-10", "2021-04-10", "2021-05-10", "2021-06-10", "2021-07-10", "2021-08-10", "2021-09-10", "2021-10-10",
            "2021-11-10", "2021-12-10", "2022-01-10", "2022-02-10", "2022-03-10", "2022-04-10", "2022-05-10", "2022-06-10",
            "2022-07-10", "2022-08-10", "2022-09-10", "2022-10-10", "2022-11-10", "2022-12-10", "2023-01-10", "2023-02-10",
            "2023-03-10", "2023-04-10", "2023-05-10", "2023-06-10", "2023-07-10", "2023-08-10", "2023-09-10", "2023-10-10",
            "2023-11-10", "2023-12-10", "2024-01-10", "2024-02-10", "2024-03-10", "2024-04-10", "2024-05-10", "2024-06-10",
            "2024-07-10", "2024-08-10", "2024-09-10", "2024-10-10", "2024-11-10", "2024-12-10", "2025-01-10", "2025-02-10",
            "2025-03-10", "2025-04-10", "2025-05-10", "2025-06-10", "2025-07-10", "2025-08-10", "2025-09-10", "2025-10-10",
            "2025-11-10", "2025-12-10", "2026-01-10", "2026-02-10", "2026-03-10", "2026-04-10", "2026-05-10", "2026-06-10",
            "2026-07-10", "2026-08-10", "2026-09-10", "2026-10-10", "2026-11-10", "2026-12-10", "2027-01-10", "2027-02-10",
            "2027-03-10", "2027-04-10", "2027-05-10", "2027-06-10", "2027-07-10", "2027-08-10", "2027-09-10", "2027-10-10",
            "2027-11-10", "2027-12-10", "2028-01-10", "2028-02-10", "2028-03-10", "2028-04-10", "2028-05-10", "2028-06-10",
            "2028-07-10", "2028-08-10", "2028-09-10", "2028-10-10", "2028-11-10", "2028-12-10", "2029-01-10", "2029-02-10",
            "2029-03-10", "2029-04-10", "2029-05-10", "2029-06-10", "2029-07-10", "2029-08-10", "2029-09-10", "2029-10-10",
            "2029-11-10", "2029-12-10", "2030-01-10", "2030-02-10", "2030-03-10", "2030-04-10", "2030-05-10", "2030-06-10",
            "2030-07-10", "2030-08-10", "2030-09-10", "2030-10-10", "2030-11-10", "2030-12-10", "2031-01-10", "2031-02-10",
            "2031-03-10", "2031-04-10", "2031-05-10", "2031-06-10", "2031-07-10", "2031-08-10", "2031-09-10", "2031-10-10",
            "2031-11-10", "2031-12-10", "2032-01-10", "2032-02-10", "2032-03-10", "2032-04-10", "2032-05-10", "2032-06-10",
            "2032-07-10", "2032-08-10", "2032-09-10", "2032-10-10", "2032-11-10", "2032-12-10", "2033-01-10", "2033-02-10",
            "2033-03-10", "2033-04-10", "2033-05-10", "2033-06-10", "2033-07-10", "2033-08-10", "2033-09-10", "2033-10-10",
            "2033-11-10", "2033-12-10", "2034-01-10", "2034-02-10", "2034-03-10", "2034-04-10", "2034-05-10", "2034-06-10",
            "2034-07-10", "2034-08-10", "2034-09-10", "2034-10-10", "2034-11-10", "2034-12-10", "2035-01-10", "2035-02-10",
            "2035-03-10", "2035-04-10", "2035-05-10", "2035-06-10", "2035-07-10", "2035-08-10", "2035-09-10", "2035-10-10",
            "2035-11-10", "2035-12-10", "2036-01-10", "2036-02-10", "2036-03-10", "2036-04-10", "2036-05-10", "2036-06-10",
            "2036-07-10", "2036-08-10", "2036-09-10", "2036-10-10", "2036-11-10", "2036-12-10", "2037-01-10", "2037-02-10",
            "2037-03-10", "2037-04-10", "2037-05-10", "2037-06-10", "2037-07-10", "2037-08-10", "2037-09-10", "2037-10-10",
            "2037-11-10", "2037-12-10", "2038-01-10", "2038-02-10", "2038-03-10", "2038-04-10", "2038-05-10", "2038-06-10",
            "2038-07-10", "2038-08-10", "2038-09-10", "2038-10-10", "2038-11-10", "2038-12-10", "2039-01-10", "2039-02-10",
            "2039-03-10", "2039-04-10", "2039-05-10", "2039-06-10", "2039-07-10", "2039-08-10", "2039-09-10", "2039-10-10",
            "2039-11-10", "2039-12-10", "2040-01-10", "2040-02-10", "2040-03-10", "2040-04-10", "2040-05-10", "2040-06-10",
            "2040-07-10", "2040-08-10", "2040-09-10", "2040-10-10", "2040-11-10", "2040-12-10", "2041-01-10", "2041-02-10",
            "2041-03-10", "2041-04-10", "2041-05-10", "2041-06-10", "2041-07-10", "2041-08-10", "2041-09-10", "2041-10-10",
            "2041-11-10", "2041-12-10", "2042-01-10", "2042-02-10", "2042-03-10", "2042-04-10", "2042-05-10", "2042-06-10",
            "2042-07-10", "2042-08-10", "2042-09-10", "2042-10-10", "2042-11-10", "2042-12-10", "2043-01-10", "2043-02-10",
            "2043-03-10", "2043-04-10", "2043-05-10", "2043-06-10", "2043-07-10", "2043-08-10", "2043-09-10", "2043-10-10",
            "2043-11-10", "2043-12-10", "2044-01-10", "2044-02-10", "2044-03-10", "2044-04-10", "2044-05-10", "2044-06-10",
            "2044-07-10", "2044-08-10", "2044-09-10", "2044-10-10", "2044-11-10", "2044-12-10", "2045-01-10", "2045-02-10",
            "2045-03-10", "2045-04-10", "2045-05-10", "2045-06-10", "2045-07-10", "2045-08-10", "2045-09-10", "2045-10-10",
            "2045-11-10", "2045-12-10", "2046-01-10", "2046-02-10", "2046-03-10", "2046-04-10", "2046-05-10", "2046-06-10",
            "2046-07-10", "2046-08-10", "2046-09-10", "2046-10-10", "2046-11-10", "2046-12-10", "2047-01-10", "2047-02-10",
            "2047-03-10", "2047-04-10", "2047-05-10", "2047-06-10", "2047-07-10", "2047-08-10", "2047-09-10", "2047-10-10",
            "2047-11-10", "2047-12-10", "2048-01-10", "2048-02-10", "2048-03-10", "2048-04-10", "2048-05-10", "2048-06-10",
            "2048-07-10", "2048-08-10", "2048-09-10", "2048-10-10", "2048-11-10", "2048-12-10", "2049-01-10", "2049-02-10",
            "2049-03-10", "2049-04-10", "2049-05-10", "2049-06-10", "2049-07-10", "2049-08-10", "2049-09-10", "2049-10-10",
            "2049-11-10", "2049-12-10", "2050-01-10", "2050-02-10", "2050-03-10", "2050-04-10", "2050-05-10", "2050-06-10",
            "2050-07-10", "2050-08-10", "2050-09-10", "2050-10-10", "2050-11-10", "2050-12-10", "2051-01-10", "2051-02-10",
            "2051-03-10", "2051-04-10", "2051-05-10", "2051-06-10", "2051-07-10", "2051-08-10", "2051-09-10", "2051-10-10",
            "2051-11-10", "2051-12-10", "2052-01-10", "2052-02-10", "2052-03-10", "2052-04-10", "2052-05-10", "2052-06-10",
            "2052-07-10", "2052-08-10", "2052-09-10", "2052-10-10", "2052-11-10", "2052-12-10", "2053-01-10", "2053-02-10",
            "2053-03-10", "2053-04-10", "2053-05-10", "2053-06-10", "2053-07-10", "2053-08-10", "2053-09-10", "2053-10-10",
            "2053-11-10", "2053-12-10", "2054-01-10", "2054-02-10", "2054-03-10", "2054-04-10", "2054-05-10", "2054-06-10",
            "2054-07-10", "2054-08-10", "2054-09-10", "2054-10-10", "2054-11-10", "2054-12-10", "2055-01-10", "2055-02-10",
            "2055-03-10", "2055-04-10", "2055-05-10", "2055-06-10", "2055-07-10", "2055-08-10", "2055-09-10", "2055-10-10",
            "2055-11-10", "2055-12-10", "2056-01-10", "2056-02-10", "2056-03-10", "2056-04-10", "2056-05-10", "2056-06-10",
            "2056-07-10", "2056-08-10", "2056-09-10", "2056-10-10", "2056-11-10", "2056-12-10", "2057-01-10", "2057-02-10",
            "2057-03-10", "2057-04-10", "2057-05-10", "2057-06-10", "2057-07-10", "2057-08-10", "2057-09-10", "2057-10-10",
            "2057-11-10", "2057-12-10", "2058-01-10", "2058-02-10", "2058-03-10", "2058-04-10", "2058-05-10", "2058-06-10",
            "2058-07-10", "2058-08-10", "2058-09-10", "2058-10-10", "2058-11-10", "2058-12-10", "2059-01-10", "2059-02-10",
            "2059-03-10", "2059-04-10", "2059-05-10", "2059-06-10", "2059-07-10", "2059-08-10", "2059-09-10", "2059-10-10",
            "2059-11-10", "2059-12-10", "2060-01-10", "2060-02-10", "2060-03-10", "2060-04-10", "2060-05-10", "2060-06-10",
            "2060-07-10", "2060-08-10", "2060-09-10", "2060-10-10", "2060-11-10", "2060-12-10", "2061-01-10", "2061-02-10",
            "2061-03-10", "2061-04-10", "2061-05-10", "2061-06-10", "2061-07-10", "2061-08-10", "2061-09-10", "2061-10-10",
            "2061-11-10", "2061-12-10", "2062-01-10", "2062-02-10", "2062-03-10", "2062-04-10", "2062-05-10", "2062-06-10",
            "2062-07-10", "2062-08-10", "2062-09-10", "2062-10-10", "2062-11-10", "2062-12-10", "2063-01-10", "2063-02-10",
            "2063-03-10", "2063-04-10", "2063-05-10", "2063-06-10", "2063-07-10", "2063-08-10", "2063-09-10", "2063-10-10",
            "2063-11-10", "2063-12-10", "2064-01-10", "2064-02-10", "2064-03-10", "2064-04-10", "2064-05-10", "2064-06-10",
            "2064-07-10", "2064-08-10", "2064-09-10", "2064-10-10", "2064-11-10", "2064-12-10", "2065-01-10", "2065-02-10",
            "2065-03-10", "2065-04-10", "2065-05-10", "2065-06-10", "2065-07-10", "2065-08-10", "2065-09-10", "2065-10-10",
            "2065-11-10", "2065-12-10", "2066-01-10", "2066-02-10", "2066-03-10", "2066-04-10", "2066-05-10", "2066-06-10",
            "2066-07-10", "2066-08-10", "2066-09-10", "2066-10-10", "2066-11-10", "2066-12-10", "2067-01-10", "2067-02-10",
            "2067-03-10", "2067-04-10", "2067-05-10", "2067-06-10", "2067-07-10", "2067-08-10", "2067-09-10", "2067-10-10",
            "2067-11-10", "2067-12-10", "2068-01-10", "2068-02-10", "2068-03-10", "2068-04-10", "2068-05-10", "2068-06-10",
            "2068-07-10", "2068-08-10", "2068-09-10", "2068-10-10", "2068-11-10", "2068-12-10", "2069-01-10", "2069-02-10",
            "2069-03-10", "2069-04-10", "2069-05-10", "2069-06-10", "2069-07-10", "2069-08-10", "2069-09-10", "2069-10-10",
            "2069-11-10", "2069-12-10", "2070-01-10", "2070-02-10", "2070-03-10", "2070-04-10", "2070-05-10", "2070-06-10",
            "2070-07-10", "2070-08-10", "2070-09-10", "2070-10-10", "2070-11-10", "2070-12-10", "2071-01-10", "2071-02-10",
            "2071-03-10", "2071-04-10", "2071-05-10", "2071-06-10", "2071-07-10", "2071-08-10", "2071-09-10", "2071-10-10",
            "2071-11-10", "2071-12-10", "2072-01-10", "2072-02-10", "2072-03-10", "2072-04-10", "2072-05-10", "2072-06-10",
            "2072-07-10", "2072-08-10", "2072-09-10", "2072-10-10", "2072-11-10", "2072-12-10", "2073-01-10", "2073-02-10",
            "2073-03-10", "2073-04-10", "2073-05-10", "2073-06-10", "2073-07-10", "2073-08-10", "2073-09-10", "2073-10-10",
            "2073-11-10", "2073-12-10", "2074-01-10", "2074-02-10", "2074-03-10", "2074-04-10", "2074-05-10", "2074-06-10",
            "2074-07-10", "2074-08-10", "2074-09-10", "2074-10-10", "2074-11-10", "2074-12-10", "2075-01-10", "2075-02-10",
            "2075-03-10", "2075-04-10", "2075-05-10", "2075-06-10", "2075-07-10", "2075-08-10", "2075-09-10", "2075-10-10",
            "2075-11-10", "2075-12-10", "2076-01-10", "2076-02-10", "2076-03-10", "2076-04-10", "2076-05-10", "2076-06-10",
            "2076-07-10", "2076-08-10", "2076-09-10", "2076-10-10", "2076-11-10", "2076-12-10", "2077-01-10", "2077-02-10",
            "2077-03-10", "2077-04-10", "2077-05-10", "2077-06-10", "2077-07-10", "2077-08-10", "2077-09-10", "2077-10-10",
            "2077-11-10", "2077-12-10", "2078-01-10", "2078-02-10", "2078-03-10", "2078-04-10", "2078-05-10", "2078-06-10",
            "2078-07-10", "2078-08-10", "2078-09-10", "2078-10-10", "2078-11-10", "2078-12-10", "2079-01-10", "2079-02-10",
            "2079-03-10", "2079-04-10", "2079-05-10", "2079-06-10", "2079-07-10", "2079-08-10", "2079-09-10", "2079-10-10",
            "2079-11-10", "2079-12-10", "2080-01-10", "2080-02-10", "2080-03-10", "2080-04-10", "2080-05-10", "2080-06-10",
            "2080-07-10", "2080-08-10", "2080-09-10", "2080-10-10", "2080-11-10", "2080-12-10", "2081-01-10", "2081-02-10",
            "2081-03-10", "2081-04-10", "2081-05-10", "2081-06-10", "2081-07-10", "2081-08-10", "2081-09-10", "2081-10-10",
            "2081-11-10", "2081-12-10", "2082-01-10", "2082-02-10", "2082-03-10", "2082-04-10", "2082-05-10", "2082-06-10",
            "2082-07-10", "2082-08-10", "2082-09-10", "2082-10-10", "2082-11-10", "2082-12-10", "2083-01-10", "2083-02-10",
            "2083-03-10", "2083-04-10", "2083-05-10", "2083-06-10", "2083-07-10", "2083-08-10", "2083-09-10", "2083-10-10",
            "2083-11-10", "2083-12-10", "2084-01-10", "2084-02-10", "2084-03-10", "2084-04-10", "2084-05-10", "2084-06-10",
            "2084-07-10", "2084-08-10", "2084-09-10", "2084-10-10", "2084-11-10", "2084-12-10", "2085-01-10", "2085-02-10",
            "2085-03-10", "2085-04-10", "2085-05-10", "2085-06-10", "2085-07-10", "2085-08-10", "2085-09-10", "2085-10-10",
            "2085-11-10", "2085-12-10", "2086-01-10", "2086-02-10", "2086-03-10", "2086-04-10", "2086-05-10", "2086-06-10",
            "2086-07-10", "2086-08-10", "2086-09-10", "2086-10-10", "2086-11-10", "2086-12-10", "2087-01-10", "2087-02-10",
            "2087-03-10", "2087-04-10", "2087-05-10", "2087-06-10", "2087-07-10", "2087-08-10", "2087-09-10", "2087-10-10",
            "2087-11-10", "2087-12-10", "2088-01-10", "2088-02-10", "2088-03-10", "2088-04-10", "2088-05-10", "2088-06-10",
            "2088-07-10", "2088-08-10", "2088-09-10", "2088-10-10", "2088-11-10", "2088-12-10", "2089-01-10", "2089-02-10",
            "2089-03-10", "2089-04-10", "2089-05-10", "2089-06-10", "2089-07-10", "2089-08-10", "2089-09-10", "2089-10-10",
            "2089-11-10", "2089-12-10", "2090-01-10", "2090-02-10", "2090-03-10", "2090-04-10", "2090-05-10", "2090-06-10",
            "2090-07-10", "2090-08-10", "2090-09-10", "2090-10-10", "2090-11-10", "2090-12-10", "2091-01-10", "2091-02-10",
            "2091-03-10", "2091-04-10", "2091-05-10", "2091-06-10", "2091-07-10", "2091-08-10", "2091-09-10", "2091-10-10",
            "2091-11-10", "2091-12-10", "2092-01-10", "2092-02-10", "2092-03-10", "2092-04-10", "2092-05-10", "2092-06-10",
            "2092-07-10", "2092-08-10", "2092-09-10", "2092-10-10", "2092-11-10", "2092-12-10", "2093-01-10", "2093-02-10",
            "2093-03-10", "2093-04-10", "2093-05-10", "2093-06-10", "2093-07-10", "2093-08-10", "2093-09-10", "2093-10-10",
            "2093-11-10", "2093-12-10", "2094-01-10", "2094-02-10", "2094-03-10", "2094-04-10", "2094-05-10", "2094-06-10",
            "2094-07-10", "2094-08-10", "2094-09-10", "2094-10-10", "2094-11-10", "2094-12-10", "2095-01-10", "2095-02-10",
            "2095-03-10", "2095-04-10", "2095-05-10", "2095-06-10", "2095-07-10", "2095-08-10", "2095-09-10", "2095-10-10",
            "2095-11-10", "2095-12-10", "2096-01-10", "2096-02-10", "2096-03-10", "2096-04-10", "2096-05-10", "2096-06-10",
            "2096-07-10", "2096-08-10", "2096-09-10", "2096-10-10", "2096-11-10", "2096-12-10", "2097-01-10", "2097-02-10",
            "2097-03-10", "2097-04-10", "2097-05-10", "2097-06-10", "2097-07-10", "2097-08-10", "2097-09-10", "2097-10-10",
            "2097-11-10", "2097-12-10", "2098-01-10", "2098-02-10", "2098-03-10", "2098-04-10", "2098-05-10", "2098-06-10",
            "2098-07-10", "2098-08-10", "2098-09-10", "2098-10-10", "2098-11-10", "2098-12-10", "2099-01-10", "2099-02-10",
            "2099-03-10", "2099-04-10", "2099-05-10", "2099-06-10", "2099-07-10", "2099-08-10", "2099-09-10", "2099-10-10",
            "2099-11-10", "2099-12-10"];

        var CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory');

        var publicMethods = {
            buildOptions: buildOptions,
            getInvoiceFor: getInvoiceFor,
            getInvoiceMonth: getInvoiceMonth,
            getCurrentInvoice: getCurrentInvoice,
            getCurrentOrUnpaidInvoice: getCurrentOrUnpaidInvoice,
            getCreditCardInvoiceId: getCreditCardInvoiceId
        };

        return publicMethods;

        /**
         * @name getCreditCardInvoiceId
         * @description Get the credit card invoice by the credit card invoice id.
         *
         * @param {int} creditCardId The credit card id.
         * @param {int} creditCardInvoiceId The credit card invoice id.
         *
         * @returns {object}
         */
        function  getCreditCardInvoiceId (creditCardId, creditCardInvoiceId) {
            var url = ContextFactory.getEndPointProccess({
                        method: 'get_invoice',
                        replace: ':id',
                        value: creditCardId,
                        enums: 'credit_cards'
                    }) + '?credit_card_invoice_id=' + creditCardInvoiceId;

            return CrudFactory.getAll(url);
        }

        /**
         * @name getInvoiceFor
         * @description Get the credit card invoice by the credit card id and some date.
         *
         * @param {int} creditCardId The credit card id.
         * @param {date} date The date which is between the start date and closing date of the invoice.
         *
         * @returns {object}
         */
        function getInvoiceFor (creditCardId, date) {
            var url = ContextFactory.getEndPointProccess({
                        method: 'get_invoice',
                        replace: ':id',
                        value: creditCardId,
                        enums: 'credit_cards'
                    }) + '?date=' + date;

            return CrudFactory.getAll(url);
        }

        /**
         * @name getCurrentInvoice
         * @description Get the current invoice of a credit card.
         *
         * @param {int} creditCardId The credit card id which you want to get the current invoice.
         *
         * @returns {object}
         */
        function getCurrentInvoice (creditCardId) {
            var url = ContextFactory.getEndPointProccess({
                    method: 'get_invoice',
                    replace: ':id',
                    value: creditCardId,
                    enums: 'credit_cards'
                }) + '?current=true';

            return CrudFactory.getAll(url);
        }

        function getCurrentOrUnpaidInvoice (id) {
            var url = ContextFactory.getEndPointProccess({
                    method: 'get_invoice',
                    replace: ':id',
                    value: id,
                    enums: 'credit_cards'
                }) + '?current_or_unpaid=true';

            return CrudFactory.getAll(url);
        }

        /**
         * @name getInvoiceMonth
         * @description Get the month/year date of the invoice, by the invoice id.
         *
         * @param {int} invoiceId The credit card invoice id.
         *
         * @returns {date}
         */
        function getInvoiceMonth (invoiceId) {
            return moment(INVOICE_DATES[invoiceId], 'YYYY-MM-DD').toDate();
        }

        /**
         * @name buildOptions
         * @description Build a selectize invoice month options for the directive. The plataform rule is: 2 months before + current invoice month + 2 months after.
         *
         * @param {object} invoice The invoice that is assumed as the current invoice.
         *
         * @returns {Array}
         */
        function buildOptions (invoice) {
            var _options = [];

            for (var i = -2; i < 3; i++) {
                var date = moment(invoice.date).add({months: i}).format('YYYY-MM-DD');

                _options.push({
                    date: date,
                    id: invoice.id + i
                });
            }

            return _options;
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.fileUpload')

        .factory('zze.fileUpload.UploaderFactory', ['FileUploader', '$rootScope', function (FileUploader, $rootScope) {

            var UploaderFactory = {};

            UploaderFactory.create = function (scope, attrs) {
                scope.removeFile = function (item, e) {
                    item.destroyed = true;

                    $rootScope.$broadcast('onCompleteItem', 'minus');
                    scope.uploader.queueLimit = getAvailableResources() + scope.uploader.queue.length;
                    e.preventDefault();
                };

                if (attrs) {
                    return s3Uploader(scope, attrs);
                } else {
                    return regularUploader(scope, attrs.url);
                }
            };

            function s3Uploader(scope, s3Settings) {

                var uploader = new FileUploader({
                    url: s3Settings.url,
                    // headers: {'Access-Control-Request-Headers': 'x-requested-with'},
                    scope: scope,
                    autoUpload: true
                });

                uploader.queueLimit = getAvailableResources() + uploader.scope.status.showAttachment;

                // Filters cant modify File object,
                // It only accept or refute after some kind of validation.
                //
                // uploader.filters.push({
                //   name: 'String',
                //   fn: function (file /*{File|FileLikeObject}*/, options) { },
                // });

                uploader.onBeforeUploadItem = function (item) {

                    item.file.fileName = sanitizedFileName(item.file.name);
                    /* jshint camelcase: false */
                    item.file.s3ObjectKey = s3Settings.keyPrefix + '/' + aplicationUUID() + '/' + item.file.fileName;
                    item.file.url = s3Settings.url + '/' + item.file.s3ObjectKey;
                    /* jshint camelcase: false */
                    item.file.human_type = humanFileType(item.file.type);
                    item.destroyed = false;
                    item.formData = [{
                        key: item.file.s3ObjectKey,
                        acl: s3Settings.acl,
                        AWSAccessKeyId: s3Settings.aWSAccessKeyId,
                        policy: s3Settings.policy,
                        signature: s3Settings.signature
                    }];
                };

                function aplicationUUID() {
                    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        /* jshint bitwise: false */
                        var r = Math.random() * 16 | 0;
                        /* jshint bitwise: false */
                        var v = (c === 'x') ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                }

                uploader.onAfterAddingFile = function () {
                    // item
                };

                uploader.onProgressItem = function () {
                    // item, progress
                };

                uploader.onCompleteItem = function () {
                    // xhr, item, response
                    $rootScope.$broadcast('onCompleteItem', 'more');
                    uploader.queueLimit = getAvailableResources() + uploader.queue.length;
                };

                return uploader;
            }

            function getAvailableResources() {
                var avaible = window.Context.availableResources.attachments.allowed -
                    window.Context.availableResources.attachments.quantity;

                return avaible;
            }

            var regularUploader = function (scope, url) {
                var uploader = new FileUploader({
                    url: url,
                    scope: scope,
                    autoUpload: true
                });
                return uploader;
            };

            var sanitizedFileName = function (fileName) {
                var _fileName = '';

                if (fileName.split('.').length > 1) {
                    var extension = fileName.split('.').pop();

                    _fileName = fileName.replace('.' + extension, '').toLowerCase();
                    _fileName = _fileName.replace(/[^a-z0-9_\-]/gi, '_').toLowerCase() + '.' + extension.toLowerCase();
                } else {
                    _fileName = fileName.replace(/[^a-z0-9_\-]/gi, '_').toLowerCase();
                }

                return _fileName;
            };

            var humanFileType = function (fileType) {
                var type = 'general';

                if (/image/.test(fileType)) {
                    type = 'image';
                }

                if (/pdf/.test(fileType)) {
                    type = 'pdf';
                }

                if (/powerpoint/.test(fileType)) {
                    type = 'ppt';
                }

                if (/audio/.test(fileType)) {
                    type = 'audio';
                }

                if (/text/.test(fileType)) {
                    type = 'txt';
                }

                if (/excel/.test(fileType) || /spreadsheet/.test(fileType)) {
                    type = 'xls';
                }

                if (/zip/.test(fileType)) {
                    type = 'zip';
                }

                if (/word/.test(fileType)) {
                    type = 'word';
                }

                return type;
            };

            return UploaderFactory;

        }]);

})();

/**
 * Created by selinger on 13/12/17.
 */
(function () {

    'use strict';

    /**
     * @description This factory contains the methods for constructing the item item of the transactions.
     */
    angular.module('zze.transactions')
        .factory('zze.transactions.transactionItemFactory', transactionItemFactory);

    transactionItemFactory.$inject = ['$injector'];

    function transactionItemFactory($injector) {
        var CategoriesService = $injector.get('zze.categories.categoriesService'),

            publicMethods = {
                isAutomatic: isAutomatic,
                isCreditCard: isCreditCard,
                isCreditCardInvoice: isCreditCardInvoice,
                isInvoicePayment: isInvoicePayment,
                isTransference: isTransference,
                isTransaction: isTransaction,
                isCreditCardBillsPayment: isCreditCardBillsPayment,
                checkTransactionClass: checkTransactionClass,
                checkTransactionUnsuccessful: checkTransactionUnsuccessful,
                checkTransactionAccountId: checkTransactionAccountId,
                checkTransactionAccountUuid: checkTransactionAccountUuid,
                checkTransactionCategory: checkTransactionCategory,
                checkCategoryColor: checkCategoryColor,
                checkIconStyle: checkIconStyle,
                checkIconClass: checkIconClass,
                checkIconTitle: checkIconTitle,
                checkNumberRecurrence: checkNumberRecurrence,
                checkCreditCardBillsPaymentName: checkCreditCardBillsPaymentName,
                dateFormated: dateFormated,
                getCreditCardUuid: getCreditCardUuid,
                tagsSeparator: tagsSeparator
        };

        return publicMethods;

         /**
         * @description Check if it's an automatic transaction.
         *
         * @param {object} item Object with transaction data.
         * @returns {boolean}
         */
        function isAutomatic(item) {
            return (item.isTransaction || item.isTransference) && item.automatic;
        }

        /**
         * @description Check if it's a credit card invoice.
         *
         * @param {object} item Object with transaction data.
         * @returns {boolean}
         */
        function isCreditCardInvoice(item) {
            return item.type === 'CreditCardInvoice';
        }

        /**
         * @description Check if it's a Credit Cards.
         *
         * @param {object} item Object with transaction data.
         * @returns {boolean}
         */
        function isCreditCard(item) {
            return item.creditCardId && item.creditCardInvoiceId && item.type === 'Transaction';
        }

        /**
         * @description Check if it's a Invoice Payment.
         *
         * @param {object} item Object with transaction data.
         * @returns {boolean}
         */
        function isInvoicePayment(item) {
            return item.paidCreditCardId && item.paidCreditCardInvoiceId;
        }

        /**
         * @description Check if it's a transference.
         *
         * @param {object} item Object with transaction data.
         * @returns {boolean}
         */
        function isTransference(item) {
            return item.type === 'Transference';
        }

        /**
         * @description Check if it's a transaction.
         *
         * @param {object} item Object with transaction data.
         * @returns {boolean}
         */
        function isTransaction(item) {
            return item.type === 'Transaction';
        }

        /**
         * @description Check if it's a transaction.
         *
         * @param {object} item Object with transaction data.
         * @returns {boolean}
         */
        function isCreditCardBillsPayment(item) {
            return item.type === 'CreditCardBillsPayment';
        }

        /**
         * @description Get the credit card uuid.
         *
         * @param {object} item Object with transaction data.
         * @returns {string}
         */
        function getCreditCardUuid(item, collection) {
            return _.findWhere(collection, {
                id: item.creditCardId
            }).uuid;
        }

        /**
         * @description Returns class depending on transaction type.
         *
         * @param {object} item Object with transaction data.
         *
         * @returns {string}
         */
        function checkTransactionClass(item) {
            var classValue;

            if (item.type === 'Transference') {
                classValue = 'icon-transference-2';
            } else if (item.type === 'InitialAmount') {
                classValue = 'icon-circle zze-color-blue';
            } else if (item.type === 'CreditCardBillsPayment') {
                classValue = 'icon-circle icon-paid-creditcard-bill';
            } else if (item.type === 'CreditCardInvoice') {
                classValue = 'icon-empty-paper';
            } else {
                if (item.activityType === 0) {
                    classValue = 'icon-circle zze-color-red';
                } else {
                    classValue = 'icon-circle zze-color-green';
                }
            }
            return classValue;
        }

        /**
         * @description Checks if the transaction is open and overdue.
         *
         * @param {object} item Object with transaction.
         * @param {string} serverData Date with server.
         *
         * @returns {boolean}
         */
        function checkTransactionUnsuccessful(item, serverDate) {

            var todayServer = moment(serverDate),
                transactionDate = moment(item.date);

            return transactionDate < todayServer && !item.done && !isCreditCard(item);
        }

        /**
         * @description Checks data an account the transaction.
         *
         * @param {array} collection Collection with Accounts the user.
         * @param {string} id Id account the transaction.
         *
         * @returns {object}
         */
        function checkTransactionAccountId(collection, id) {
            return _.findWhere(collection, {
                id: id
            });
        }

        /**
         * @description Checks data an account the transaction.
         *
         * @param {array} collection Collection with Accounts the user.
         * @param {string} uuid Uuid account the transaction.
         *
         * @returns {object}
         */
        function checkTransactionAccountUuid(collection, uuid) {
            return _.findWhere(collection, {
                uuid: uuid
            });
        }

        /**
         * @description Checks data an category in transaction.
         *
         * @param {array} collection Collection with Categories the user.
         * @param {string} id Id category the transaction.
         *
         * @returns {object}
         */
        function checkTransactionCategory(collection, id) {

            var category = _.findWhere(collection, {
                id: id
            });

            if (category) {
                return category;
            }

            for (var i = 0, len = collection.length; i < len; i++) {

                var categoryChild = _.findWhere(collection[i].children, {
                    id: id
                });

                if (categoryChild) {
                    return categoryChild;
                }
            }

        }

        function checkCategoryColor(category) {
            return {
                'color': '#' + (category && category.color) || '000000'
            };
        }

        /**
         * @description Checks if there is an style icon.
         *
         * @param {object} item Transaction data.
         *
         * @returns {object}
         */
        function checkIconStyle(item) {

            if (item.isCreditCardInvoice) {
                return {
                    background: '#c1c1c1'
                };
            }

            if (item.isCreditCardBillsPayment) {
                return {
                    background: '#1AD274'
                };
            }

            if (item.isTransference) {
                return {
                    background: '#777777'
                };
            }

            /* jshint camelcase:false */
            if (item.category && item.category.group_id) {
                return {
                    background: '#' + item.category.color
                };
            }

            return {
                background: '#EEEEEE'
            };
        }

        /**
         * @description Checks if there is an icon for the posting or informs one of loading.
         *
         * @param {object} item Transaction data.
         *
         * @returns {string}
         */
        function checkIconClass(item) {

            if (item.isCreditCardBillsPayment) {
                return 'icon-paid-creditcard-bill';
            }

            if (item.isCreditCardInvoice) {
                return 'icon-empty-paper';
            }

            if (item.isTransference) {
                return 'icon-transference-2';
            }

            /* jshint camelcase:false */
            if (item.category && item.category.group_id) {
                return CategoriesService.getIconClass(item.category);
            }

            return 'zze-icon-loading icon-loading';
        }

        /**
         * @description Checks if there is an icon to enter the title at launch or informs one of loading.
         *
         * @param {object} item Transaction data.
         *
         * @returns {string}
         */
        function checkIconTitle(item, creditCards) {

            /* jshint camelcase:false */
            if (item.category && item.category.group_id) {
                return item.category.name;
            }

            if (item.isCreditCard) {

                var cardTitle = _.findWhere(creditCards, {
                    id: item.creditCardId
                });

                return cardTitle[0] && cardTitle[0].name ? cardTitle[0].name : '';
            }

            if (item.isTransference) {
                return 'Transfer';
            }

            if (item.isCreditCardInvoice) {
                return item.creditCardBillsPaymentName;
            }

            return 'Carregando...';
        }

        /**
         * @description Checks ther number recurrence in transaction.
         *
         * @param {object} item Transaction data.
         *
         * @returns {string}
         */
        function checkNumberRecurrence(item) {

            if (!item.hasLimitedRecurrence) {
                return;
            }

            return ' ' + item.repeatIndex + '/' + item.repeatTotal;
        }

        /**
         * @description Check the name of the Credit Card institution (bank).
         *
         * @param {object} item Transaction data.
         *
         * @returns {string}
         */
        function checkCreditCardBillsPaymentName(item, collection) {
            var cardTitle = _.findWhere(collection, {
                id: item.paidCreditCardId
            });

            if (!cardTitle) {
                cardTitle = _.findWhere(collection, {
                    id: item.creditCardId
                });
            }

            return cardTitle && cardTitle.name ? cardTitle.name : '';
        }

        function dateFormated(date) {
            return moment(date).format('DD/MM/YYYY');
        }

        /**
         * @name tagsSeparator
         * @description Add a separator between items in an array and return a mounted string.
         *
         * @param {array} arr Array with items that will receive the tab.
         * @param {string} separator Separator to be added in string assembly.
         *
         * @private
         * @returns {string}
         */
        function tagsSeparator(arr, separator) {

            if (!arr || !arr.length) {
                return '--';
            }

            var str = '';

            for (var i = 0, len = arr.length; i < len; i++) {
                if (i > 0) {
                    str += separator + ' ';
                }

                str += arr[i].name;
            }

            return str;
        }
    }

})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .factory('zze.transactions.transactionFactory', transactionFactory);

    transactionFactory.$inject = ['$injector', '$rootScope'];

    var isLegacyCategories = false;

    function transactionFactory($injector, $rootScope) {
        var $q = $injector.get('$q'),
            $filter = $injector.get('$filter'),

            MainFactory = $injector.get('zze.mainFactory'),
            CollectionsFactory = $injector.get('zze.collections.collectionsFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            Dialog = $injector.get('ngDialog'),
            GeneralFactory = $injector.get('zze.utils.generalFactory'),
            PermissionFactory = $injector.get('zze.permissions.permissionsFactory'),
            StorageFactory = $injector.get('zze.utils.storageFactory'),
            StringProcessFactory = $injector.get('zze.utils.stringProcessFactory'),
            CategoriesService = $injector.get('zze.categories.categoriesService'),
            InvoicesFactory = $injector.get('zze.creditCard.CreditCardInvoices'),

            PREVIEW_MODE_DEFAULT = 0,
            PREVIEW_MODE_ALL_TRANSACTIONS = 1,

            publicMethods = {
                setIsLegacyCategories: setIsLegacyCategories,

                sortTransactionCollection: sortTransactionCollection,
                closePopover: closePopover,
                startDate: startDate,
                endDate: endDate,
                isOutOfScope: isOutOfScope,
                updatePositionBarFixed: updatePositionBarFixed,
                redirectCreditCardBillsPayment: redirectCreditCardBillsPayment,

                cleanEntitySpecificSessionStorage: cleanEntitySpecificSessionStorage,
                checkTypeBalanceDisplay: checkTypeBalanceDisplay,
                checkDefaultDate: checkDefaultDate,
                checkDateMonthCurrent: checkDateMonthCurrent,
                checkNameCategoryInFilter: checkNameCategoryInFilter,
                checkShowIntroductionPage: checkShowIntroductionPage,
                availableTags: availableTags,

                getAccountsForFilter: getAccountsForFilter,
                getCreditCardsForFilter: getCreditCardsForFilter,
                getCreditCardInvoiceFor: getCreditCardInvoiceFor,
                getIndexCreditCard: getIndexCreditCard,
                getInvoicePaymentFor: getInvoicePaymentFor,
                getMonthAbreviated: getMonthAbreviated,
                getInstallmentValue: getInstallmentValue,
                getOptionsRecurrence: getOptionsRecurrence,
                getConfigsCtrl: getConfigsCtrl,
                getTagsArray: getTagsArray,
                getTagSelected: getTagSelected,
                getTagsString: getTagsString,
                getUrlInvoices: getUrlInvoices,
                getUrlPrintTransactions: getUrlPrintTransactions,
                getUrlRedirectReceipt: getUrlRedirectReceipt,
                getUrlsLegacy: getUrlsLegacy,
                getInvoiceDetails: getInvoiceDetails,
                isPreviewModeDefault: isPreviewModeDefault,
                isPreviewModeAllTransactions: isPreviewModeAllTransactions,

                setHighlight: setHighlight,
                setLineAnchor: setLineAnchor,
                getNameOfType: getNameOfType,
                setPaymentTransaction: setPaymentTransaction,

                // Show Dialogs.

                showCadTransaction: showCadTransaction,
                showExport: showExport,
                showTransactionsOverdue: showTransactionsOverdue,
                showCadTransference: showCadTransference,
                showPayCreditCard: showPayCreditCard,
                showDeleteTransactionConfirm: showDeleteTransactionConfirm,
                showUpdateAllConfirm: showUpdateAllConfirm,

                // Get data server.
                getAccountsApi: getAccountsApi,
                getCategoriesApi: getCategoriesApi,
                getCreditCardsApi: getCreditCardsApi,
                getTagsApi: getTagsApi,
                getTransactionsApi: getTransactionsApi,
                getTransactionsOverdueApi: getTransactionsOverdueApi,
                getTransactionsOverdueCountApi: getTransactionsOverdueCountApi,
                getTransactionsBalanceApi: getTransactionsBalanceApi,
                getTransactionsBalanceResultApi: getTransactionsBalanceResultApi,
                getTransactionComplementApi: getTransactionComplementApi,

                PREVIEW_MODE_DEFAULT: PREVIEW_MODE_DEFAULT,
                PREVIEW_MODE_ALL_TRANSACTIONS: PREVIEW_MODE_ALL_TRANSACTIONS,

                // CRUD Transactions.
                create: create,
                destroy: destroy,
                update: update
            };

        return publicMethods;

        function setIsLegacyCategories(value) {
            isLegacyCategories = value;
            CategoriesService.setIsLegacyCategories(isLegacyCategories);
        }

        function startDate() {
            return moment(StorageFactory.getSession('transactionsStartDate', false));
        }

        function endDate() {
            return moment(StorageFactory.getSession('transactionsEndDate', false));
        }

        function sortTransactionCollection(collectionCopy, order) {
            collectionCopy.sort(function (a, b) {
                if (order === 'asc') {
                    return new Date(a.date) - new Date(b.date);
                } else {
                    return new Date(b.date) - new Date(a.date);
                }
            });

            return collectionCopy;
        }

        /**
         * @description Check if transaction is scope in filters bar.
         * @param opts
         * @returns {boolean}
         */
        function isOutOfScope(opts) {

            // Check dates.
            if (!moment(opts.item.date).isBetween(opts.startDate, opts.endDate, null, '[]')) {
                return false;
            }

            // Check filter accounts.
            if (opts.filters.account.uuid !== 0) {
                var hasAccount = false;

                if (opts.filters.account.id === opts.item.accountId || opts.filters.account.id === opts.item.creditCardId) {
                    hasAccount = true;
                }

                if (opts.item.type === 'Transference') {

                    var _account = CollectionsFactory.findBy(opts.accounts, {
                        uuid: opts.item.debitAccountUuid
                    });

                    if (_account.id === opts.filters.account.id) {
                        hasAccount = true;
                    }
                }

                if (!hasAccount) {
                    return false;
                }
            }

            // Check filter categories.
            if (opts.filters.categories && opts.filters.categories.length) {
                var hasCategory = false;

                for (var i = 0, len = opts.filters.categories.length; i < len; i++) {

                    if (opts.filters.categories[i] === opts.item.categoryUuid) {
                        hasCategory = true;
                    }
                }

                if (!hasCategory) {
                    return false;
                }
            }

            // Check filter tags.
            if (opts.filters.tags && opts.filters.tags.length) {
                var hasTags = false;

                for (var j = 0, jlen = opts.item.tags.length; j < jlen; j++) {

                    for (var k = 0, klen = opts.filters.tags.length; k < klen; k++) {

                        if (opts.item.tags[j].name === opts.filters.tags[k]) {
                            hasTags = true;
                        }
                    }
                }

                if (!hasTags) {
                    return false;
                }
            }

            // Check filter type.
            if (opts.filters.type.value !== 'default') {

                var type = false;

                switch (opts.filters.type.value) {
                    case 'earnings':
                        if (opts.item.activityType === 1) {
                            type = true;
                        } break;
                    case 'earnings_paid':
                        if (opts.item.activityType === 1 && opts.item.done) {
                            type = true;
                        } break;
                    case 'earnings_pending':
                        if (opts.item.activityType === 1 && !opts.item.done) {
                            type = true;
                        } break;
                    case 'expenses':
                        if (opts.item.activityType === 0) {
                            type = true;
                        } break;
                    case 'expenses_paid':
                        if (opts.item.activityType === 0 && opts.item.done) {
                            type = true;
                        } break;
                    case 'expenses_pending':
                        if (opts.item.activityType === 0 && !opts.item.done) {
                            type = true;
                        } break;
                    case 'transferences':
                        if (opts.item.type === 'Transference') {
                            type = true;
                        } break;
                    case 'transferences_paid':
                        if (opts.item.type === 'Transference' && opts.item.done) {
                            type = true;
                        } break;
                    case 'transferences_pending':
                        if (opts.item.type === 'Transference' && !opts.item.done) {
                            type = true;
                        } break;
                    case 'infinite':
                        if (opts.item.hasInfiniteRecurrence) {
                            type = true;
                        } break;
                    case 'finite':
                        if (opts.item.hasLimitedRecurrence) {
                            type = true;
                        } break;
                }

                if (!type) {
                    return false;
                }
            }

            // Check filter search.
            if (opts.search && opts.item.description.toLowerCase().indexOf(opts.search.toLowerCase()) === -1) {
                return false;
            }

            return true;
        }

        function updatePositionBarFixed() {
            setTimeout(function () {
                $rootScope.$broadcast('zze-bar-fixed-top');
                $rootScope.$broadcast('zze-bar-fixed-bottom');
            }, 850);
        }

        function cleanEntitySpecificSessionStorage() {
            var storageKeysToDelete = [
                'transactionsSearch',
                'transactionsOverdue',
                'transactionsStartDate',
                'transactionsEndDate',
                'transactionsFilterType',
                'transactionsFilterCategories',
                'transactionsFilterTags',
                'transactionsFilterAccount'
            ];

            for (var i = 0, len = storageKeysToDelete.length; i < len; i++) {
                StorageFactory.removeSession(storageKeysToDelete[i]);
            }
        }

        function redirectCreditCardBillsPayment(item) {
            var endpoint = ContextFactory.getLegacyRouteProccess({
                    method: 'credit_cards_invoice',
                    replace: ':id',
                    value: item.creditCardInvoiceId || item.paidCreditCardInvoiceId
                }),
                url = StringProcessFactory.stringReplace(endpoint, ':credit_card_id', item.creditCardId || item.paidCreditCardId);

            $(document).trigger('angular:leaveApp', [url]);
        }

        function checkDefaultDate(today) {
            var todayObject = moment(today),
                startDateObject = moment(StorageFactory.getSession('transactionsStartDate')),
                currentMonthSelected = (todayObject.year() === startDateObject.year()) && (todayObject.month() === startDateObject.month()),
                dateDefault = currentMonthSelected ? today : StorageFactory.getSession('transactionsStartDate');

            return dateDefault;
        }

        function checkDateMonthCurrent() {
            var startDate = moment(StorageFactory.getSession('transactionsStartDate')).format("MMMM"),
                endDate = moment(StorageFactory.getSession('transactionsEndDate')).format("MMMM");

            return startDate === endDate;
        }

        /**
         * @description Category verification to be displayed without category filter.
         */
        function checkNameCategoryInFilter(categories, categoryFilter) {
            var arr = [];

            for (var i = 0, len = categories.length; i < len; i++) {
                var category = categories[i];

                if (category.uuid === categoryFilter) {
                    arr = category;
                    break;
                }

                if (category.children) {

                    for (var j = 0, lenC = category.children.length; j < lenC; j++) {
                        var children = category.children[j];

                        if (children.uuid === categoryFilter) {
                            arr = children;
                            break;
                        }
                    }
                }
            }

            return arr;
        }

        function checkShowIntroductionPage($scope) {
            if ($scope.main.contextSource.currentEntity.showIntro) {
                $scope.main.contextSource.currentEntity.showIntro = false;
            }
        }

        function availableTags(tags) {
            return tags;
        }

        function checkTypeBalanceDisplay(status) {

            if (status.filterOpen || status.searchOpen) {
                return sessionStorage.getItem('transactionsFilterType') ||
                    (sessionStorage.getItem('transactionsFilterCategories') && sessionStorage.getItem('transactionsFilterCategories') !== '[]') ||
                    (sessionStorage.getItem('transactionsFilterTags') && sessionStorage.getItem('transactionsFilterTags') !== '[]') ||
                    sessionStorage.getItem('transactionsSearch');
            }

            return false;
        }

        function getAccountsForFilter(accounts, isControlleFree) {

            if (isControlleFree) {
                var returningAccounts = CollectionsFactory.filterBy(accounts, {
                    default: true
                });

                // TODO: Rever este processo.
                if (_.isEmpty(returningAccounts)) {
                    returningAccounts = [accounts[0]];
                }

                return returningAccounts;
            }

            return CollectionsFactory.filterBy(accounts, {
                archived: false
            });
        }

        function getCreditCardsForFilter(creditCards) {

            return CollectionsFactory.filterBy(creditCards, {
                archived: false
            });
        }

        /**
         * @description Returns the invoice for this posting.
         *
         * @param {object} item Object with transaction data.
         * @returns {string}
         *
         * TODO - Please, create test unit :)
         */
        function getCreditCardInvoiceFor(item, inCollection) {
            return _.find(inCollection, function (transaction) {
                return transaction.id === String(item.creditCardId + '-' + item.creditCardInvoiceId);
            });
        }

        function getIndexCreditCard(collection, item) {
            return CollectionsFactory.findIndex(collection, {
                type: 'CreditCardInvoice',
                creditCardId: item.paidCreditCardId,
                creditCardInvoiceId: item.paidCreditCardInvoiceId
            });
        }

        /**
         * @description Returns the invoice payment related to this posting.
         *
         * @param {object} item Object with transaction data.
         * @param {array} inCollection Collection with all the existing launches in the view.
         *
         * @returns {string}
         *
         * TODO - Please, create test unit :)
         */
        function getInvoicePaymentFor(item, inCollection) {
            return _.find(inCollection, function (transaction) {
                return transaction.paidCreditCardId === item.creditCardId &&
                    transaction.paidCreditCardInvoiceId === item.creditCardInvoiceId;
            });
        }

        function getMonthAbreviated(date) {
            var str = moment(date).format('MMM');

            return str.toLocaleLowerCase();
        }

        /**
         * @description Returns the installment value in cents.
         *
         * @param {int} amountInCents Installment value.
         * @param {int} times Installment times.
         */
        function getInstallmentValue(amountInCents, times) {
            return Number((amountInCents / times).toFixed(3).slice(0, -1).replace(/\./g, ""));
        }

        /**
         * @description Returns name of transaction type.
         *
         * @param {object} item Object with transaction data.
         *
         * @returns {string}
         */
        function getNameOfType(item) {
            var nameValue;

            if (item.type === 'Transference') {
                nameValue = 'Transferência';
            } else if (item.type === 'InitialAmount') {
                nameValue = 'Saldo inicial';
            } else if (item.type === 'CreditCardBillsPayment') {
                nameValue = 'Pagamento de cartão';
            } else {
                if (item.activityType === 0) {
                    nameValue = 'Despesa';
                } else {
                    nameValue = 'Receita';
                }
            }

            return nameValue;
        }

        /**
         * @description Returns true if the current preview mode set is all transactions.
         *
         * @returns {boolean}
         */
        function isPreviewModeAllTransactions() {
            return StorageFactory.getLocal('transactionsPreviewMode_' + MainFactory.currentEntity().id, true) === PREVIEW_MODE_ALL_TRANSACTIONS;
        }

        /**
         * @description Returns true if the current preview mode set is default.
         *
         * @returns {boolean}
         */
        function isPreviewModeDefault() {
            return StorageFactory.getLocal('transactionsPreviewMode_' + MainFactory.currentEntity().id, true) === PREVIEW_MODE_DEFAULT;
        }

        function getConfigsCtrl(today) {
            return {
                periods: {
                    ctrl: 'transactions',
                    tracker: 'loadFilter',
                    methodUpdateCollections: 'getToExternalTransactions',
                    dateTodayServer: today
                },
                filter: {
                    ctrl: 'transactions',
                    getDataSearch: 'getTransactionsSearch',
                    clearDataFilter: 'clearTransactionsFilter',
                    trackerName: 'loadFilter',
                    showSearch: true
                },
                optionsTransactionControlle: {
                    width: 222,
                    reCalcTop: -5,
                    toggle: 'click',
                    overflowX: 'inherit',
                    overflowY: 'inherit',
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-options-transaction-controlle.template.html')
                },
                transactionAttachments: {
                    reCalcTop: -7,
                    reCalcLeft: -4,
                    width: 242,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-attachments.template.html')
                },
                transactionObservation: {
                    reCalcTop: -7,
                    reCalcLeft: -4,
                    width: 190,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-observation.template.html')
                },
                transactions: {
                    // createToBody: true,
                    reCalcLeft: 4,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-options.template.html')
                },
                tools: {
                    reCalcTop: -10,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-tools.template.html')
                },
                filterType: {
                    width: 210,
                    maxHeight: 450,
                    overflowY: 'auto',
                    reCalcTop: -17,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-filter-type.template.html')
                },
                filterAccount: {
                    width: 210,
                    maxHeight: 350,
                    overflowY: 'auto',
                    reCalcTop: -17,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-filter-account.template.html')
                },
                filterCategory: {
                    width: 210,
                    maxHeight: 350,
                    overflowY: 'auto',
                    reCalcTop: -17,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-filter-category.template.html')
                },
                filterTag: {
                    width: 210,
                    maxHeight: 350,
                    overflowY: 'auto',
                    reCalcTop: -17,
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-popover-filter-tag.template.html')
                }
            };
        }

        function getTagsString(arr, attr) {
            if (!arr) {
                return;
            }

            var str = '';

            for (var i = 0, len = arr.length; i < len; i++) {
                str += i > 0 ? ', ' : '';
                str += attr ? arr[i][attr] : arr[i];
            }

            return str;
        }

        function getTagsArray(arr, attr) {
            if (!arr) {
                return;
            }

            var str = [];

            for (var i = 0, len = arr.length; i < len; i++) {
                str.push(attr ? arr[i][attr] : arr[i]);
            }

            return str;
        }

        function getTagSelected(tags) {
            var len = tags.length;

            if (len === 0) {
                return 'Tags';
            }

            return len === 1 ? tags[0] : len + ' tags';
        }

        function getOptionsRecurrence(type) {
            return [{
                value: 'yearly',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.years') :
                    $filter('translate')('transactions.periodicity.fixed.annual')
            }, {
                value: 'sixmonthly',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.semesters') :
                    $filter('translate')('transactions.periodicity.fixed.semiannually')
            }, {
                value: 'trimonthly',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.quarters') :
                    $filter('translate')('transactions.periodicity.fixed.quarterly')
            }, {
                value: 'bimonthly',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.bimesters') :
                    $filter('translate')('transactions.periodicity.fixed.bimonthly')
            }, {
                value: 'monthly',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.months') :
                    $filter('translate')('transactions.periodicity.fixed.monthly')
            }, {
                value: 'biweekly',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.fortnight') :
                    $filter('translate')('transactions.periodicity.fixed.biweekly')
            }, {
                value: 'weekly',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.weeks') :
                    $filter('translate')('transactions.periodicity.fixed.weekly')
            }, {
                value: 'daily',
                description: type === 'finite' ?
                    $filter('translate')('transactions.periodicity.installment.days') :
                    $filter('translate')('transactions.periodicity.fixed.daily')
            }];
        }

        function getUrlInvoices(item) {
            return ContextFactory.getEndPointProccess({
                method: 'show',
                enums: 'credit_card_invoices',
                replace: ':id',
                value: item.creditCardInvoiceId
            }).replace('%3Acredit_card_id', item.creditCardId);
        }

        function getInvoiceDetails(item) {
            if (item.isCreditCard) {
                return moment(InvoicesFactory.getInvoiceMonth(item.creditCardInvoiceId)).format("MMMM YYYY");
            }
        }

        function getUrlsLegacy() {
            return {
                creditCard: ContextFactory.getLegacyRoute('credit_cards'),
                transactionPrint: ContextFactory.getLegacyRoute('transactions_print'),
                transactionSettings: ContextFactory.getLegacyRoute('transactions_preferences'),
                transactionExport: ContextFactory.getLegacyRoute('transactions_export_xls'),
                transactionImport: ContextFactory.getLegacyRoute('conciliations_new_account_statement')
            };
        }

        function getUrlPrintTransactions(model) {

            var url = ContextFactory.getLegacyRoute('transactions_zze_old_print'),
                arr = {};

            url += '?start_date=' + StorageFactory.getSession('transactionsStartDate');
            url += '&end_date=' + StorageFactory.getSession('transactionsEndDate');

            if (StorageFactory.getSession('transactionsSearch')) {
                url += '&search=' + StorageFactory.getSession('transactionsSearch');
            }

            if (model.type.value !== 'default') {
                arr.presets = [model.type.value];
            }

            if (model.account.uuid !== 0) {
                arr.accounts = [model.account.uuid];
            }

            if (model.tags.length) {
                arr.tags = model.tags;
            }

            if (model.categories.length) {
                arr.categories = model.categories;
            }

            if (!GeneralFactory.isEmptyObj(arr)) {
                url += '&filters=' + JSON.stringify(arr);
            }

            return url;
        }

        function getUrlRedirectReceipt(item) {
            var url = ContextFactory.getLegacyRouteProccess({
                method: 'new_receipt',
                replace: ':transaction_id',
                value: item.id
            });

            if (item.receiptId) {
                var _url = ContextFactory.getLegacyRouteProccess({
                    method: 'show_receipt',
                    replace: ':id',
                    value: item.receiptId
                });

                url = StringProcessFactory.stringReplace(_url, ':transaction_id', item.id);
            }

            return url;
        }

        function setLineAnchor(id) {
            setTimeout(function () {
                $("#line-anchor-" + id).trigger('click');
            }, 300);
        }

        function setHighlight(id) {
            setTimeout(function () {
                $("#line-" + id).addClass('highlight');
                setTimeout(function () {
                    $("#line-" + id).removeClass('highlight');
                }, 500);
            }, 700);
        }

        function closePopover() {
            setTimeout(function () {
                $(document).trigger('click');
            }, 50);
        }

        function showExport(opts) {
            var settings = _.extend({
                template: $filter('assetPath')('templates/modules/transactions/templates/transactions-export.dialog.html'),
                controller: 'zze.transactions.ExportCtrl',
                controllerAs: 'export',
                width: 470,
                closeByDocument: false
            }, opts);

            Dialog.open(settings);
        }

        function showCadTransaction(opts) {
            var settings;

            if (opts.automaticDialog) {
                settings = _.extend({
                    template: $filter('assetPath')('templates/modules/transactions/templates/automatic-transaction.dialog.html'),
                    controller: 'zze.transactions.NewTransactionCtrl',
                    controllerAs: 'transaction',
                    closeByDocument: false,
                    className: 'theme-organizze transactions-dialog-theme automaticDialog',
                    width: 400
                }, opts);
            } else {
                settings = _.extend({
                    template: $filter('assetPath')('templates/modules/transactions/templates/transactions-new-transaction-cad.dialog.html'),
                    controller: 'zze.transactions.NewTransactionCtrl',
                    controllerAs: 'transaction',
                    closeByDocument: false,
                    className: 'theme-organizze transactions-dialog-theme',
                    width: 490
                }, opts);
            }

            Dialog.openConfirm(settings);
        }

        function showTransactionsOverdue(opts) {
            var settings = _.extend({
                template: $filter('assetPath')('templates/modules/transactions/templates/transactions-overdue.dialog.html'),
                controller: 'zze.transactions.OverdueCtrl',
                controllerAs: 'overdue',
                className: 'theme-organizze transactions-dialog-theme',
                width: 650,
                closeByDocument: false
            }, opts);

            Dialog.open(settings);
        }

        function showCadTransference(opts) {
            var settings = _.extend({
                template: $filter('assetPath')('templates/modules/transactions/templates/transactions-new-transfer-cad.dialog.html'),
                controller: 'zze.transactions.NewTransferCtrl',
                controllerAs: 'transfer',
                className: 'theme-organizze transactions-dialog-theme',
                width: 490,
                closeByDocument: false
            }, opts);

            Dialog.open(settings);
        }

        function showPayCreditCard(scope, item, transactionList, skipCallback) {
            Dialog.open({
                template: $filter('assetPath')('templates/modules/transactions/templates/transactions-pay-credit-card-cad.dialog.html'),
                controller: 'zze.transactions.PayCreditCardCtrl',
                controllerAs: 'pay',
                className: 'theme-organizze transactions-dialog-theme',
                scope: scope,
                width: 490,
                data: {
                    item: item,
                    options: {
                        ctrl: 'transactions',
                        save: 'callbackDialogSave',
                        transactionList: transactionList || 'transactions',
                        skipCallback: skipCallback || false,
                        scope: scope
                    }
                },
                closeByDocument: false
            });
        }

        function showDeleteTransactionConfirm(opts) {
            var options = _.extend({
                template: $filter('assetPath')('templates/modules/transactions/templates/transactions-confirm.dialog.html'),
                controller: 'zze.transactions.ConfirmCtrl',
                controllerAs: 'confirm',
                width: 420,
                closeByNavigation: false,
                closeByDocument: false
            }, opts);

            Dialog.open(options);
        }

        function showUpdateAllConfirm(opts) {
            var options = _.extend({
                template: $filter('assetPath')('templates/modules/transactions/templates/transactions-confirm-update-all.dialog.html'),
                controller: 'zze.transactions.ConfirmUpdateAllCtrl',
                controllerAs: 'confirmUpdateAll',
                width: 420,
                showClose: false,
                closeByNavigation: false,
                closeByDocument: false,
                closeByEscape: false
            }, opts);

            Dialog.open(options);
        }

        // Get data server API.
        function getAccountsApi(includeBalance) {
            /* jshint camelcase: false */
            var url = ContextFactory.getEndPoint('index', 'accounts');

            var balance = includeBalance ? 0 : 1;

            return CrudFactory.getAll(url, {
                params: {
                    without_balances: balance
                }
            });
        }

        function getCategoriesApi() {
            var deferred = $q.defer();

            CategoriesService.fetchCategories().then(function (resp) {
                if (resp.expenses && resp.earnings) {
                    var allCategories = resp.expenses.concat(resp.earnings);
                    deferred.resolve(allCategories);
                } else {
                    deferred.resolve(resp);
                }
            });

            return deferred.promise;
        }

        function getCreditCardsApi() {
            var url = ContextFactory.getEndPoint('index', 'credit_cards');

            return CrudFactory.getAll(url, {
                params: {
                    status: 'all'
                }
            });
        }

        function getTagsApi() {
            var url = ContextFactory.getEndPoint('index', 'tags');

            return CrudFactory.getAll(url);
        }

        function getTransactionsApi(options) {
            var url = ContextFactory.getEndPoint('index', 'transactions'),

                /* jshint camelcase:false */
                opts = _.extend({
                    filters: {
                        presets: null,
                        accounts: null,
                        tags: null,
                        categories: null
                    },
                    search: StorageFactory.getSession('transactionsSearch'),
                    start_date: StorageFactory.getSession('transactionsStartDate'),
                    end_date: StorageFactory.getSession('transactionsEndDate'),
                    offset: null,
                    page_size: null,
                    list_type: isPreviewModeAllTransactions() ? "all" : ""
                }, options);

            return CrudFactory.getOne(url, {
                params: opts
            });
        }

        function getTransactionsOverdueApi() {
            var url = ContextFactory.getEndPoint('overdue_transactions', 'transactions');

            /* jshint camelcase:false */
            return CrudFactory.getOne(url, {
                params: {
                    end_date: new Date()
                }
            });
        }

        function getTransactionsOverdueCountApi() {
            var url = ContextFactory.getEndPoint('overdue_transactions_totals', 'transactions');

            /* jshint camelcase:false */
            return CrudFactory.getOne(url, {
                params: {
                    end_date: new Date()
                }
            });
        }

        function getTransactionsBalanceApi(options) {

            if (!PermissionFactory.checkAccessAction('transaction', ['balance'])) {
                var deferred = $q.defer();

                deferred.resolve({
                    data: []
                });

                return deferred.promise;
            }

            var url = ContextFactory.getEndPoint('transactions_results', 'transactions'),

                /* jshint camelcase:false */
                opts = _.extend({
                    filters: {
                        presets: null,
                        accounts: null,
                        tags: null,
                        categories: null
                    },
                    search: StorageFactory.getSession('transactionsSearch'),
                    start_date: StorageFactory.getSession('transactionsStartDate'),
                    list_type: isPreviewModeAllTransactions() ? "all" : "",
                    end_date: StorageFactory.getSession('transactionsEndDate')
                }, options);

            return CrudFactory.getOne(url, {
                params: opts
            });
        }

        function getTransactionsBalanceResultApi(options) {
            var url = ContextFactory.getEndPoint('transactions_results_balance', 'transactions'),

                /* jshint camelcase:false */
                opts = _.extend({
                    filters: {
                        presets: null,
                        accounts: null,
                        tags: null,
                        categories: null
                    },
                    search: StorageFactory.getSession('transactionsSearch'),
                    start_date: StorageFactory.getSession('transactionsStartDate'),
                    list_type: isPreviewModeAllTransactions() ? "all" : "",
                    end_date: StorageFactory.getSession('transactionsEndDate')
                }, options);

            return CrudFactory.getOne(url, {
                params: opts
            });
        }

        function getTransactionComplementApi(item) {
            var url = ContextFactory.getEndPointProccess({
                method: 'show',
                replace: ':id',
                enums: 'transactions',
                value: item.id
            });

            return CrudFactory.getOne(url);
        }

        function setPaymentTransaction(item) {
            var url = ContextFactory.getEndPointProccess({
                method: item.done ? 'pay' : 'unpay',
                replace: ':id',
                enums: 'transactions',
                value: item.id
            });
            return CrudFactory.post(url);
        }

        // CRUD Transactions API.
        function create(data) {
            var url = ContextFactory.getEndPoint('create', 'transactions');

            return CrudFactory.post(url, data);
        }

        function update(id, data) {
            var url = ContextFactory.getEndPointProccess({
                enums: 'transactions',
                method: 'update',
                replace: ':id',
                value: id
            });

            return CrudFactory.put(url, data);
        }

        function destroy(item, deleteRecursive) {
            var url = ContextFactory.getEndPointProccess({
                method: 'delete',
                replace: ':id',
                value: item.id
            }) + '.json',
                updateFuture = deleteRecursive ? {
                    params: {
                        'transaction[recurrence_update]': 'update_future'
                    }
                } : {};

            return CrudFactory.destroy(url, updateFuture);
        }
    }
})();

/**
 * Created by selinger on 24/10/17.
 */
(function () {

    'use strict';

    angular.module('zze.commons')
        .service('zze.commons.zzePaginationService', zzePaginationService);

    function zzePaginationService () {

        var $window = $(window),

            publicMethods = {
                checkScrollTop: checkScrollTop,
                checkScrollBottom: checkScrollBottom
            };

        return publicMethods;

        function checkScrollTop () {
            return $window.scrollTop() === 0;
        }

        function checkScrollBottom () {
            var scroolTopPosition = $window.scrollTop() + $window.height(),
                windowHeight = $(document).height() - 800;

            return scroolTopPosition > windowHeight;
        }
    }
})();

(function () {

    'use strict';

    /**
     * @ngdoc overview
     * @name zze.commons
     */
    angular.module('zze.commons')
        /**
         * @ngdoc service
         * @name zze.commons.promiseTrackerService
         *
         * @description Facilitator to manage the creation of several promises.
         */
        .service('zze.commons.promiseTrackerService', promiseTrackerService);

    promiseTrackerService.$inject = ['$injector'];

    function promiseTrackerService ($injector) {
        var promiseTracker = $injector.get('promiseTracker');

        var publicMethods = {
            /**
             * @ngdoc method
             * @name create
             * @methodOf zze.commons.promiseTrackerService
             *
             * @param {array} namePromises Array strings with the names of the promises that will be created.
             *
             * @description Create a PromiseTrackers object as names based on <i>Array</i>.
             *
             * @example
             *  <example module="zze">
             *     <pre>
             *         (function () {
             *
             *             'use strict';
             *
             *              angular.module('zze')
             *                 .controller('MyController', MyController);
             *
             *              MyController.$inject = ['$injector'];
             *
             *              function MyController ($injector) {
             *                  var PromiseTracker = $injector.get('zze.commons.promiseTrackerService');
             *
             *                  var trackers = PromiseTracker.create(['save', 'list']);
             *              };
             *          })();
             *      </pre>
             *  <example>
             */
            create: _create
        };

        return publicMethods;

        function _create (trackerNameList) {
            if (!Array.isArray(trackerNameList) || !trackerNameList.length) {
                throw new Error('You must contain at least one item in the Array of promises.');
            }

            return new Model(trackerNameList);
        }

        function Model (trackerNameList) {
            var promise = {};

            for (var i = trackerNameList.length - 1; i > -1; i--) {
                promise[trackerNameList[i]] = promiseTracker();
            }

            _.extend(this, promise);
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .factory('zze.categories.legacyCategoriesService', legacyCategoriesService);

    legacyCategoriesService.$inject = ['$injector'];

    function legacyCategoriesService($injector) {
        var $q = $injector.get('$q'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            $filter = $injector.get('$filter'),

            categories = [],

            publicMethods = {
                fetchCategories: fetchCategories,
                isParentCategory: isParentCategory,
                getSelectizeConfig: getSelectizeConfig
            };

        return publicMethods;

        function fetchCategories() {
            var url = ContextFactory.getEndPoint('index', 'categories'),
                deferred = $q.defer();

            CrudFactory.getAll(url).then(function (resp) {
                _createCategoriesData(resp.data);
                deferred.resolve(categories);
            });

            return deferred.promise;
        }

        function isParentCategory(category) {
             /* jshint camelcase:false */
            return _.isBlank(category.parent_uuid);
        }

        function getSelectizeConfig(_categories) {
            var selectizeCategories = [],
                selectizeItemHTML;

            for (var i = 0; i < _categories.length; i++) {
                var category = _categories[i];
                selectizeCategories.push(category);
                if (category.children) {
                    for (var i2 = 0; i2 <= (category.children.length - 1); i2++) {
                        var child = category.children[i2];
                        selectizeCategories.push(child);
                    }
                }
            }

            selectizeItemHTML = function (category, escape) {
                /* jshint camelcase:false */
                var str = '',
                    isParentCat = isParentCategory(category),
                    extraClass = isParentCat ? 'zze-icon-left' : 'zze-child-ident';

                str += '<div class="category zze-truncate ' + extraClass + '">';

                if (isParentCat) {
                    str += '<span style="background: #' + category.color + ';" class="zze-color-category"></span>';
                }

                str += '<span class="zze-selectize-label">' + escape(category.name) + '</span></div>';

                return str;
            };

            return {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'uuid',
                searchField: ['name'],
                options: selectizeCategories,
                placeholder: $filter('translate')('transactions.placeholders.enter_category'),
                includeChildren: true,
                render: {
                    item: selectizeItemHTML,
                    option: selectizeItemHTML,
                }
            };
        }

        function _createCategoriesData(rawCategories) {
            var i, children = {};
            categories = [];

            for (i = 0; i < rawCategories.length; i++) {
                var category = rawCategories[i];

                /* jshint camelcase:false */
                if (_.isBlank(category.parent_uuid)) {
                    category.children = [];
                    categories.push(category);
                } else {
                    if (_.isBlank(children[category.parent_uuid])) {
                        children[category.parent_uuid] = [];
                    }
                    children[category.parent_uuid].push(category);
                }
            }

            for (i = 0; i < categories.length; i++) {
                var _category = categories[i];
                _category.children = children[_category.uuid];
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.categories')
        .factory('zze.categories.categoriesService', categoriesService);

    categoriesService.$inject = ['$injector'];

    var _isLegacyCategories = false;

    function categoriesService($injector) {
        var $q = $injector.get('$q'),
            CrudFactory = $injector.get('zze.commons.crudFactory'),
            ContextFactory = $injector.get('zze.commons.contextFactory'),
            LegacyCategoriesService = $injector.get('zze.categories.legacyCategoriesService'),
            $filter = $injector.get('$filter'),

            categories = {
                earnings: [],
                expenses: []
            },

            TAB_EXPENSES = 1,
            TAB_EARNINGS = 0,

            publicMethods = {
                fetchCategories: fetchCategories,
                isParentCategory: isParentCategory,
                getSortCategories: getSortCategories,
                setIsLegacyCategories: setIsLegacyCategories,
                getSelectizeConfig: getSelectizeConfig,
                isLegacyCategories: isLegacyCategories,
                getRangeColorForNewCategories: getRangeColorForNewCategories,
                fetchNewCategoryGroups: fetchNewCategoryGroups,
                setHighlight: setHighlight,
                getIconClass: getIconClass,
                TAB_EXPENSES: TAB_EXPENSES,
                TAB_EARNINGS: TAB_EARNINGS
            };

        return publicMethods;

        function setIsLegacyCategories(value) {
            _isLegacyCategories = value;
        }

        function isLegacyCategories() {
            return _isLegacyCategories === true;
        }

        function getRangeColorForNewCategories() {
            var colors = [
                "afafaf", "787878", "fca52d", "ffa490",
                "f98159", "fb6467", "ff494d", "94cd7a",
                "86bb5d", "ec61a1", "ff5692", "e454ed",
                "82c8f1", "5096de", "5161b9", "8976bf",
                "7253c8", "d9aa6a", "855f2a"
            ];

            return colors;
        }

        function isBlockedTo(item) {
            return !item.fixed && window.Context.currentEntity.planName === 'free';
        }

        function setHighlight(id, setAnchor) {
            if (setAnchor) {
                setTimeout(function () {
                    $("#line-anchor-" + id).trigger('click');
                }, 300);
            }

            setTimeout(function () {
                $("#category-" + id).addClass('highlight');
                setTimeout(function () {
                    $("#category-" + id).removeClass('highlight');
                }, 500);
            }, 700);
        }

        function isParentCategory(category) {
            return LegacyCategoriesService.isParentCategory(category);
        }

        function fetchCategories(options) {
            if (isLegacyCategories()) {
                return LegacyCategoriesService.fetchCategories();
            }

            var url = ContextFactory.getEndPoint('index', 'categories'),
                deferred = $q.defer(),
                settings = options || {};

            CrudFactory.getAll(url).then(function (resp) {
                _createCategoriesData(resp.data, settings);
                deferred.resolve(categories);
            });

            return deferred.promise;
        }

        function getSelectizeConfig(_categories, options) {
            if (isLegacyCategories()) {
                return LegacyCategoriesService.getSelectizeConfig(_categories);
            }

            var selectizeCategories = [],
                settings = options || {},
                selectizeItemHTML;

            _categories = _.filter(angular.copy(_categories), function (catg) {
                return (settings.includeArchived || catg.available) && !isBlockedTo(catg);
            });

            if (settings.includeChildren) {
                for (var i = 0; i < _categories.length; i++) {
                    if (settings.excludeItem && settings.excludeItem === _categories[i].id) { continue; }
                    var category = _categories[i];
                    selectizeCategories.push(category);
                    if (category.children) {
                        for (var i2 = 0; i2 <= (category.children.length - 1); i2++) {
                            var child = category.children[i2];
                            if (settings.excludeItem && settings.excludeItem === child.id) { continue; }
                            selectizeCategories.push(child);
                        }
                    }
                }
            } else {
                selectizeCategories = _categories;
            }

            selectizeItemHTML = function (category, escape) {

                /* jshint camelcase:false */
                var str = '',
                    isParentCat = isParentCategory(category),
                    extraClass = isParentCat ? '' : 'zze-child-ident';

                str += '<div class="category zze-truncate zze-icon-left ' + extraClass + '">';

                /* jshint camelcase:false */
                category.iconClasName = getIconClass(category);

                str += '<i class="zze-icon-categories ' + category.iconClasName + '" style="background: #' + category.color + '"></i>';

                str += '<span class="zze-selectize-label">' + escape(category.name) + '</span></div>';

                return str;
            };

            return {
                plugins: ['clear_button'],
                persist: false,
                maxItems: 1,
                valueField: 'uuid',
                searchField: ['name'],
                options: selectizeCategories,
                placeholder: $filter('translate')('transactions.placeholders.enter_category'),
                disabledField: true,
                includeChildren: true,
                render: {
                    item: selectizeItemHTML,
                    option: selectizeItemHTML
                }
            };
        }

        function fetchNewCategoryGroups() {
            var url = ContextFactory.getEndPoint('groups', 'categories'),
                deferred = $q.defer();

            CrudFactory.getAll(url).then(function (resp) {
                deferred.resolve(resp.data);
            });

            return deferred.promise;
        }

        function getIconClass(item) {
            /* jshint camelcase:false */
            return item.fixed || item.is_fixed_parent ? 'icon-category-' + item.group_id.replace(/_/g, '-') : 'icon-' + item.group_id.replace(/exp_|ear_/g, '').replace(/_/g, '-');
        }

        function getSortCategories(categories) {
            categories.sort(function (a, b) {
                let lowercaseA = a.name.toLowerCase(),
                    lowercaseB = b.name.toLowerCase();

                if (!$.isNumeric(lowercaseA) && !$.isNumeric(lowercaseB)) {
                    var aA = lowercaseA;
                    var bA = lowercaseB;
                    return aA > bA ? 1 : -1;
                } else if (!$.isNumeric(lowercaseA)) {
                    return 1;
                } else if (!$.isNumeric(lowercaseB)) {
                    return -1;
                } else {
                    let AInt = parseInt(lowercaseA, 10),
                        BInt = parseInt(lowercaseB, 10);

                    return AInt < BInt ? 1 : -1;
                }
            });
        }

        function _createCategoriesData(rawCategories, settings) {
            var i, children = {};

            categories.earnings = [];
            categories.expenses = [];
            categories.archived = [];
            categories.archived.expenses = [];
            categories.archived.earnings = [];

            for (i = 0; i <= (rawCategories.length - 1); i++) {
                var category = rawCategories[i];

                if (category.kind !== 'none') {
                    /* jshint camelcase:false */
                    if (_.isBlank(category.parent_uuid)) {
                        if (settings.splitArchived) {
                            if (category.available) {
                                category.children = [];
                                categories[category.kind].push(category);
                            } else {
                                category.children = [];
                                categories.archived[category.kind].push(category);
                            }
                        } else {
                            category.children = [];
                            categories[category.kind].push(category);
                        }
                    } else {
                        if (_.isBlank(children[category.parent_uuid])) {
                            children[category.parent_uuid] = [];
                        }
                        children[category.parent_uuid].push(category);
                    }
                }
            }

            getSortCategories(categories.expenses);
            getSortCategories(categories.earnings);

            for (i = 0; i < categories.expenses.length; i++) {
                var expenseCategory = categories.expenses[i];
                expenseCategory.children = children[expenseCategory.uuid];
            }

            for (i = 0; i < categories.earnings.length; i++) {
                var earningCategory = categories.earnings[i];
                earningCategory.children = children[earningCategory.uuid];
            }
        }
    }
})();

(function () {

    'use strict';

    angular.module('zze.transactions')
        .animation('.input-row', function () {

            var afterShowRow = function ($element) {
                window.setTimeout(function () {
                    var elen = $('input[type=text]:first, textarea:first', $element);

                    if (elen.hasClass('selectized')) {
                        var newElem = elen.parent().find('.selectize-input input[type=text]');

                        newElem.focus();
                    } else {
                        elen.focus();
                    }

                    $element.parents('*[dynamic-tabindex]:first').trigger('dynamicTabindex:refresh');
                }, 100);
            };

            return {
                enter: function (element) {
                    var $element = $(element);
                    var $wrapper = $element.parent();
                    var $lastVisibleRow = $wrapper.find('> .input-row:visible:last');

                    $lastVisibleRow.after($element);

                    afterShowRow($element);
                },

                removeClass: function (element, className) {
                    if (className === 'ng-hide') {
                        var $element = $(element),
                            $wrapper = $element.parent(),
                            $lastVisibleRow = $wrapper.find('> .input-row:visible:last');

                        $lastVisibleRow.after($element);

                        afterShowRow($element);
                    }
                }
            };
        });
})();

(function () {

    'use strict';

    /**
     * @name DatePicker
     * @param element Element jQuery.
     * @param opts Settings to datePicker
     * @constructor
     *
     * @description Extend prototype to ui-datepicker with settings defaults
     */
    var DatePicker = function (element, opts) {
        var _this = this;

        _this.$input = element;

        // Settings default plugin zzeDatePicker.
        var options = _.extend({
            dateFormat: "dd/mm/yy",
            showButtonPanel: true,
            showOn: "button",
            buttonImageOnly: true,

            beforeShow: function () {
                $('.ui-datepicker-trigger').attr('title', null);
                $('#ui-datepicker-div').addClass('zze-datepicker');
            }
        }, opts);

        _this.$input
            .datepicker(options)
            .on('keydown.zze.DatePicker', function (event) {
                _this.keydown(event);
            })
            .on('focus.zzeDatePicker', function () {
                _this.show();
            });
    };

    DatePicker.prototype = {

        templateButtonPanel: function () {

            if ($('#ui-datepicker-today').length) {
                return;
            }

            var _this = this,
                newButtonPane = $('#ui-datepicker-div').find('.ui-datepicker-buttonpane');

            $('<button>', {
                text: 'Hoje',
                click: function() {
                    _this.$input.datepicker('setDate', moment().format('DD/MM/YYYY'));
                    _this.hide();
                }
            })
            .attr('id','ui-datepicker-today')
            .addClass('ui-datepicker-button ui-state-default ui-priority-secondary ui-corner-all')
            .appendTo( newButtonPane );
        },

        show: function () {
            this.$input
                .datepicker('show');

                this.templateButtonPanel();
        },

        hide: function () {
            this.$input
                .datepicker('hide')
                .prop('focus', true);
        },

        destroy: function () {
            this.$input.datepicker('destroy');
        },

        keydown: function (event) {
            var scope = this,
                keyCode = event.keyCode || event.which,
                getDate = scope.$input.datepicker('getDate');

            scope.currentDate = getDate || new Date();

            if (keyCode === 9) {
                scope.$input.trigger('zzeDatePicker.tab', scope.currentDate);
                scope.hide();
            }

            if (keyCode === 13) {
                scope.hide();
            }

            if (keyCode === 27) {
                scope.$input.trigger('zzeDatePicker.esc');
                scope.hide();
            }

            // Navigation with keyboard.
            if (keyCode === 39) {
                scope.arrowHandlerRight();
            }

            if (keyCode === 37) {
                scope.arrowHandlerLeft();
            }

            if (keyCode === 38) {
                scope.arrowHandlerTop();
            }

            if (keyCode === 40) {
                scope.arrowHandlerDown();
            }
        },

        isLeapYear: function (y) {

            if (y % 4 !== 0) {
                return false;
            }

            if (y % 400 === 0) {
                return true;
            }

            return y % 100 !== 0;
        },

        // Navigation in datepicker with keyboard.
        arrowHandlerTop: function () {
            var navegationDate = this.currentDate;

            navegationDate.setDate(navegationDate.getDate() - 7);
            this.$input.datepicker('setDate', navegationDate);
        },

        arrowHandlerRight: function () {
            var navegationDate = this.currentDate;

            navegationDate.setDate(navegationDate.getDate() + 1);
            this.$input.datepicker('setDate', navegationDate);
        },

        arrowHandlerDown: function () {
            var navegationDate = this.currentDate;

            navegationDate.setDate(navegationDate.getDate() + 7);
            this.$input.datepicker('setDate', navegationDate);
        },

        arrowHandlerLeft: function () {
            var navegationDate = this.currentDate;

            navegationDate.setDate(navegationDate.getDate() - 1);
            this.$input.datepicker('setDate', navegationDate);
        }
    };

    $.fn.zzeDatePicker = function (option, options) {
        return this.each(function () {
            var scope = $(this),
                zzeDatePicker = scope.data('zzeDatePicker'),
                opts = typeof option === 'object' && option;

            if (typeof option !== 'string' && zzeDatePicker) {
                zzeDatePicker.destroy();
                zzeDatePicker = null;
            }

            if (!zzeDatePicker) {
                scope.data('zzeDatePicker', (zzeDatePicker = new DatePicker(scope, opts)));
            }

            if (typeof option === 'string') {
                zzeDatePicker[option](options);
            }
        });
    };
}());

/**
 * Created by selinger on 20/11/17.
 */
(function () {

    'use strict';

    Selectize.define('clear_button', function (options) {
        /**
         * Escapes a string for use within HTML.
         *
         * @param {string} str
         * @returns {string}
         */
        var escapeHtml = function (str) {
            return (str + '')
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;');
        };

        options = $.extend({
            title: 'Limpar',
            className: 'clearAll',
            append: true,
            hideWhenEmpty: true,
            leaveOpen: false
        }, options);

        var self = this,
            $html = $('<span class="' + options.className + '" tabindex="-1" title="' + escapeHtml(options.title) + '">' +
                '<i class="icon-close"></i>' +
                '</span>');


        this.setup = (function () {
            var original = self.setup;

            return function () {
                // override the item rendering method to add the button to each
                original.apply(this, arguments);

                this.$wrapper.append($html);

                if (options.hideWhenEmpty) {
                    var $input = this.$input,
                        hideShowClrBtn = function ($inpt) {
                            var val = $inpt.val();

                            if (val) {
                                $html.show();
                            } else {
                                $html.hide();
                            }
                        };

                    hideShowClrBtn($input);

                    $input.change(function () {
                        hideShowClrBtn($input);
                    });
                }

                // Add event listener.
                this.$wrapper.on('click', '.' + options.className, function (e) {
                    e.preventDefault();

                    if (self.isLocked) {
                        return;
                    }

                    self.clear();
                    self.focus();

                    if (options.leaveOpen) {
                        /* jshint camelcase: false */
                        self.$control_input.focus();
                    }
                });
            };
        })();
    });

    /**
     * Converts a scalar to its best string representation
     * for hash keys and HTML attribute values.
     *
     * Transformations:
     *   'str'     -> 'str'
     *   null      -> ''
     *   undefined -> ''
     *   true      -> '1'
     *   false     -> '0'
     *   0         -> '0'
     *   1         -> '1'
     *
     * @param {string} value
     * @returns {string|null}
     */

    /* jshint camelcase:false */
    var hash_key = function (value) {
        if (typeof value === 'undefined' || value === null) {
            return null;
        }

        if (typeof value === 'boolean') {
            return value ? '1' : '0';
        }

        return value + '';
    };

    $.extend(Selectize.prototype, {

        /* jshint camelcase:false */
        search: function (query) {
            var i,
                result,
                calculateScore;

            var self = this,
                settings = self.settings,
                options = this.getSearchOptions();

            // validate user-provided result scoring function
            if (settings.score) {
                calculateScore = self.settings.score.apply(this, [query]);

                if (typeof calculateScore !== 'function') {
                    throw new Error('Selectize "score" setting must be a function that returns a function');
                }
            }

            // perform search
            if (query !== self.lastQuery) {
                self.lastQuery = query;

                result = self.sifter.search(query, $.extend(options, {
                    score: calculateScore
                }));
                self.currentResults = result;
            } else {
                result = $.extend(true, {}, self.currentResults);
            }

            // filter out selected items
            if (settings.hideSelected) {
                for (i = result.items.length - 1; i >= 0; i--) {

                    /* jshint undef:false */
                    if (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {
                        result.items.splice(i, 1);
                    }
                }
            }

            if (!settings.includeChildren) {
                return result;
            }

            /* Daqui para frente é coisa doida do Controlle e Organizze. Não mexa nunca.
             * ---------------------------------------------------------------------------------------------------------
             */

            // Get full data the items the result filter.
            result.items = this.getFullData(result.items, self.options, self.settings);

            var separatedCollection = this.separeteItems(result.items),
                newCollection = [];


            // Get childrens and Parents.
            for (var j = 0, len = separatedCollection.fathers.length; j < len; j++) {
                newCollection.push(separatedCollection.fathers[j]);

                for (var k = 0, klen = separatedCollection.childrens.length; k < klen; k++) {

                    if (separatedCollection.childrens[k].parent_uuid === separatedCollection.fathers[j].thisUuid) {
                        newCollection.push(separatedCollection.childrens[k]);
                    }
                }
            }

            // Check Childrens to get Parent.
            /* jshint loopfunc: true */
            for (var l = 0, llen = separatedCollection.childrens.length; l < llen; l++) {

                var parent = _.find(newCollection, function (item) {
                    return item.thisUuid === separatedCollection.childrens[l].parent_uuid;
                });

                if (!parent) {

                    var newParent = _.find(self.options, function (item) {
                        return item.uuid === separatedCollection.childrens[l].parent_uuid;
                    });

                    newCollection.push({
                        id: newParent.uuid,
                        parent_uuid: newParent.parent_uuid,
                        thisUuid: newParent.uuid
                    });

                    for (var m = 0, mlen = separatedCollection.childrens.length; m < mlen; m++) {

                        if (separatedCollection.childrens[m].parent_uuid === newParent.uuid) {
                            newCollection.push(separatedCollection.childrens[m]);
                        }
                    }
                }
            }

            result.items = newCollection;

            return result;
        },

        /* jshint loopfunc: true */
        getFullData: function (collectionResult, collectionFull, settings) {

            var newCollection = collectionResult;

            for (var i = 0, len = collectionResult.length; i < len; i++) {

                var obj = _.find(collectionFull, function (item) {

                    var _query = settings.valueField ? item[settings.valueField] : item.value;

                    return collectionResult[i].id === _query;
                });

                newCollection[i].thisId = obj.id;

                newCollection[i].thisUuid = obj.uuid;
                newCollection[i].parent_uuid = obj.parent_uuid;
            }

            return newCollection;
        },

        separeteItems: function (collection) {
            var newCollection = {
                fathers: [],
                childrens: []
            };

            for (var i = 0, len = collection.length; i < len; i++) {
                if (collection[i].parent_uuid) {
                    newCollection.childrens.push(collection[i]);
                    continue;
                }

                newCollection.fathers.push(collection[i]);
            }

            return newCollection;
        }
    });
})();

/**
 * Created by selinger on 08/09/17.
 */
(function () {

    'use strict';

    var AssetPath = {

        get: function (filename) {
            var railsAssets = window.APP_JS_ADAPTER_DATA.railsAssetsManifest,
                zzeFrontManifest = window.APP_JS_ADAPTER_DATA.zzeFrontManifest,
                path;

            if (zzeFrontManifest[filename]) {
                path = zzeFrontManifest[filename];
                return  window.APP_JS_ADAPTER_DATA.zzeFrontUrl + '/' + path;
            } else {
                path = (railsAssets[filename] || filename);
                return '/assets/' + path;
            }
        }
    };

    window.AssetPath = AssetPath;

})();

(function () {

    'use strict';

    var Popover = function ($element, $popover, settings) {
        this.$element  = $element;
        this.$popover  = $popover;
        this.$popoverBlocked = $(this.$popover).find('.zze-popover-blocked');

        this.settings  = settings;
        this.timeClose = undefined;

        this.init();
    };

    Popover.closeAll = function () {
        var eventEsc = $.Event('keyup');

        eventEsc.keyCode = 27;

        $(document).trigger(eventEsc);
    };

    Popover.prototype = {

        init: function () {
            var _this = this;

            if (_this.settings.toggle === 'click') {
                this.$element
                    .on('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        if (!_this.$popover.is(':visible')) {
                            Popover.closeAll();
                        }

                        _this.toggle();
                    });
            } else {
                this.$element
                    .on('click.popover', function (e) {
                        e.preventDefault();
                        // e.stopPropagation();
                    })
                    .on('mouseenter.popover', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        clearTimeout(_this.timeClose);

                        if (!_this.$popover.is(':visible')) {
                            Popover.closeAll();
                        }

                        _this.open();
                    })
                    .on('mouseleave.popover', function () {
                        _this.timeClose =  setTimeout(function () {
                            _this.close();
                        }, 700);
                    });
            }
        },

        addEvents: function () {
            var _this = this;

            this.$popover
                .on('click', '[data-dismiss="popover"]', function (e) {
                    if (_this.$popoverBlocked.length && _this.$popoverBlocked.is(':visible')) {
                        e.preventDefault();
                        e.stopPropagation();
                    }

                    _this.close(true);
                })
                .on('click.popover', function (e) {
                    if (_this.$popoverBlocked.length && _this.$popoverBlocked.is(':visible')) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                })
                .on('mouseenter.popover', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    clearTimeout(_this.timeClose);
                })
                .on('mouseleave.popover', function () {
                    _this.timeClose =  setTimeout(function () {
                        _this.close();
                    }, 700);
                });

            $(document)
                .on('click', function () {
                    _this.close(true);
                })
                .on('keyup', function (e) {
                    if (e.keyCode === 27) {
                        _this.close(true);
                    }
                });
        },

        getAutoFocus: function () {
            return this.$element.attr('data-auto-focus') !== 'false';
        },

        removeEvents: function () {
            this.$popover
                .off('click.popover')
                .off('mouseenter.popover')
                .off('mouseleave.popover');

            $(document).off('.popover');
        },

        position: function () {
            var position = this.getPosition();

            this.$popover
                .css({
                    'top': position.top,
                    'left': position.left,
                    'z-index': this.getZIndexModal()
                });
        },

        getPosition: function () {
            return this.settings.createToBody ? this.calcPositionBody() : this.calcPositionElement();
        },

        updatePosition: function () {
            var _that = this;

            setTimeout(function () {
                var position = _that.getPosition();

                _that.$popover
                    .animate({
                        'top': position.top,
                        'left': position.left
                    }, 500);
            }, 10);
        },

        calcPositionElement: function () {
            var elementWidth = this.$element.outerWidth(),
                elementHeight = this.$element.outerHeight(),

                popoverWidth = this.$popover.outerWidth(),
                popoverHeight = this.$popover.outerHeight(),

                reCalcTop = this.settings.reCalcTop || 0,
                reCalcLeft = this.settings.reCalcLeft || 0,

                posTop,
                posLeft;

            if (this.settings.position === 'top') {
                posTop = -popoverHeight + reCalcTop;
                posLeft = ((elementWidth / 2) - (popoverWidth / 2)) + reCalcLeft;
            }

            if (this.settings.position === 'right') {
                posTop = ((elementHeight / 2) - (popoverHeight / 2)) + reCalcTop;
                posLeft = elementWidth + reCalcLeft;
            }

            if (this.settings.position === 'bottom') {
                posTop = elementHeight + reCalcTop;
                posLeft = ((elementWidth / 2) - (popoverWidth / 2)) + reCalcLeft;
            }

            if (this.settings.position === 'left') {
                posTop = ((elementHeight / 2) - (popoverHeight / 2)) + reCalcTop;
                posLeft = -popoverWidth + reCalcLeft;
            }

            return {
                top: posTop,
                left: posLeft
            };
        },

        calcPositionBody: function () {
            var elementWidth = this.$element.outerWidth(),
                elementHeight = this.$element.outerHeight(),

                popoverWidth = this.$popover.outerWidth(),
                popoverHeight = this.$popover.outerHeight(),

                position = this.$element.offset(),

                reCalcTop = this.settings.reCalcTop || 0,
                reCalcLeft = this.settings.reCalcLeft || 0,

                reCalcDefault = 7,

                posTop,
                posLeft;

            if (this.settings.position === 'top') {
                posTop = parseInt((position.top - popoverHeight) - reCalcTop, 10) + reCalcDefault;
                posLeft = parseInt(position.left + (elementWidth / 2) - (popoverWidth / 2) + reCalcLeft, 10);
            }

            if (this.settings.position === 'right') {
                posTop = parseInt(position.top + (elementHeight / 2) - (popoverHeight /2) + reCalcTop, 10);
                posLeft = parseInt((position.left + elementWidth) + reCalcLeft, 10) - reCalcDefault;
            }

            if (this.settings.position === 'bottom') {
                posTop = parseInt((position.top + elementHeight) + reCalcTop, 10) - reCalcDefault;
                posLeft = parseInt(position.left + (elementWidth / 2) - (popoverWidth / 2) + reCalcLeft, 10);
            }

            if (this.settings.position === 'left') {
                posTop = parseInt(position.top + (elementHeight / 2) - (popoverHeight /2) + reCalcTop, 10);
                posLeft = parseInt((position.left - popoverWidth) + reCalcLeft, 10) + reCalcDefault;
            }

            return {
                top: posTop,
                left: posLeft
            };
        },

        getZIndexModal: function () {
            var isInDialog = $(this.$element).parents('.ngdialog:first');

            if (isInDialog.length > 0) {
                var zindex =  parseInt(isInDialog.css('z-index')) + 1;

                return zindex;
            }

            return 1070;
        },

        focus: function () {
            $('input[type=text]:first', this.$popover).focus();
        },

        toggle: function () {
            if (this.$popover.is(':visible')) {
                this.close();
            } else {
                this.open();
            }
        },

        open: function () {
            var _this = this;

            this.position();

            this.$popover.show();

            setTimeout(function () {
                _this.onReady();
            }, 20);
        },

        onReady: function () {
            this.show();

            if (this.getAutoFocus()) {
                this.focus();
            }

            this.addEvents();
        },

        show: function () {
            this.$popover.addClass('in');
            this.$element.addClass('popover-active');
        },

        hide: function () {
            this.$popover.removeClass('in');
            this.$element.removeClass('popover-active');
        },

        isOpen: function () {
            return this.$popover.is(':visible');
        },

        close: function (forceClose) {
            var _this = this;

            if (this.$popoverBlocked.length && this.$popoverBlocked.is(':visible') && !forceClose) {
                return;
            }

            var calendar = $('#ui-datepicker-div');

            if (calendar && calendar.is(':visible')) {
                return;
            }

            this.hide();

            this.removeEvents();

            _this.$popover.hide();
        }
    };

    window.Popover = Popover;
}());
